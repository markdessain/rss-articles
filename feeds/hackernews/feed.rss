<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hacker News</title>
    <link>https://news.ycombinator.com/</link>
    <description>Links for the intellectually curious, ranked by readers.</description>
    <image>
      <url></url>
      <title></title>
      <link></link>
    </image>
    <item>
      <title>Launch HN: Senpai.gg (YC S21) – Personal gaming coach for PC gamers</title>
      <link>https://news.ycombinator.com/item?id=28145998</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><td colspan="2"></td><td>Hi HN, we’re SenpAI.GG (<a href="https://senpai.gg/" rel="nofollow">https://senpai.gg/</a>). We help gamers get better by providing real-time, personalized suggestions and feedback before, during, and after games.<p>It takes a lot of time and effort to become good at popular games. Even after learning a game, you need to adapt your gameplay to meta changes (game updates). We’ve developed a desktop application to accelerate your learning curve, as well as easily adjusting your gameplay as games get updated. We provide personalized recommendations before the game to set up strategies, give instant notifications and feedback while playing the game, and detailed post-game analysis to improve your gameplay.</p><p>We&#39;re friends from college and played many games together during our dorm life in the early 2010s, especially Age of Empires II (we&#39;re old-fashioned). We were very good at 2 vs 2 matches and were considered the best in our dorm. A few years later, we decided to play AoE II again and got destroyed in the first 3 matches. We googled the ways to improve our gameplay and found two ways in addition to orthodox methods such as reading guides. The first was to watch hours of streams on YouTube or Twitch. Considering we had demanding jobs by then, it was impossible to watch long videos. The second was to pay for professional feedback from “human” gaming consultants.</p><p>Then, we came up with the idea that we can mimic human gaming consultants and create a scalable system. We could use statistics to provide fundamental level suggestions to improve the gameplay. This is how we formed the basic idea behind SenpAI.GG. Since we know AoE II has a limited number of players, we decided to start with League of Legends and developed a prototype in 2018.</p><p>Our Desktop application is now available (beta) for League of Legends, VALORANT and TFT. League of Legends players need to pick the champions, runes and items just before they start a match and play. We provide champions, runes and items suggestions to improve their winning probability. Our recommendations can be imported to the game with a single click. We provide some tags pinpointing the game characteristics of opponents and teammates. For example, we have an &#34;Early Ganker&#34; tag for the gamers who tend to gang in the early game. After the match, gamers can take a look at their strengths and weaknesses. For instance, we provide a tag of &#34;Early Game Gold Loss&#34; for a gamer whose gold/minutes ratio is significantly less than the lane opponent in early game). We provide these tags based on only publicly accessible data on the official game publisher API. For example, any gamer can search for the opponents’ game data and conduct a similar analysis.</p><p>For VALORANT, we have a Voice Assistant. For example, we start a counter when a spike  (Spike is a type of &#34;bomb&#34; with 45 second detonation time.) is planted and provide verbal notifications (10 seconds, 7 seconds, etc..). For healer agents, we notify the gamers if any of the teammate&#39;s HP is low. This information is already available on the screen (health bars) but we provide an extra verbal notification. During the match, we don’t provide any information about the opponent.</p><p>We follow the guideline of the game publishers and do not share any information or suggestion that is not available on the screen of the player. We consider SenpAI as analogous to a friend sitting next to the gamers, making recommendations based on the data they see. In the case of sports, the best analogy would be an ‘analyst’ or a ‘personal performance coach&#39; that provides some training and insights about the opponents based on the publicly accessible data. An approximate analogy to, say, chess might be that we tell about the chess clock and provide verbal notifications about time spent while the player is thinking.</p><p>We have a Desktop application (built on Electron.js) and a web application. We have two sources of data. We have access to the official API of game developers (specifically Riot Games) and we utilize computer vision to extract information (e.g., health bar) from the game in real-time. For League of Legends, we trained a deep learning model to predict the results of matches. We provide pre-game suggestions to maximize the winning probability of this model.</p><p>It&#39;s free to use SenpAI.GG, however we have plans to launch a freemium business model inspired by popular video games. Basically, gamers will need to subscribe to unlock certain features and remove ads.</p><p>We would love to hear what you think about our application. You can download the app from <a href="https://senpai.gg/" rel="nofollow">https://senpai.gg/</a> (currently available for Microsoft Windows) or try our web application at <a href="https://app.senpai.gg/" rel="nofollow">https://app.senpai.gg/</a>. We will be here today to answer any questions and hear your feedback in the comments!</p></td></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 18:44:57 +0000</pubDate>
      <source>https://news.ycombinator.com/item?id=28145998</source>
    </item>
    <item>
      <title>Launch HN: Slip (YC S21) – Build and sell interactive programming courses</title>
      <link>https://news.ycombinator.com/item?id=28141462</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><td colspan="2"></td><td>Hi HN, I&#39;m Kenneth and I&#39;m the founder of Slip (<a href="https://www.slip.so" rel="nofollow">https://www.slip.so</a>), a marketplace for programmers to build and sell courses, including interactive elements like in-browser code execution, popular programming embeds (CodeSandbox, StackBlitz, Replit repls (Coming soon)), and videos.<p>Instead of spending 3 or more months building their own course platform, developers can use Slip to create engaging interactive courses and make more money faster from their knowledge</p><p>In January, I built vim.so in 3 days, and made $11k in my first month. I even did a Show HN for it (<a href="https://news.ycombinator.com/item?id=25846347" rel="nofollow">https://news.ycombinator.com/item?id=25846347</a>). I was able to do it in 3 days because I had previously spent 3 months building an interactive course for Python fundamentals. That previous experience reduced the time it took me to build a new course, which was the only reason it made sense to do. 3 days of hacking was low-risk enough that when I had the idea for vim.so, it made sense to actually try and see.</p><p>The results blew me away and actually changed my life. If sales continue at the current rate, I&#39;ll make about $50k this year with vim.so. This experience gave me confidence that I could build something and sell it on the internet. It helped give me credibility as a developer, and got me connected with lots of other cool folks building cool things.</p><p>After launching vim.so, I started getting lots of inbound requests to build other interactive courses on various topics: Ruby, Git, Bash, etc. At first I thought I&#39;d just build all these myself but quickly realized other folks could teach these topics at a much deeper level than I could. But why weren&#39;t they building these courses? It&#39;s because it&#39;s currently too hard to make an interactive programming course. After maybe the 5th Twitter DM asking me for an interactive Git course, I decided to start a platform that helps other devs do the same thing I did with vim.so.</p><p>The main tool in Slip is an online course editor that allows you to build a course with a variety of &#34;block types&#34;. You can use markdown, videos, code snippets, figma embeds, CodeSandbox Embeds, and executable code snippets. Code executions happen in remote one-off Docker containers. Code snippets are built using the open-source Ace Editor react component.</p><p>The editor is free to use. We take a 10% cut of sales made via our site (plus processing fees). We handle payments via Stripe and accept and remit VAT taxes for the author. Slip also has features to help authors make more money with their courses. For selected courses, we can run a presale campaign. We also publish and feature courses directly on our site that meet a certain quality bar.</p><p>Some devs who have rolled their own interactive course platform have spent more than 6 months just on that part! If we can remove that 6 months of non-content work, more devs will be able to build better educational materials. I&#39;ve met multiple folks making over 6 figures a year teaching programming courses. Slip will be a success if we can help many more people do that, a lot more easily.</p><p>If you have any experience building educational programming courses or ideas on what programming courses are lacking today, or have any thoughts to share, I&#39;d love to hear from you!</p></td></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 12:59:30 +0000</pubDate>
      <source>https://news.ycombinator.com/item?id=28141462</source>
    </item>
    <item>
      <title>GitHub’s Engineering Team has moved to Codespaces</title>
      <link>https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div>

	<p><em>Today, GitHub is making <a href="https://github.com/features/codespaces" target="_blank" rel="noopener">Codespaces</a> available to Team and Enterprise Cloud plans on github.com. Codespaces provides software teams a faster, more collaborative development environment in the cloud. Read more on our <a href="http://github.com/features/codespaces" target="_blank" rel="noopener">Codespaces page</a>.</em></p>
<hr/>
<p>The GitHub.com codebase is almost 14 years old. When the first commit for GitHub.com was pushed, Rails was only two years old. AWS was one. Azure and GCP did not yet exist. This might not be long in COBOL time, but in internet time it’s quite a lot.</p>
<p>Over those 14 years, the core repository powering GitHub.com (github/github) has seen over a million commits. The vast majority of those commits come from developers building and testing on macOS.</p>
<div id="attachment_59288"><p></p><p id="caption-attachment-59288"><em><span>A classic commit message for a classic commit</span></em></p></div>
<p>But our development platform is evolving. Over the past months, we’ve left our macOS model behind and moved to Codespaces for the majority of GitHub.com development. This has been a fundamental shift for our day-to-day development flow. As a result, the Codespaces product is stronger and we’re well-positioned for the future of GitHub.com development.</p>
<h2 id="the-status-quo">The status quo<a href="#the-status-quo" aria-label="The status quo" data-anchorjs-icon="#"></a></h2>
<p>Over the years, we’ve invested significant time and effort in making local development work well out of the box. Our <a href="https://github.blog/2015-06-30-scripts-to-rule-them-all/" target="_blank" rel="noopener">scripts-to-rule-them-all approach</a> has presented a familiar interface to engineers for some time now—new hires could clone <code>github/github</code>, run setup and bootstrap scripts, and have a local instance of GitHub.com running in a half-day’s time. In most cases things just worked, and when they didn’t, our bootstrap script would open a GitHub issue connecting the new hire with internal support. Our <code>#friction</code> Slack channel—staffed by helpful, kind engineers—could debug nearly any system configuration under the sun.</p>
<div id="attachment_59287"><p></p><p id="caption-attachment-59287"><em><span>Run GitHub.com locally (eventually) with this one command!</span></em></p></div>
<p>Yet for all our efforts, local development remained brittle. Any number of seemingly innocuous changes could render a local environment useless and, worse still, require hours of valuable development time to recover. Mysterious breakage was so common and catastrophic that we’d codified an option for our bootstrap script: <code>--nuke-from-orbit</code>. When invoked, the script deletes as much as it responsibly can in an attempt to restore the local environment to a known good state.</p>
<p>And of course, this is a classic story that anyone in the software engineering profession will instantly recognize. Local development environments are fragile. And even when functioning perfectly, a single-context, bespoke local development environment felt increasingly out of step with the instant-on, access-from-anywhere world in which we now operate.</p>
<p>Collaborating on multiple branches across multiple projects was painful. We’d often find ourselves staring down a 45-minute bootstrap when a branch introduced new dependencies, shipped schema changes, or branched from a different SHA. Given how quickly our codebase changes (we’re deploying hundreds of changes per day), this was a regular source of engineering friction.</p>
<p>And we weren’t the only ones to take notice—in building Codespaces, we engaged with several best-in-class engineering organizations who had built Codespaces-like platforms to solve these same types of problems. At any significant scale, removing this type of productivity loss becomes a very clear productivity opportunity, very quickly.</p>
<div id="attachment_59286"><p></p><p id="caption-attachment-59286"><em><span>This single log message will cause any GitHub engineer to break out in a cold sweat</span></em></p></div>
<h2 id="development-infrastructure">Development infrastructure<a href="#development-infrastructure" aria-label="Development infrastructure" data-anchorjs-icon="#"></a></h2>
<p>In the infrastructure world, industry best practices have continued to position servers as a commodity. The idea is that no single server is unique, indispensable, or irreplaceable. Any piece could be taken out and replaced by a comparable piece without fanfare. If a server goes down, that’s ok! Tear it down and replace it with another one.</p>
<p>Our local development environments, however, are each unique, with their own special quirks. As a consequence, they require near constant vigilance to maintain. The next <code>git pull</code> or <code>bootstrap</code> can degrade your environment quickly, requiring an expensive context shift to a recovery effort when you’d rather be building software. There’s no convention of a warm laptop standing by.</p>
<p>But there’s a lot to be said for treating development environments as our own—they’re the context in which we spend the majority of our day! We tweak and tune our workbench in service of productivity but also as an expression of ourselves.</p>
<p>With Codespaces, we saw an opportunity to treat our dev environments much like we do infrastructure—a commodity we can churn—but still maintain the ability to curate our workbench. VS Code extensions, settings sync, and dotfiles repos bring our environment to our compute. In this context, a broken workbench is a minor inconvenience—now we can provision a new codespace at a known good state and get back to work.</p>
<h2 id="adopting-codespaces">Adopting Codespaces<a href="#adopting-codespaces" aria-label="Adopting Codespaces" data-anchorjs-icon="#"></a></h2>
<p>Migrating to Codespaces addressed the shortcomings in our existing developer environments, motivated us to push the product further, and provided leverage to improve our overall development experience.</p>
<p>And while our migration story has a happy ending, the first stages of our transition were… challenging. The GitHub.com repository is almost 13 GB on disk; simply cloning the repository takes 20 minutes. Combined with dependency setup, bootstrapping a GitHub.com codespace would take upwards of 45 minutes. And once we <em>had</em> a repository successfully mounted into a codespace, the application wouldn’t run.</p>
<p>Those 14 years of macOS-centric assumptions baked into our bootstrapping process were going to have to be undone.</p>
<p>Working through these challenges brought out the best of GitHub. Contributors came from across the company to help us revisit past decisions, question long-held assumptions, and work at the source-level to decouple GitHub development from macOS. Finally, we could (albeit very slowly) provision working GitHub.com codespaces on Linux hosts, connect from VS Code, and ship some work. Now we had to figure out how to make the thing hum.</p>
<h3 id="45-minutes-to-5-minutes">45 minutes to 5 minutes<a href="#45-minutes-to-5-minutes" aria-label="45 minutes to 5 minutes" data-anchorjs-icon="#"></a></h3>
<p>Our goal with Codespaces is to embrace a model where development environments are provisioned on-demand for the task at hand (roughly a 1:1 mapping between branches and codespaces.) To support task-based workflows, we need to get as close to instant-on as possible. 45 minutes wasn’t going to meet our task-based bar, but we could see low-hanging fruit, ripe with potential optimizations.</p>
<p>Up first: changing how Codespaces cloned github/github. Instead of performing a full clone when provisioned, Codespaces would now execute a shallow clone and then, after a codespace was created with the most recent commits, unshallow repository history in the background. Doing so reduced clone time from 20 minutes to 90 seconds.</p>
<p>Our next opportunity: caching the network of software and services that support GitHub.com, inclusive of traditional Gemfile-based dependencies as well as services written in C, Go, and a custom build of Ruby. The solution was a GitHub Action that would run nightly, clone the repository, bootstrap dependencies, and build and push a Docker image of the result. The published image was then used as the base image in github/github’s devcontainer—config-as-code for Codespaces environments. Our codespaces would now be created at 95%+ bootstrapped.</p>
<p>These two changes, along with a handful of app and service level optimizations, took GitHub.com codespace creation time from 45 minutes to five minutes. But five minutes is still quite a distance from “instant-on.” Well-known studies have shown people can sustain roughly <a href="https://www.nngroup.com/articles/powers-of-10-time-scales-in-ux/" target="_blank" rel="noopener">ten seconds</a> of wait time before falling out of flow. So while we’d made tremendous strides, we still had a way to go.</p>
<h3 id="5-minutes-to-10-seconds">5 minutes to 10 seconds<a href="#5-minutes-to-10-seconds" aria-label="5 minutes to 10 seconds" data-anchorjs-icon="#"></a></h3>
<p>While five minutes represented a significant improvement, these changes involved tradeoffs and hinted at a more general product need.</p>
<p>Our shallow clone approach—useful for quickly launching into Codespaces—still required that we pay the cost of a full clone at <em>some</em> point. Unshallowing post-create generated load with distracting side effects. Any large, complex project would face a similar class of problems during which cloning and bootstrapping created contention for available resources.</p>
<p>What if we could clone and bootstrap the repository ahead of time so that by the time an engineer asked for a codespace we’d already done most of the work?</p>
<p>Enter prebuilds: pools of codespaces, fully cloned and bootstrapped, waiting to be connected with a developer who wants to get to work. The engineering investment we’ve made in prebuilds has returned its value many times over: we can now create reliable, preconfigured codespaces, primed and ready for GitHub.com development in 10 seconds.</p>
<p>New hires can go from zero to a functioning development environment in less time than it takes to install Slack. Engineers can spin off new codespaces for parallel workstreams with no overhead. When an environment falls apart—maybe it’s too far behind, or the test data broke something—our engineers can quickly create a new environment and move on with their day.</p>
<h3 id="increased-leverage">Increased leverage<a href="#increased-leverage" aria-label="Increased leverage" data-anchorjs-icon="#"></a></h3>
<p>The switch to Codespaces solved some very real problems for us: it eliminated the fragility and single-track model of local development environments, but it also gave us a powerful new point of leverage for improving GitHub’s developer experience.</p>
<p>We now have a wedge for performing additional setup and optimization work that we’d never consider in local environments, where the cost of these optimizations (in both time and patience) is too high. For instance, with prebuilds we now prime our language server cache and gem documentation, run pending database migrations, and enable both GitHub.com and GitHub Enterprise development modes—a task that would typically require yet another loop through bootstrap and setup.</p>
<p>With Codespaces, we can upgrade every engineer’s machine specs with a single configuration change. In the early stages of our Codespaces migration, we used 8 core, 16 GB RAM VMs. Those machines were sufficient, but GitHub.com runs a network of different services and will gladly consume every core and nibble of RAM we’re willing to provide. So we moved to 32 core, 64 GB RAM VMs. By changing a single line of configuration, we upgraded every engineer’s machine.</p>
<div id="attachment_59291"><p></p><p id="caption-attachment-59291"><em><span>Instant upgrade—ship config and bypass the global supply chain bottleneck</span></em></p></div>
<p>Codespaces has also started to steal business from our internal “review lab” platform—a production-like environment where we preview changes with internal collaborators. Before Codespaces, GitHub engineers would need to commit and deploy to a review lab instance (which often required peer review) in order to share their work with colleagues. Friction. Now we ctrl+click, grab a preview URL, and send it on to a colleague. No commit, no push, no review, no deploy — just a live look at port 80 on my codespace.</p>
<h3 id="command-line">Command line<a href="#command-line" aria-label="Command line" data-anchorjs-icon="#"></a></h3>
<p>Visual Studio Code is great. It’s the primary tool GitHub.com engineers use to interface with codespaces. But asking our Vim and Emacs users to commit to a graphical editor is less great. If Codespaces was our future, we had to bring everyone along.</p>
<p>Happily, we could support our shell-based colleagues through a simple update to our prebuilt image which initializes <code>sshd</code> with our GitHub <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account" target="_blank" rel="noopener">public keys</a>, opens port 22, and forwards the port out of the codespace.</p>
<p></p>
<p>From there, GitHub engineers can run Vim, Emacs, or even ed if they so desire.</p>
<p>This has worked exceedingly well! And, much like how Docker image caching led to prebuilds, the obvious next step is taking what we’ve done for the GitHub.com codespace and making it a first-class experience for every codespace.</p>
<h2 id="reception">Reception<a href="#reception" aria-label="Reception" data-anchorjs-icon="#"></a></h2>
<p>Change is hard, doubly so when it comes to development environments. Thankfully, GitHub engineers are curious and kind—and quickly becoming Codespaces superfans.</p>
<p>
<strong>I used codespaces yesterday while my dev environment was a little broken and I finished the entire features on codespaces before my dev env was done building lol</strong></p>
<p>Codespaces are now the default development environment for GitHub.com. That <code>#friction</code> Slack channel that we mentioned earlier to help debug local development environment problems? We’re planning to archive it.</p>
<p>We’re onboarding more services and more engineers throughout GitHub every day, and we’re discovering new stories about the value Codespaces can generate along the way. But at the core of each story, you’ll discover a consistent theme that resonates with every engineer: I found a better tool, I’m more productive now, and I’m not going back.</p>


	

	

</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 16:01:01 +0000</pubDate>
      <source>https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/</source>
    </item>
    <item>
      <title>So you want to write a GUI framework</title>
      <link>https://www.cmyr.net/blog/gui-framework-ingredients.html</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div>
      <article>

        

        <p>Through several <a href="https://www.reddit.com/r/rust/comments/o99zj1/what_do_you_think_will_emerge_as_the_dominant/">recent discussions</a> of <a href="https://news.ycombinator.com/item?id=27782337">GUI programming in Rust</a>,
I have been left with the impression that the term ‘GUI’ means significantly
different things to different people.</p>

<p>I would like to try and clarify this point somewhat, first by describing some of
the different things that people refer to as GUI frameworks/toolkits, and then
by exploring in detail the necessary components of one of these, the classic
desktop GUI framework.</p>

<p>Although this post is not especially specific to Rust, it does have its genesis
in Rust: it is largely informed by my experience working on <a href="https://docs.rs/druid">Druid</a>, a Rust
GUI toolkit of the desktop variety.</p>

<p>Once we have a shared understanding of the problem, we will be better situated
to talk about the status of this work in Rust, which will be the topic of a
follow-up post.</p>



<h2 id="what-we-talk-about-when-we-talk-about-gui">What we talk about when we talk about GUI</h2>

<p>A GUI framework can be a lot of different things, with different use cases
and different deployment targets. A framework intended for building embedded
applications is not going to also trivially work on the desktop; a framework for
building desktop applications is not going to trivially work on the web.</p>

<p>Regardless of the specifics, there is one major dividing line to recognize, and
this is whether or not a framework is expected to <em>integrate closely into an
existing platform or environment</em>.</p>

<p>On one side of this line, then, are tools for building games, embedded
applications, and (to a lesser degree) web apps. In this world, you are
responsible for providing almost everything your applications will need, and you
will be interacting closely with the underlying hardware: accepting raw input
events, and outputting your UI to some sort of buffer or surface. (The web is
different; here the browser vendors have done that integration work for you.)</p>

<p>On the other side of this line are tools for building traditional desktop
applications. In <em>this</em> world, you must integrate tightly into a large number of
existing platform APIs, design patterns, and conventions, and it is this
integration that is the source of most of your design complexity.</p>

<h3 id="games-and-embedded-guis">Games and embedded GUIs</h3>

<p>Before we start digging into all the integrations expected of a desktop
application framework, let’s talk briefly about the first case.</p>

<p>Games and GUI for embedded applications (think of the infotainment system in the
back of a taxi, or the interface on a medical device) are different from desktop
GUIs in a number of ways, most of which can be thought of in terms
of system integration: games and embedded applications don’t have to do as much of
it. In general, a game or an embedded application is a self-contained world;
there is a single ‘window’, and the application is responsible for drawing
everything in it. The application doesn’t need to worry about menus or
sub-windows; it doesn’t need to worry about the <a href="https://raphlinus.github.io/ui/graphics/2020/09/13/compositor-is-evil.html">compositor</a>, or integrating with
the <a href="https://github.com/linebender/druid/pull/1636">platform’s IME</a> system. Although they maybe <em>should</em>, they often don’t
support <a href="https://harfbuzz.github.io/complex-scripts.html">complex scripts</a>. They can ignore rich text editing. They likely don’t need
to support <a href="https://github.com/WICG/local-font-access">font enumeration</a> or <a href="https://www.figma.com/blog/when-fonts-fall/">fallback</a>. They often ignore accessibility.</p>

<p>Of course, they do have additional challenges of their own. Embedded
applications have to think much more carefully about resource constraints, and
may need to <a href="https://lupyuen.github.io/articles/porting-druid-rust-widgets-to-pinetime-smart-watch">avoid allocation</a> altogether. When they <em>do</em> need
features like complex scripts or text input, they have to implement these
features on their own, without being able to rely on anything provided by the
system.</p>

<p>Games are similar, and additionally have their own unique performance concerns
and considerations that I am not qualified to talk about in any real detail.</p>

<p>Games and embedded are certainly interesting domains. Embedded in particular is
a place where I think Rust GUI could really make a lot of sense, for many of the
same reasons that Rust generally has a <a href="https://www.rust-lang.org/what/embedded">strong value proposition</a>
for embedded use.</p>

<p>It is unlikely, however, that a project that is intended for game or embedded
development is going to tackle the whole list of capabilities we expect in
desktop applications.</p>

<h2 id="anatomy-of-a-native-desktop-application">Anatomy of a ‘native desktop application’</h2>

<p>The principal distinguishing feature of a desktop application is its close
integration into the platform. Unlike a game or an embedded application, a
desktop application is expected to interoperate intimately with the host OS, as
well as with other software.</p>

<p>I’d like to try and go through some of the major required integration points,
and some of the possible approaches available for providing them.</p>

<h3 id="windowing">Windowing</h3>

<p>An application has to instantiate and manage windows. The API should allow for
customization of window appearance and behaviour, including things like whether
the window is resizeable, whether it has a titlebar, etc. The API should allow
for multiple windows, and it should also support modal and child-windows in a
way that respects platform conventions. This means supporting both
<a href="https://developer.apple.com/documentation/appkit/nsapplication/1428418-beginmodalsession#">application-modal</a> windows (for instance alerts that steal focus from the entire
application until dealt with) as well as <a href="https://developer.apple.com/documentation/appkit/nswindow/1419653-beginsheet">window-modal</a> windows (an alert that
steals focus from a given window until dealt with). Modal windows are used to
implement a large number of common features, including open/save dialogs (which
may be special-cased by the platform) alerts, confirmation dialogs, as well as
standard UI elements such as combo boxes and other drop-down menus (think a list
of completions for a text field).</p>

<p>The API must allow subwindows to be positioned precisely, relative to the
position of the parent window. For instance in the case of a combo box, when
showing the list of options you may wish to draw the currently selected item at
the same baseline position used when the list is closed, as in macOS:</p>



<p>Similarly, there needs to be an API that provides information about screens and
the positions of windows within them, so that a combo box can be positioned
appropriately to use available space: if the box is at the bottom of the screen
it should position the popup above itself, and otherwise below.</p>

<h4 id="tabs">Tabs</h4>

<p>You’re also going to want to support tabs. You should be able to drag a tab out
of a tab group to create a new window, as well as drag tabs between windows.
Ideally you would like use the platform’s native tabbing infrastructure, but…
that’s complicated. The browsers all roll their own implementations, and this is
probably for a good reason. You would <em>like</em> to respect the user’s preferences
around tabs (macOS let’s the user choose to open new windows as tabs,
system-wide) but that will be an additional complication. I forgive you if you
skip it, but if your framework sees much use you’re going to get someone
reporting it as a bug every month until you die, and they aren’t wrong.</p>

<div>


<video id="tabs-video" width="656" height="226" controls="">

    <source src="/assets/desktop_gui/safari_tabs.mp4" type="video/mp4"/>

    Sorry, your browser doesn&#39;t support embedded videos.
</video>

<p>Difference and appearance between &#34;native&#34; tabs (in
Safari) with custom implementations in Chrome and Firefox.</p>
</div>



<p>Closely related to windows are menus; a desktop application should respect
platform conventions around window and application menus. On Windows (the
operating system family) menus are a component of the window. On macOS, the menu
is a property of the application, which is updated to reflect the commands
available for the active window. On linux, things are slightly less clear cut.
If you’re using GTK then there are both window and application menus, although
the latter <a href="https://developer.gnome.org/ApplicationMenu/">are deprecated</a>. If you’re directly targeting x11 or
wayland, you’ll need to implement menus on your own, and you can theoretically
do whatever you want, although the easy path is Windows-style window menus.</p>

<p>Generally there are <a href="https://developer.apple.com/design/human-interface-guidelines/macos/menus/menu-bar-menus/">explicit</a> <a href="https://docs.microsoft.com/en-us/windows/win32/uxguide/cmd-menus#standard-menus">conventions</a> around what
menus you should provide, and what commands should be present in them; a
well-behaved desktop application should respect these conventions.</p>

<h4 id="painting">Painting</h4>

<p>To draw the content of your app, you need (at least) a basic 2D graphics API.
This should provide the ability to fill and stroke paths (with colors, including
transparency, as well as with radial and linear gradients), to lay out text, to
draw images, to define clip regions, and to apply transformations. Ideally your
API also provides a few more advanced features such as blend modes and blurs,
for things like drop shadows.</p>

<p>These APIs exist, in subtly different form, on the various platforms. on macOS,
there is <a href="https://developer.apple.com/documentation/coregraphics">CoreGraphics</a>, on windows <a href="https://docs.microsoft.com/en-us/windows/win32/direct2d/direct2d-portal">Direct2D</a>, and on linux there is <a href="https://www.cairographics.org">Cairo</a>. One
approach, then, is to present a common API abstraction over top of these
platform APIs, puttying over the rough edges and filling in the gaps. (This is
the approach we have currently taken, with the <a href="https://docs.rs/piet">piet</a> library.)</p>

<p>This does have its downsides. These API are different enough (especially in
trickier areas, <a href="https://www.cmyr.net/blog/piet-text-work.html">such as text</a>) that designing a good abstraction
can be challenging, and requires some jumping through hoops. Subtly different
platform behaviour can cause rendering irregularities.</p>

<p>It would be simpler to just use the same renderer everywhere. One option might
be something like <a href="https://skia.org">Skia</a>, the rendering engine used in Chrome and Firefox.
This has the advantage of portability and consistency, at the cost of binary
size and compile time costs; a Rust binary using <a href="https://github.com/rust-skia/rust-skia">skia-safe</a> crate has a
baseline size of about 17M for a release build (my methodology wasn’t great for
this, but I think it’s a reasonable baseline.)</p>

<p>Skia is still a fairly traditional software renderer, although it does now have
significant GPU support. Ultimately, though, the most exciting prospects are
those that move even more of the rendering task to the GPU.</p>

<p>An initial challange here is the diversity of APIs for GPU programming, even for
identical hardware. The same physical GPU can be interfaced with via <a href="https://developer.apple.com/metal/">Metal</a>
on Apple platforms, <a href="https://docs.microsoft.com/en-us/windows/win32/direct3d12/directx-12-programming-guide">DirectX</a> on WIndows, and <a href="https://www.vulkan.org">Vulkan</a> on many other
platforms. Making code portable across these platforms requires either duplicate
implementations, some form of <a href="https://github.com/KhronosGroup/MoltenVK">cross compilation</a> or else an
<a href="https://github.com/gfx-rs/wgpu/tree/master/wgpu-hal">abstraction layer</a>. The problem with these latter cases is that it is
genuinely hard to write an abstraction that provides adequate control of
advanced GPU features (such as the compute capabilities) across subtly different
low-level APIs.</p>

<p>Once you’ve figured out how you want to talk to the hardware, you then need to
figure out how to efficiently and correctly rasterize 2D scenes on the GPU.
This is also probably more complicated than you might initially suspect. Since
GPUs are good at drawing 3D scenes, and since 3D scenes seem “more complicated”
than 2D scenes, it may feel like a natural conclusion that GPUs should handle 2D
trivially. They do not. The rasterization techniques used in 3D are poorly
suited to 2D tasks like clipping to vector paths or antialiasing, and those that
produce the best results have the worst performance. Worse, these traditional
techniques can start to perform very badly in 2D once there are lots of blend
groups or clip regions involved, since each needs its own temporary buffer and
draw call.</p>

<p>There is some promising new
work (such as <a href="https://github.com/linebender/piet-gpu">piet-gpu</a>) that use <a href="https://anteru.net/blog/2018/intro-to-compute-shaders/">compute shaders</a> and can
draw scenes in the 2D imaging model with smoothly consistent performance. This
is an area of active research. One potential limitation is that compute shaders
are a relatively new feature, and are only available in GPUs made in the last
five-or-so years. Other renderers, including <a href="https://github.com/servo/webrender">WebRender</a> as used by Firefox,
use more traditional techniques and have wider compatibility.</p>

<p>In any case, you have options, all with various trade-offs, and none of them
clearly the winner.</p>

<h4 id="animation">Animation</h4>

<p>Oh, also: whatever approach you choose, you are going to also need to provide an
ergonomic, performant animation API. It’s worth thinking about this early; it will be
annoying to try and add it in later.</p>

<h4 id="text">Text</h4>

<p>Regardless of how you paint, you are going to need to <a href="https://gankra.github.io/blah/text-hates-you/">render text</a>.
A GUI framework should at the very least support rich text, complex scripts, text
layout (including things like line breaking, alignment, and justification,
and ideally things like line-breaking within arbitrary paths). You need to
support emoji. You also need to support <a href="https://lord.io/text-editing-hates-you-too/">text editing</a>,
including support for right-to-left and <a href="https://en.wikipedia.org/wiki/Bidirectional_text">BiDi</a>. Suffice to say that this is a
very large undertaking. Realistically, you have two options: either you bundle
<a href="https://github.com/harfbuzz/harfbuzz">HarfBuzz</a>, or you use the platform text APIs: <a href="https://developer.apple.com/documentation/coretext">CoreText</a> on macOS,
<a href="https://docs.microsoft.com/en-us/windows/win32/directwrite/direct-write-portal">DirectWrite</a> on Windows, and likely <a href="https://pango.gnome.org">Pango</a> + HarfBuzz on linux. There are a
few other alternatives, including some promising Rust projects (such as
<a href="https://github.com/yeslogic/allsorts">Allsorts</a>, <a href="https://github.com/RazrFalcon/rustybuzz">rustybuzz</a>, and <a href="https://github.com/dfrg/swash">swash</a>) but none of these are quite complete
enough to fully replace HarfBuzz or the platform text APIs just yet.</p>

<h4 id="the-compositor">The compositor</h4>

<p>2D graphics are a major part of the drawing that might be done by a desktop
application, but they are not the <em>only</em> part. There are two other common cases
worth mentioning: video, and 3D graphics. In both of these cases, we want to
be able to take advantage of available hardware: for video, the hardware
<a href="https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC_products_and_implementations#Decoding">H.264 decoder</a>, and for 3D the GPU.
What this comes down to is instructing the operating system to
embed a video or 3D view in some region of our window, and this means
interacting with the <a href="https://raphlinus.github.io/ui/graphics/2020/09/13/compositor-is-evil.html">compositor</a>. The compositor is the component of the
operating system that is responsible for taking display data from various
sources (different windows from different programs, video playback, GPU output)
and assembling it into a coherent picture of your desktop.</p>

<p>Perhaps the best way to think about why this matters to us is to think about
interactions with scrolling. If you have a scrollable view, and that view
contains a video, you would like to have the video move in sync with the view’s
other content when the view is scrolled. This is harder than it sounds. You
can’t just define a region of your window and embed a video in it; you need to
somehow tell the OS to move the video in sync with your scrolling.</p>

<h4 id="web-views">Web views</h4>

<p>Let’s not forget these: sooner or later, someone is going to want to display
some HTML (or an actual website!) within their application. We’d <em>really</em> rather
not bundle an entire browser engine to accomplish this, but making use of a
platform webview <em>also</em> implicates the compositor and overall significantly
complicates our lives. Maybe your users don’t really need that web view after
all? In any case, something to think about.</p>

<h3 id="handling-input">Handling input</h3>

<p>Once you have figured out how to manage windows and how you are going to draw
your content, you need to handle user input. We can roughly divide input into
<em>pointer</em>, <em>keyboard</em>, and <em>other</em>, where <em>other</em> is stuff like joysticks,
gamepads, and other <a href="https://en.wikipedia.org/wiki/USB_human_interface_device_class">HID devices</a>. We will ignore this last
category, except to say that this would be nice to have, but doesn’t need to be
a priority.
Finally, there are input events that originate from system accessibility
features; we will deal with these when we talk about accessibility.</p>

<p>For both pointer and keyboard events, there is a relatively easy approach, and
then there is a principled, correct approach that is significantly harder to get
right.</p>

<h4 id="pointer-input">Pointer input</h4>

<p>For pointer events, the easy approach is to present an API that sends mouse events,
and then sends trackpad events in a way that makes them look like mouse events:
ignoring multiple touches, pressure, or other features of touch gestures that
do not have obvious analogs to the mouse. The <em>hard</em> approach is to implement
some equivalent of the web’s <a href="https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent">PointerEvent</a> API, where you are able to fully
represent information on multi-touch (both from a trackpad as well as a
touch-sensitive display) and stylus input events.</p>

<p>Doing pointer events the easy way is…okay, assuming you can also provide
events for common trackpad gestures like pinch-to-zoom and two-finger-scroll,
without which your framework is going to immediately frustrate many users.
And while the number of applications that need or want to do advanced gesture recognition
or which expect to handle stylus input is fairly low, they certainly
exist, and a desktop application framework that does not support these cases is
fundamentally limited.</p>

<h4 id="keyboard-input">Keyboard input</h4>

<p>The situation is worse for keyboard input, in two ways: here the hard case is
both harder to do <em>and</em> doing it the ‘easy way’ is fundamentally limiting; going
the easy route means your framework is essentially useless for much of the world’s
population.</p>

<p>The easy way, for keyboard input, is very easy: the keys of a keyboard
are generally associated with a character or string, and when the user presses a key,
you can take that string and smush it in at the cursor position in the active
text field. This works <em>reasonably</em> well for unilingual English text, and
slightly-less-well-but-at-least-sort-of
for general <a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1">Latin-1</a> languages plus scripts that behave similarly to latin, such
as Greek or Cyrillic or Turkish.
Unfortunately (but not coincidentally) a large number of programmers mostly just
type ASCII, but much of the world does not. Serving <em>these</em> users requires
integrating with the platform text input and IME system, a problem that has the unfortunate
property of being both fundamentally necessary and incredibly fiddly.</p>

<p>IME stands for <a href="https://en.wikipedia.org/wiki/Input_method">Input Method Editor</a>, and is a catch-all term for the platform
specific mechanisms that convert keyboard events into text. This process is
fairly trivial for most European languages and scripts, where at most you
may need to insert an accented vowel, but it is much more complicated for the
east-Asian languages (Chinese, Japanese, and Korean, or collectively, CJK) as
well as for various other <a href="https://harfbuzz.github.io/complex-scripts.html">complex scripts</a>.</p>

<div>
<video controls="" width="446" height="282">

    <source src="/assets/desktop_gui/ime.mp4" type="video/mp4"/>

    Sorry, your browser doesn&#39;t support embedded videos.
</video>
<p>Using a Japanese IME on macOS</p>
</div>

<p>Let’s stick to CJK, for the purpose of this example. In these scripts, keyboard
events do not correspond directly to input; instead <a href="https://github.com/linebender/druid/pull/1636">keyboard events are composed</a>
together into input text as you you type, but that text may change significantly
between keystrokes, and the changes can effect not just the current character
but also text that has previously been entered.</p>

<p>This is complicated in a number of ways. Firstly, it means that the interaction
between a given text field and the IME is <em>bidirectional</em>: the IME needs to be
able to both modify the contents of the textbox, but it also needs to be able to
query the current contents of the textbox, in order to have the appropriate
context with which to interpret events. Similarly, it needs to be notified of
changes in the cursor position or selection state; the same key-press may
produce different output based on the surrounding text. Secondly, we also need
to keep the IME up-to-date on the position of the textbox on the screen, since
the IME often presents a ‘candidate’ window of possible inputs for the active
sequence of keyboard events. Finally (and not like <em>actually</em> finally, just that
I’m three thousand words in to this and not nearly done yet) implementing IME in
a cross-platform way is significantly complicated by the differences in the
underlying platform APIs; macOS requires editable text fields to
<a href="https://developer.apple.com/documentation/appkit/nstextinputclient">implement a protocol</a>, and then lets the text field handle accepting
and applying changes from the IME, whereas the <a href="https://docs.microsoft.com/en-us/windows/win32/intl/input-method-manager-reference">Windows API</a> uses a
<a href="https://docs.microsoft.com/en-us/windows/win32/api/imm/nf-imm-immgetcontext">lock and release</a> mechanism; designing an abstraction over both
of these approaches is an additional layer of complexity.</p>

<p>There’s one additional complication related to text input: on macOS,
you need to support the <a href="https://www.hcs.harvard.edu/~jrus/site/system-bindings.html">Cocoa Text System</a>, which allows the user
to specify system-wide keybindings that can issue a variety of text editing and
navigation commands.</p>

<p>To summarize: handling input correctly is a lot of work, and if you don’t do it
your framework is basically a toy.</p>

<h3 id="accessibility">Accessibility</h3>

<p>A desktop application framework has to support native accessibility APIs, and
should ideally do this in a way that does not require special thought or work
from the application developer. Accessibility is a catchall term for a large
number of assistive technologies; the most crucial being support for
<a href="https://www.youtube.com/watch?v=Jao3s_CwdRU">screen readers</a> and assisted navigation. Screen reader support means
interoperating with platform APIs that describe the structure and contents of
your application, and <a href="https://developer.apple.com/videos/play/wwdc2021/10120/">assisted navigation</a> means providing a method of moving
between elements on the screen linearly, allowing elements to be highlighted,
described and activated in turn using a keyboard or joystick.</p>

<p>In addition to these core features, your framework should also respect the
user’s system-level preferences regarding things like text size, reduced color
contrast, and reduced animation. Related, but not accessibility, exactly: you
would like to support dark mode, as well as things like a user-chosen accent
colour.</p>

<h3 id="internationalization-and-localization">Internationalization and Localization</h3>

<p>Your framework should support internationalization. The most obvious component
of this is localization of strings, but it also includes things like mirroring
interfaces in right-to-left locales. Additionally, information like times,
dates, currency units, calendar units, names, sequences, and general
<a href="https://developer.apple.com/videos/play/wwdc2020/10160/">formatting of numerical data</a> should respect the user’s
locale. If this is not a problem you have thought about before, then it is
almost certainly more complicated than you imagine. But don’t worry:
<a href="https://www.unicode.org/reports/tr35/">there’s a standard</a>. All you need to do is implement it.</p>

<h3 id="other-common-features">Other common features</h3>

<ul>
  <li><strong>Copy/paste &amp; drag-and-drop</strong>: These overlap, although drag-and-drop is more
complicated. For copy/paste, you want to support not just text, but also other
<a href="https://docs.microsoft.com/en-us/windows/win32/dataxchg/standard-clipboard-formats">standard formats</a>, and additionally you need to
support user defined formats. For paste, you need to let the user inspect the
clipboard, see the available formats, and retrieve the data. Fun fact: on
macOS and Windows the API to retrieve data from the clipboard is synchronous,
and on x11 it is async. Have fun. For drag and drop, hopefully you can reuse
some of the work you did when you reimplemented window tabs?</li>
  <li><strong>Printing</strong>: <em>printing</em>? Who needs <em>printing</em>?? Well: your users, unfortunately.
Don’t worry, it’s probably not that hard.</li>
  <li>App resumption and window restoration: you’re going to want to remember where
the user’s windows were, and put them back when you relaunch. I hope they
didn’t unplug a monitor.</li>
  <li><strong>Assets and app packaging</strong>: You’re going to want to let the user bundle up their
application. This means doing things like generating your app’s
<a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html">manifest</a>, validating required assets like app icons, and
localization data, and making these things available at runtime per the
conventions of the target platform.</li>
  <li><strong>Async</strong> You <em>do</em> have nice ergonomic async support, don’t you?</li>
</ul>

<h4 id="and-other-less-common-features">And other less common features</h4>

<p>In addition to all of the features that are shared across most desktop
environments, there are also platform-specific features to be thought about:
some of these are stylistic things, like APIs to add
<a href="https://developer.apple.com/documentation/appkit/nsvisualeffectview">transparency or vibrancy</a> to some part of your window; or
support for adding a <a href="https://developer.apple.com/design/human-interface-guidelines/macos/extensions/menu-bar-extras/">menu bar extra</a> or working with <a href="https://docs.microsoft.com/en-us/windows/win32/shell/taskbar-extensions">task bar extensions</a>,
or <a href="https://developer.apple.com/design/human-interface-guidelines/macos/system-capabilities/quick-look/">quick look</a>, or implementing a <a href="https://docs.microsoft.com/en-us/windows/win32/shell/control-panel-applications">control panel item</a>,
or any number of other things. Your framework should at least make these things
<em>possible</em>. At the very least, you should provide opportunities for the user to
drop down and work with the platform APIs directly, so that they
have some escape hatch available for when they really need to achieve something
that you haven’t foreseen (or gotten around to yet).</p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>That feels like a reasonable place to stop; there are certainly things I’ve
overlooked, but I hope I’ve touched on the most significant ones. Once you have
an idea of the things you need to support and implement, you can start thinking
about how to fit it all together.</p>

<h3 id="designing-cross-platform-apis">Designing cross-platform APIs</h3>

<p>One of the more subtle and interesting challenges of designing your GUI
framework is designing the API. Here, you face a very particular problem: you
are attempting to design an API that provides a common interface for a set of
underlying platform APIs that are fundamentally different.</p>

<p>A nice example is around your application’s menus. As mentioned earlier, linux
and Windows generally expect a menu bar to exist on your app’s individual
windows, whereas macOS has a single menu bar that is a component of the desktop
environment, and which becomes your application menu when your application is
active.</p>

<p>To handle this naively, you might have separate ‘application’ and ‘window’
menus, and then you might have conditional code to update one or the other
based on conditional compilation or runtime checks. This ends up being a lot of
duplicate code, however, and it will be easy to get wrong. In this particular
case, I think there is a fairly clear, fairly simple API that works on both
platforms. In your framework, you treat menus as being a property of the window:
on Windows and Linux this is actually the case, so that’s fine, and then on
macOS you set the application menu to be the menu of the currently active
window, changing it as needed when windows gain or lose active status.</p>

<p>This is a fairly clean example, and many other APIs are not so clear cut. In
general, designing these cross-platform APIs is a process of carefully reading
through and experimenting with the platform-specific APIs, and then trying to
identify the set of shared features and functionality that you can express in
the abstraction above; and when no cleanly shared set of features exist, it
means coming up with some <em>other</em> API that can at least be implemented in terms
of what is provided by the platform.</p>

<h3 id="the-seduction-of-the-web-view">The seduction of the web view</h3>

<p>All of this platform complexity, with all of its subtle design flaws, missing
documentation, and mysterious bugs, has already been worked around successfully
by a few major cross-platform GUI frameworks: the major browsers,
Chrome and FireFox. (Safari and Edge don’t need to worry about this, because
they aren’t cross-platform.)</p>

<p>The browsers have had to figure all of this out: the child windows, the text
input, the <em>accessibility</em>,
the font fallback, the compositor, the performant painting, the drag and drop…it’s
all there.</p>

<p>If you’d like to do something cross-platform, then, there is a very natural and
very understandable impulse to reach for web technologies, either by creating a
real web app that runs in the browser, or else by leaning on the browser engine
and using it to render your UI in a native window, à la <a href="https://www.electronjs.org">Electron</a>. This does
come with obvious drawbacks, particularly around performance (on various axes,
such as application size and memory consumption) as well as ‘look and feel’ (on
which we’ll expand shortly) but it sure does make life a lot simpler, and the
more time I spend working on projects in this space, the more sympathetic I
become to folks who choose the browser side of this trade-off.</p>

<h3 id="on-native-look-and-feel">On “native look and feel”</h3>

<p>Something that comes up frequently in discussions of cross-platform GUI work is
a collection of things I’ll refer to as “native look and feel”. This is vague,
and I think it’s helpful to split it in two: <em>native behaviour and convention</em>,
and <em>native appearance</em> (although these can overlap.)</p>

<p><strong>Native behaviour</strong> refers to many of the things we have already discussed, and
some other things besides. Some examples would be scroll behaviour: does your
application respect the user’s scroll preferences? Does your application have
the same acceleration curves when scrolling as the default platform scroll
views? Does your application handle standard system keyboard shortcuts, for
instance for maximizing or hiding a window? Does IME work? This extends to other
less obvious conventions, as well: does the application store user data in the
locations that are conventional to the current platform? Does it use the system
file open/save dialogs? Does it show expected menus, containing expected menu
items?</p>

<p>These things are more important on some platforms than on others. On the Mac, in
particular, getting these behavioural details correct is important: the Mac more
than other platforms is designed around <a href="https://developer.apple.com/design/human-interface-guidelines/">specific conventions</a>, and Mac
application developers have historically been diligent about respecting these.
This in turn has helped create a community of users who value these conventions
and are <a href="https://www.sketch.com/blog/2020/10/26/part-of-your-world-why-we-re-proud-to-build-a-truly-native-mac-app/">sensitive to them</a>, and breaking from them is bound to
<a href="https://daringfireball.net/linked/2020/03/20/mac-assed-mac-apps">upset this cohort</a>.
On Windows, things are slightly more relaxed; there has historically been a
greater diversity of software on Windows, and Microsoft has never been quite as
dogmatic as Apple has been about how an application should look and behave.</p>

<p><strong>Native appearance</strong> refers more to how an application looks. Do your buttons
look like native buttons? Do they have the same sizing and gradients? Do you
more generally use the controls a platform expects for a given interaction, for
instance preferring a checkbox on desktop but a toggle on mobile?</p>

<p>This is additionally complicated by the fact that ‘native appearance’ changes
between not just platforms but also OS releases, to the point where looking
‘native’ on a given machine would require runtime detection of the OS version.</p>

<p>While all of this is <em>possible</em>, it is starting to add a huge amount of
additional work, and for a modestly staffed project this can be hard to justify.
For that reason, I am personally forgiving of a project that moves away from
trying to do pixel-perfect replication of the platform’s built-in widgets, in
favour of just trying to do something tasteful and coherent, while providing the
tools necessary for the framework’s users to style things as needed.</p>

<h3 id="fin">Fin</h3>

<p>I hope this catalog has helped at least vaguely define the scope of the problem.
None of the things I have described here are impossible, but doing them all, and
doing them <em>well</em>, is quite a bit of work.</p>

<p>This last point is worth ending on: for this work to be useful, it is not enough
that it <em>exist</em>. If you would like people to use your framework, you are going
to have to make it attractive to them: providing a good API that is easy to use,
that is idiomatic in the host language, that is well documented, and that lets
them solve their actual problems.</p>


      </article>

    </div></div>]]></content:encoded>
      <pubDate>Tue, 10 Aug 2021 11:29:51 +0000</pubDate>
      <source>https://www.cmyr.net/blog/gui-framework-ingredients.html</source>
    </item>
    <item>
      <title>Poll Everywhere (YC S08) Is Hiring Full Stack Engineers</title>
      <link>https://www.workatastartup.com/jobs/45671</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><div><div><p><span>About Poll Everywhere</span></p><p>Poll Everywhere stands out for being one of the very few successful growth startups who are purposefully unfunded after YC&#39;s initial $20K investment. Our mission is to improve presentations by turning them into two-way conversations. That started with putting several &#34;clicker&#34; companies out of business and quickly becoming the largest text message voting platform. It continues with interactive tools and games that make presenters more authentic listeners and teachers. Poll Everywhere has been used in millions of everyday presentations, at over 75% of the Fortune 1000, thousands of universities, even on prime time TV. Presenters at TED, Google, McDonalds and Stanford trust us to enliven their slides.</p>
<p><span>About the role</span></p><p><b>Skills:</b> <span>Django, React, Ruby, Ruby on Rails</span></p><p>At Poll Everywhere, we are building a product that is more than just an engagement tech tool. We are passionate about making a product that makes an impact. So how do we create a product that gives people the tools they need to be heard in situations where they otherwise would have not? By forming engineering teams that are centered around development and collaboration that dive into new technologies or build out highly scalable features for our enterprise customers. Whether it&#39;s leading a team project or refining a user interface to help users get their work done faster, we&#39;ll help find the right team for you. At Poll Everywhere, we are serious about helping our engineers meet their career goals and strive to create learning opportunities for those who are proactive.</p>
<p>Poll Everywhere is a 60+ person growing B2B SaaS company on a mission to make presentations more inclusive. Transforming presentations into two-way conversations, our platform enables presenters to create interactive questions, words clouds, discussions, and competitions that their audience can respond to using any device. Founded in 2008, we now support millions of users worldwide from educational institutions to household companies such as Google, AT&amp;T, and Target.</p>
<p>We&#39;re looking for an ambitious developer with at least 2+ years of web application experience. As a Full Stack Engineer, you will work on and potentially lead projects to enhance and support customer-facing features. You will write code that is easy to read, understand, and maintain using many different technologies. Our <a href="https://stackshare.io/poll-everywhere/poll-everywhere">core tech stack</a> includes Ruby on Rails, MySQL, ES6, Redux, Sass, and Lit Element for WebComponents. Poll Everywhere has a great track record of being a place to enhance and deepen your technical skills.</p>

<ul>
<li>Build fast, reliable, real-time web-based applications.</li>
<li>Build reusable Web Components that provide a consistent user experience across our wide offering of interfaces.</li>
<li>Write and maintain internal APIs that connect our main Ruby on Rails application with our single-page apps and other front end code.</li>
<li>Participate in many aspects of delivering a project (architecture, planning, communication, documentation, metrics, and execution)</li>
<li>Write maintainable tests while you code, avoiding both false positives and false negatives. TDD and BDD are welcome here!</li>
<li>Own and deliver on more than one objective at a time by completing your project&#39;s feature work while contributing to the team through code reviews and ongoing maintenance.</li>
<li>Collaborate and work with Product Managers and Technical Project Leads (engineers) to understand your tasks and responsibilities.</li>
<li>Work with a coach who&#39;s invested in finding the right opportunities for your growth.</li>
</ul>

<ul>
<li>2-4 years of web application development professional working experience</li>
<li>2-4 years of server-side web frameworks (Ruby on Rails, Phoenix, Django, Express)</li>
<li>2+ years building web components with a modern framework such as Lit/Polymer, React, Vue.js.</li>
<li>1+ year working with a Flux-based state management library such as Redux, Vuex, Mobx.</li>
<li>1+ years experience with MySQL or a similar relational database.</li>
<li>Awareness of secure coding practices and the importance of incorporating these practices in your work.</li>
</ul>

<ul>
<li>Electron</li>
<li>Experience designing optimized database schemas</li>
<li>B.S. or B.A. in Computer Science or Software Engineering</li>
<li>Experience building Microsoft Office plugins (especially PowerPoint)</li>
<li>WebSockets and time-sensitive workloads</li>
<li>Experience optimizing page rendering times using a tool such as Lighthouse</li>
<li>Have an eye for design and passion for improving user experience</li>
</ul>

<ul>
<li>$150/month internet &amp; personal cell phone reimbursement</li>
<li>Monthly coffee and or tea subscription</li>
<li>$1,000 + 2 days of PTO annual self-development budget</li>
<li>$500 work from home stipend to help you set up your remote work life for success</li>
<li>Once we are able to safely reunite as an entire company, we will resume our biannual company retreats and quarterly visits for remote employees.</li>
</ul>
<p>Our users come from all kinds of communities, and so do PollEvians. We want to work with great people from a wide variety of backgrounds who put a lot of care and pride into their work. We&#39;re committed to providing you with opportunities to learn, and we’re looking to hire people with good judgment.</p>
<p>If you don’t meet 100% of the above qualifications or check off all the boxes, you should still seriously consider applying. An important part of our interview process is understanding why this position and our mission particularly resonated with you.</p>
<p><span>Technology</span></p><p><a href="https://stackshare.io/poll-everywhere">https://stackshare.io/poll-everywhere</a></p>
</div></div><div><h2>Other jobs at Poll Everywhere</h2></div></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 17:01:12 +0000</pubDate>
      <source>https://www.workatastartup.com/jobs/45671</source>
    </item>
    <item>
      <title>The death of the ‘Millionaire Next Door’ dream</title>
      <link>https://www.latimes.com/business/hiltzik/la-fi-mh-the-death-of-the-millionaire-next-door-dream-20150310-column.html</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div>
                                                <div><div data-subscriber-content=""><p>The idea that the average guy can become rich via hard work and rigorously virtuous thrift is one of the compelling myths of the American experience.</p><p>But for the most part, myth it is. Two recent events are both driving it forward and exposing its basic phoniness. The first is the death last week of Thomas J. Stanley, coauthor of the bestselling book “The Millionaire Next Door,” in a car accident. The other is the death of one Ronald Read, a Vermont retiree who appeared to be one of Stanley’s emblematic secret blue-collar millionaires -- after a lifetime of low-wage menial work and frugal living, he was discovered to have amassed a fortune worth about $8 million.</p><p>Let’s take them in turn.</p><p>Stanley’s 1996 book, co-written with William D. Danko, defined the “prototypical” American millionaire not as an ostentatious Gatsby or Trump but as the proprietor of a “dull-normal” small business -- “welding contractors, auctioneers, rice farmers, owners of mobile-home parks, pest controllers, coin and stamp dealers, and paving contractors.” His (mostly) or her median income was $131,000, and median net worth $1.6 million.</p>
<p>“We wear inexpensive suits and drive American made cars,” the book said in the voice of its putative heroes. “Only a minority of us drive the current-model-year automobile.”</p><p>But <a href="https://www.thebaffler.com/blog/millionaire-next-door/" target="_blank">as Helaine Olen points out</a> in the most clear-eyed valedictory to the late Stanley, his book “was already describing a vanishing world when it was published.” Fewer young people starting their careers today have had even the middle-class upbringing or family resources of so many of Stanley’s quiet millionaires.</p><p>That makes a big difference, because it’s rarely appreciated that many small businesses start with family investments. Remember Mitt Romney? As a presidential candidate, <a href="https://thinkprogress.org/election/2012/04/27/473096/romney-borrow-money-parents/" target="_blank">his advice to young students</a> was: “Take a shot, go for it, take a risk, get the education, borrow money if you have to from your parents, start a business.” But what if your parents don’t have any money?</p><p>Olen reminds us that the Stanley millionaire model was a bit fraudulent from the start. Economist Nassim Nicholas Taleb noticed, in his own book, “Fooled by Randomness,” that the picture painted by “The Millionaire Next Door” was the product of survivor bias -- “the authors made no attempt to correct their statistics with the fact that they saw only the winners,” he wrote. What of the millions of investors who invested in the wrong things or whose paving companies failed? They outnumber the winners by a large margin.</p>
<p>Taleb also observed that the book reflected “an unusual episode in history” when the return on assets was astronomical in historical terms. It arrived when that episode was playing out. Only three years after its publication came the dot-com crash; less than a decade later came the 2008 crash and a grinding recession that consigned lots of formerly million-dollar small businesses to oblivion.</p><p>That brings us to Ronald Read, who died in June at the age of 92 in Brattleboro, Vt., and was soon discovered to own a safe deposit box stuffed with stock certificates and other investments totaling $8 million. The news broke last month, after it was learned that <a href="https://www.reformer.com/news/ci_27453003/local-man-leaves-millions" target="_blank">he had bequeathed millions</a> to his local library and hospital.</p><p>There’s no doubt that Read’s accumulation of wealth from a lifetime of work as a service station hand and later an employee of his local JCPenney was an exceptional achievement. On CNBC, a <a href="https://www.cnbc.com/id/102410730" target="_blank">panel of investment types</a> praised his “strategy,” which appeared to consist of buying dividend-yielding blue chips, leaving them alone and spending little on himself. </p><p>But it’s hard to know what life lessons one should draw from Read’s experience. In part that’s because his life story already has been subjected to a certain amount of caricature. He was frugal but not the isolated loner who never spent a dime, as he’s sometimes depicted. </p>
<p>Read’s one marriage, at 38, brought him two teenage stepchildren, who he moved into a Brattleboro home he bought for about $12,000 (in the early 1960s) and supported through college. “He was a super good stepdad,” his stepson, Phillip Brown, 70, told me this week. He “never really took a vacation,” Brown says, and remained healthy well into his 80s.</p><p>One of CNBC’s analysts suggested that Read’s success could be replicated by merely investing $300 a month and letting it ride for 65 years; at an 8% compounded investment yield, that sum would grow to $8 million. That seems doable on the surface, but could it be done by a low-income laborer starting today? It’s extremely doubtful.</p><p>For one thing, as the investment website <a href="https://www.philosophicaleconomics.com/2015/02/janitor/" target="_blank">Philosophical Economics rightly observes</a>, that $300-a-month investment estimate ignores inflation. “Sixty-five years ago, $300 per month was a very large amount of money.... No janitor on earth would have been able to afford it.” </p><p>The website calculates that the required investment was $524 a month in 2015 dollars. That would have been a real challenge for someone in Read’s economic position, so he deserves major props for achieving it through what seems to be genuine discipline in his lifestyle and investment practice.</p>
<p>But the real secret to his success was catching the asset wave that Taleb mentioned. In other words: luck. The period in which he invested started with extreme undervaluations in the equity market. BusinessWeek’s famous (or infamous) <a href="https://www.bloomberg.com/bw/stories/1979-08-13/the-death-of-equitiesbusinessweek-business-news-stock-market-and-financial-advice" target="_blank">“Death of Equities” cover story</a> ran in August 1979. Since then equities have been on a long-term tear; $100 invested at the start of that period would be worth $2,000 today.</p><p>But these trend lines occur less than once per lifetime, and ‘70s-vintage rock-bottom valuations, which were themselves the product of a high inflation and interest rate environment, aren’t in place today, when inflation and rates are near historic lows. </p><p>Read’s frugality assisted his portfolio in another way. Since he apparently felt no need for the money, he didn’t have to draw it down at various low points -- say in March 2009, after it had lost nearly 60% of its value at year-end 2007. And by not selling, he didn’t incur capital gains taxes, which were extinguished upon his death. </p><p>To sum up, we should admire Read for living in a style that suited him and that would eventually benefit at least two deserving nonprofit institutions in his community. But it’s one thing to admire that lifestyle, another to aspire to it. </p>
<p>“The Millionaire Next Door” elevated self-abnegation to an investment rule -- what Thomas Frank, another critic of their book, termed the authors’ “militantly Calvinist attitude toward consumption” in which “saving and investing are ends in themselves, evidence of moral virtue, while spending is empty dissipation.” Olen, among others, mentions the neat irony that Stanley met his end while driving a Corvette, not normally a symbol of asceticism. </p><p>Sometimes spending isn’t a choice, either. If Read suffered from poor health during his working years or required long-term care, his estate would be a fraction of what it was. </p><p>For the rest of us, saving and investing is an act of deferred gratification -- by waiting, we have more to spend on goods and services that please us. “I see no special heroism in accumulating money,” Taleb wrote, “particularly if, in addition, the person is foolish enough to not even try to derive any tangible benefit from the wealth.... I certainly do not see the point of becoming [a millionaire] if I were to adopt Spartan (even miserly) habits and live in my starter house.”</p><p><b>Keep up to date with the Economy Hub. Follow <a href="https://twitter.com/hiltzikm" target="_blank">@hiltzikm</a> on Twitter, see our <a href="https://www.facebook.com/hiltzik" target="_blank">Facebook page</a>, or email <a href="mailto:michael.hiltzik@latimes.com" target="_blank">mhiltzik@latimes.com</a>.</b></p>
</div></div>
                                            </div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 10:40:12 +0000</pubDate>
      <source>https://www.latimes.com/business/hiltzik/la-fi-mh-the-death-of-the-millionaire-next-door-dream-20150310-column.html</source>
    </item>
    <item>
      <title>Plants, Heavy Metals, and the Lingering Scars of World War I</title>
      <link>https://www.atlasobscura.com/articles/zone-rouge-plant-growth</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div>
<section id="article-body">

<p><span>In 1919, all along the </span>Western Front, French authorities were taking stock of the devastation of World War I. From the border with Belgium at Lille to the border with Switzerland near Strasbourg, this most brutal of wars had torn a rupture through the land: It was ripped, cratered, pitted, charred by a billion artillery shells fired over four years. “Where there are no dead,” wrote Henri Barbusse, “the earth itself is corpselike.” A Frankenstein landscape, stitched and stapled together, which harbored in its flesh millions of tons of unexploded munitions and chemical weapons enough to kill an army, all over again.</p>
<p>Economically hobbled by war, and awed by the scale of the problem facing them, the French authorities developed a triage system: They surveyed the <em>régions dévastées</em> and drew up a series of maps that charted areas believed to be devastated beyond repair. In total, more than 460 square miles were classified in this way, shaded with a red pencil and declared no‑go areas. Though over the following decades, this total was much reduced, but near Verdun, where the land was choppier, steeper, more remote, and the damage total—a “biological desert,” as the French botanist Georges H. Parent described it—much remains off-limits.</p>
<figure><figcaption>French infantry, Fort Vaux, Verdun, June 1916. <span>Underwood Archives/Getty Images</span></figcaption></figure>
<p>After a period of uncertainty, it was decided to plant a shroud of trees over the war zone—a living sarcophagus that might stabilize the soil and contain the terrors within for a generation or more. A forest of forgetfulness. Where the land was worst affected—soil stripped almost to the bedrock—they planted black pines, one of the only hardy species that could thrive there. So it remains today. They call it the Zone Rouge.</p>
<p>For a hundred years a forest grew up across the land, tall and dark and impenetrable, whose undergrowth curled and snarled into a thicket of bramble and blackthorn. In the Zone Rouge, however, there is a place where the trees never grew back: a clearing in the woods, where the oaks and hornbeams part to reveal a small round pool of what appears to be gray gravel, or tar, or ash. A swatch of ground where nothing will grow.</p>
<p>The secret to this sterile wound lies also in the decisions made after the war. At armistice, millions of unused shells lay piled up, ready to be fired. It wasn’t clear what should be done with these surplus weapons of mass destruction. At Verdun, the decision was made to recover what ammunition they could at the military camps, but to gather chemical weapons—200,000 of them—at a farm near Gremilly. Here was mustered an array of the most unpleasant hexes one man can cast upon another: mustard gas, tear gas, phosgene—whose pleasant odor of freshly mown hay belies its deadly consequences—the sneezing gas diphenyl-chloroarsine, the garlic‑scented vomiting agent diphenylcyano-arsine. Then, finally, in 1928, they dug trenches as if for a mass grave, piled in the canisters, and set them ablaze. Hence the name: la Place à Gaz, the Place of Gas.</p>
<p>The clouds of arsine gases produced during the burn poisoned the land and left it bare. It appears like tundra, or melted tarmac: waste ground of the very purest kind.</p>
<figure><figcaption>La Place à Gaz, Spincourt Forest, France, 2014. <span>Courtesy © BRGM – Daniel Hube </span></figcaption></figure>
<hr/>
<p><span>Many of the so-called heavy </span>metals—in this case used as kind of a catch-all term for cobalt, copper, iron, nickel, zinc, and others—are essential to the fundamental processes of life, but in quantity they become toxic. When plants come into contact with metal‑tainted soil, strange things can happen.</p>
<p>In the 1950s, the Russian naturalist N. G. Nesvetaylova discovered that it was possible to turn poppies different colors by the adding of various metal salts to compost: Zinc compounds produced flowers of lemon yellow, for example, whereas boron turned their leaves dark green. Copper, on the other hand, produced pale, blueish, “dove‑colored” leaves. (In this way a gardener with fairy godmother aspirations might sprinkle manganese on the soil beneath an almond tree to turn their flowers’ corollae from white to pink; aluminum sulfate over the roots of a hydrangea will turn its cotton-candy heads mauve, then indigo, then baby blue.) And there was a combinatory, witches’ brew aspect to the process: Two or more salts added together, like a tincture, and the flowers would take on unexpected new shades, wholly different from those seen when the metals were added separately.</p>
<p>Large-mouth poppies (<em>Papaver macrostomum</em>), common to the Middle East and Kashmir, develop double‑decker petals when growing in high-zinc soils, while the ladybird poppy (<em>P. commutatum</em>) of the Caucasus alter the pattern of their spots in response to copper-molybdenum. In the areas of greatest mineralization, their dark spots elongate until they meet at the center to form a cross—X marks the spot—a signpost to the contents of the underworld.</p>
<figure><figcaption>Caucasian scarlet poppy of ladybird poppy (<em>Papaver commutatum</em>) growing on waste ground in Greece. <span>FlowerPhotos/Universal Images Group via Getty Images</span></figcaption></figure>
<p>Plants growing in the vicinity of manganese might boom obscenely in size, reaching gigantic proportions with luxuriant greenery. Copper sulfate or chromite will produce dwarfs. Symptoms such as these have been used successfully by prospectors across the globe for centuries as “bioindicators” of minerals in the soil below. As explorers once scanned their environment for willow or cottonwood to find water in the desert, prospectors raked the landscape for plants displaying chlorosis, the floral equivalent of anemia, which shows up as a bleaching or fading of the leaves, except along their darker veins, which stand in dramatic silhouette.</p>
<p>Better yet, they might spot plants whose presence alone signaled valuable metals. Early Scandinavian miners, for example, were guided to their target by the <em>kobberblomst</em> (copper flower) and the <em>kisplante</em> (pyrite plant, or <em>Lychnis alpine</em>), tiny pink‑flowering campion whose delicacy belies an extreme hardiness, an ability to thrive where sometimes no other species can.</p>
<p>By the sixth century, the Imperial Chinese were already sensitive to the potential of metal‑loving plants as a means of prospecting, producing detailed manuals listing different species and their mineral familiars, and the symptomatology associated with specific metals, their instructions sounding with the prosody of incantation, of summoning spells. (“If leaves … are green, and the stalks red, much lead will be found below …”)</p>
<figure><figcaption>Nodding thread moss (<em>Pohlia nutans</em>). <span> Marina Andriichuk/Alamy</span></figcaption></figure>
<p>In such way, the expert geobotanist can glean a great deal of complex information from flora. In the Copperbelt Province of Zambia, for example, at least 27 flowers live almost exclusively in soils tainted with copper and cobalt: the thicker the pelt of these flowers, the greater the degree of mineralization. Similarly, in the Alps one might learn to predict the presence and concentration of zinc by the depth of color of the flowers of the tiny, lemon-yellow calamine violet. In Australia, two plants—a type of flowering pea (<em>Tephrosia</em>) and the paper-petaled herb <em>Polycarpaea spirostylis</em>—come together to form a map with contours: the <em>Tephrosia </em>tracing the outer edges of copper deposits, but giving way to the flag-waving <em>Polycarpaea</em> wherever the copper reaches more than 2,000 parts per million.</p>
<p>Some regions are so profoundly impacted by the presence of concentrated metal ores that even these rare “metallophytes” cannot get by. Such areas, denuded of vegetation, might appear as a sickly pasture that pockmarks otherwise lush, forested areas. Platinum has been found under bald spots in the Urals and South Africa; in Russia, boron. Folk stories spring up around such oddities: One such spot in North Carolina is known as the <a href="https://www.atlasobscura.com/places/devils-stomping-ground">“devil’s trampin ground,”</a> the source of its barrenness yet to be determined, and may predate human presence in the region. But for heavy metal contamination to be so extreme as to render a place barren dirt is rare.</p>
<p>La Place à Gaz is such a place.</p>
<figure><figcaption>La Place à Gaz, Spincourt Forest, France, 2014. <span>Courtesy © BRGM – Daniel Hube </span></figcaption></figure>
<hr/>
<p><span>Those plants that grow as </span>a wan halo around the poison ashes of la Place à Gaz: It was those I was here to see. On first sight, they seemed disarmingly familiar: the haze of what is called tufted grass and the Americans call “velvet” grass for its peach-fuzz leaves—common to marshland, verges, neglected waste ground—and, hidden beneath, like an underfur, the powdered goblet lichen <em>Cladonia fimbriata</em>. Neither are exotic species. But plants like these are specially adapted to survive in what would be otherwise be a dangerous environment. They limit their intake of the metals, preventing a build‑up to toxic levels in their bodies.</p>
<p>Their neighbor, though, a soft and feathery moss known as <em>Pohlia nutans</em> (“nodding thread moss,” after their tiny, many-headed fronds), uses a more complex strategy: Rather than close itself off to the metals in the soil, it throws open the doors, transporting metal salts upward into its limbs and stashing them away. Magpie plants of this kind are known as “hyperaccumulators,” and it’s not totally understood why they do this. It may be a form of self‑ defense: making themselves bitter herbs, to deter grazing animals. The effect, though, can be extraordinary. For example: The <em>Pycnandra acuminata</em> is a silver sylph of a tree that grows in the misty rainforests of New Caledonia. When cut with a knife, it bleeds a spectacular latex sap the color of verdigris, containing up to 26 percent nickel. In postindustrial mining regions of Wales, lichens soak up iron or copper from the rocks they grow on, turning rust-orange or turquoise in the process—the spattered paint of an artists’ studio—and rendering the metals insoluble, and therefore harmless.</p>
<p>Though metallophyte species like these have evolved naturally, finding toeholds in outcrops of metal ores and at sites like the Tantramar “copper swamp” of Canada’s New Brunswick, they are now much more likely to be found in human-impacted ones. Mine tailings, spoil heaps, slag tips, postindustrial sites of many kinds—and postconflict ones too, like la Place à Gaz. There has been an exponential growth in land despoiled by heavy metals over recent decades. Globally, more than five million such contaminated sites have been reported; more than 300,000 square miles of contaminated soil in China alone.</p>
<figure><figcaption>Powdered goblet lichen (<em>Cladonia fimbriata</em>). <span>Arterra/Universal Images Group via Getty Images</span></figcaption></figure>
<p>Knowledge and appreciation of such plants has grown in recent years, but their love of despoiled landscapes gives conservationists pause when it comes to protecting rare and unusual species. Near Swansea, in southern Wales, I once visited the former site of “Copperopolis”—an enormous complex of smelting furnaces built during the 17th and 18th centuries, which left the Lower Swansea valley a lunar landscape besmirched with lead, chromium, and copper in the years after the industry’s collapse. This scrappy wasteland, however, had recently been designated a Site of Special Scientific Interest thanks to its unusual assemblage of metallophyte plants and lichens—known as “calaminarian grassland” after the zinc ore—and brought under new environmental protections. Disturbance, though, turned out to have been very good for the area; despite the best of intentions, an early “remediation scheme,” which removed or capped metal-polluted soil, had reduced the habitat of rare plants such as the star-flowered spring sandwort, and conservationists were now considering radical, counterintuitive management methods—such as scraping up the topsoil to retoxify the ground.</p>
<p>Because of their strange and beguiling qualities, metal hyperaccumulators—of which there are known to be around 500—are of enormous scientific interest. Thanks to their thirst for otherwise toxic materials, they have great potential as tools in the recovery of highly polluted sites. By sucking heavy metals from the earth and hoarding or redistributing them, they might prepare the ground for other, more sensitive organisms. In this way, nature begins to heal over her scars.</p>
<figure><figcaption>An unexploded shell in the Zone Rouge. <span> ian alderman/Alamy</span></figcaption></figure>
<p>A field of study, phytoremediation, has grown up around hyperaccumulating plants. It seeks to harness their surreal kind of superpowers for the greater good. Other species include the brake fern, which removes arsenic from the soil and stores it in its fronds (and is being tested as a natural filter for contaminated water in Bangladesh, following a decades-long arsenic-poisoning crisis), and sunflowers, which accumulate a wide range of heavy metals and are grown on sites of former mines and smelters in Australia. It’s a slow process; the plants must grow and then be harvested—and their bodies, now containing high concentrations of the heavy metals, disposed of carefully—but it can be faster and certainly less environmentally damaging than current clean-up methods: excavation and reburial under a concrete cap.</p>
<p>Already I could see this process at work. In la Place à Gaz, the bare surface of chemical ash had clearly declined since a 2007 study by German scientists, and perhaps even since a French follow-up paper in 2016, which noted with relief “progressive revegetation of the site.” Whatever these plants were doing—and particularly the nodding thread moss—was slowly turning the chemical burn in the landscape into a habitable place to grow.</p>
</section>



</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 08:48:38 +0000</pubDate>
      <source>https://www.atlasobscura.com/articles/zone-rouge-plant-growth</source>
    </item>
    <item>
      <title>What to Do If You Think That You’ve Found a Meteorite</title>
      <link>https://geoscience.unlv.edu/what-to-do-if-you-think-that-youve-found-a-meteorite/</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div id="container_area">
            <div>
                <div id="container_right">
                    
<h3>Do you think you found a meteorite? Here are the different steps to take:</h3>
<ul>
<li><strong><em>Check the statistics about meteorite finds:</em> </strong>The chances that you found a meteorite are extremely low. The chances that you found a meteorite from Mars or the Moon are even smaller “Less that 1800 meteorites have been <a href="http://meteorites.wustl.edu/numbers_by_state.htm">found in the United States</a> in the past 200 years. Less than 1 in 1000 of all known meteorites are from the Moon, and the number is about the same for Mars. No lunar meteorite has yet to be found in the temperate environment of North America or Europe; all were found in deserts of drier continents.” Please check the statistics described by Randy Korotev <a href="http://meteorites.wustl.edu/meteorite_types.htm">here.<br/>
</a></li>
<li><strong><em>Check the self-test check-list</em></strong> that Randy Korotev from WashU has created <a href="http://meteorites.wustl.edu/realities.htm">here</a> and follow this chart (from adaptation of flowchart devised by <a href="http://www.lpi.usra.edu/meetings/metsoc2010/pdf/5357.pdf" target="_blank">Deborah <span>Guedes</span></a> and colleagues in Brazil) to determine if you are in possession of a meteorite or not:</li>
</ul>
<p></p>
<ul>
<li>Most people in Nevada find <strong>slag</strong>, which can be easily mistaken for a meteorite. <em>Slag</em> usually refers to a glassy by-product of smelting ore to retrieve the metal. <a href="http://meteorites.wustl.edu/id/slag.htm">Here</a> are several pictures of slag.
<p></p></li>
<li><strong>Find here pictures of </strong><strong><strong><strong><a href="http://meteorites.wustl.edu/meteorwrongs/">meteorwrongs<br/>
</a></strong></strong></strong></li>
<li>Check the Facebook page of Mendy Ouzillou: <a href="https://www.facebook.com/groups/1387282344922047">Meteorite or Meteorwrong. </a>This group is dedicated to helping people identifying whether they have a meteorite or terrestrial stone often called a meteorwrong by the meteorite community.</li>
</ul>
<p>If, after checking the different lists, flowcharts, and pictures, you are still convinced that the rock you found is a meteorite, please send me an email <span>with pictures</span>.<span> <strong>Please do not come to my office without contacting me prior. </strong>In addition, Please note that any unsolicited specimen sent to UNLV or our department<strong> will not be returned. UNLV does not accept any liability for unsolicited samples.<br/>
</strong></span></p>



                    
                    
                    
                    
                    
                                    </div>

                	
	
                
            </div>
        </div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 16:22:02 +0000</pubDate>
      <source>https://geoscience.unlv.edu/what-to-do-if-you-think-that-youve-found-a-meteorite/</source>
    </item>
    <item>
      <title>I sent over 10k personal thank you videos to my customers</title>
      <link>https://www.marshallhaas.com/post/how-i-sent-over-10-000-personal-thank-you-videos-to-my-customers-in-2-months</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><p>Every business owner wishes they could clone themselves. In this article I’ll show you <strong>how I actually cloned myself to send 10,000 personalized thank you videos</strong> to each customer over the course of 2 months.<br/></p><p>To be clear, when I say personalized video, I mean a video of me, on camera, thanking each customer by name. I sent out 10,000 of these videos to our customers after they ordered from my mobile accessory brand called <a href="http://buypeel.com">Peel</a>. We&#39;re an e-commerce brand, so each video was sent after someone purchased from the website.<br/></p><p><strong>Here’s a video of what I mean</strong></p><p><iframe title="vimeo-player" src="https://player.vimeo.com/video/580111254" width="640" height="360" frameborder="0" allowfullscreen=""></iframe></p><p>‍</p><p>Pretty cool right?<br/></p><h2><strong>Response From Customers</strong></h2><p>Over the last couple months, we received A TON of replies. Here’s a bunch of them!</p><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><figure><p></p></figure><p>‍<br/></p><p>Needless to say, people loved the personalized video!<br/></p><h2><strong>How I Did It</strong></h2><p>You’re probably wondering, how the heck did he do that 10,000 times in 60 days. If you do the math, that’s an average of 166+ videos per day working 7 days a week. <br/></p><p>There isn’t enough time in the day to make that many videos. <br/></p><p>Well, It’s time to come clean…. <br/></p><p><strong>I did this with a new startup I’ve partnered with called </strong><a href="http://windsor.io"><strong>Windsor.io</strong></a><strong>.<br/></strong></p><p>I recorded that video once, and then using artificial intelligence, we trained a computer to say each person’s name using my face and voice. The result is the ability for me to effectively record once, and then clone myself for each video. </p><p>I’ll let Pranay Prakash, co-founder of Windsor explain more of how this all works:<br/></p><p>Enter Pranay –<br/></p><p><em>By recording less than an hour’s worth of video from Marshall, we were able to create a model that accurately recreates his face and voice as he speaks. Once we had the model, Marshall recorded the perfect video he wanted to send to a customer - but, instead of saying any real names, he said something similar to “Hey {first name}”. <br/></em></p><p><em>Using an integration with his Shopify store, we were able to automatically create a video minutes after a new purchase - just from the name someone used on the order. A few hours later, the personalized video is delivered to their inbox without Marshall so much as lifting a finger.<br/></em></p><p><em>If this reminds you of how businesses send personalized emails at scale, you’ve got the right idea. With the amount of emails people receive, it’s hard to stand out as a business. A genuine email gets lost amongst endless promotions and marketing. We’ve seen businesses before personally record and send out videos to every customer. People raved about them.. However, as a business grows this becomes impossible to scale and that’s where we step in. We help businesses maintain this personal connection at scale.<br/></em></p><p>Back to Marshall.<br/></p><h2><strong>Ethics</strong></h2><p>I want to address the ethics of this head on.<br/></p><p>My excitement for this technology and Windsor as a startup can be summed up in 2 points:</p><ol role="list"><li>Personalization is a good thing – Windsor allows you to personalize and scale experiences for your customers. </li><li>This is <strong>the</strong> business use case of the Deep Fake technology. </li></ol><p>The technology of Deep Fake videos has been around for a little while, but most people have only seen it used in nefarious ways like faking a President saying absurd things that they didn’t really say, or creating obscene images of people as blackmail or profit. I think Windsor can change that and create the first business use-case of Deep Fake technology to be used for good. </p><p>In Pranay’s words - “We’re at a point in history where deep-fake technology has most people scared. This is with good reason - the possibilities with deep-fakes are quite scary. That said, we’ve been here before. Whenever the world was introduced to new technology, people with malicious intent were quick at figuring out how they can use it to serve themselves. By bringing this tech to businesses like Peel, who have a track record of doing what’s good for their customers, we’re opening up new possibilities. Along the way, we hope to educate people not only that deep-fakes exist, but that we can actually use them more productively”.<br/></p><p><strong><em>But, is this genuine? <br/></em></strong></p><p>I want my customers to know who’s behind our brand, see my face, know I’m proud of what we are selling, have a great experience, and ultimately invite them to reach out to our team for help if they have questions. <br/></p><p>That is all truly genuine and exactly what I wanted expressed in the videos we sent out. The only difference is I was able to scale that experience for customers by using this technology. I think that’s a win-win. </p><p><strong>If I was a retail store owner greeting customers at the entrance and someone came to me and offered to place a clone to do the same job, so I could be productive in the back, would I take that offer? Yes.<br/></strong></p><p>Windsor’s team has an interesting stance on this technology. The technology exists already - they didn’t create it, they adapted what’s already possible to solve a real business problem: personalization. Since it exists, there’s no putting the genie back in the bottle. The best thing we can do now is to use this for good and not evil. They want to normalize the fact that anyone can create Deep Fakes, and raise awareness on this technology. You should be aware of what’s possible and not believe everything you read see on the internet. They also plan to develop technology which helps detect deep fakes.</p><h2>Stats</h2><p>June 1 to July 31</p><ul role="list"><li>68% open rate on videos sent</li><li>86% views watched to completion</li><li>&gt; 1 view per recipient on average </li></ul><p>While preliminary, the most interesting stat from this experiment is...</p><p>During our 60 day experiment, inside that window of time we had a split of customers that received a video, and those that didn&#39;t. </p><ul role="list"><li>Of those that <strong>didn&#39;t receive</strong> a personalized video from me, only <strong>3.75% purchased from us again</strong> in those 60 days.</li><li>Of those that <strong>received</strong> a personalized video from me, <strong>7.02% purchased from us again</strong> in those 60 days.</li></ul><blockquote>That means... customers were 87% more likely to buy from us again when they received the personalized video from me.</blockquote><p>I will be very interested to see how this stat changes over time. This blew my mind 🤯<br/></p><h2><strong>How To Do Something Like This </strong></h2><p>The team at Windsor is slowly rolling this out to more companies interested in adding video to their brand without the time commitment. Learn more at <a href="http://windsor.io">Windsor.io</a> or you can reach them at <a href="mailto:team@windsor.io">team@windsor.io</a></p></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 17:57:56 +0000</pubDate>
      <source>https://www.marshallhaas.com/post/how-i-sent-over-10-000-personal-thank-you-videos-to-my-customers-in-2-months</source>
    </item>
    <item>
      <title>1Password 8 will be subscription only and won’t support local vaults</title>
      <link>https://1password.community/discussion/comment/601917/#Comment_601917</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___1password_community_discussion_comment_601917_#Comment_601917/image.jpg" /> 
<div id="readability-page-1" class="page"><div id="Discussion_121554">
<div>

<div>
<div>
<div>
<p>Hello AgileBits.</p>
<p>I would like to congratulate the team on the release today. As anticipated and appreciated it is very much the same as the Linux app. Having a variety of elements work differently based on operating system has long been a bane for 1Password users.</p>
<p>Aside from that I have criticism to offer which I hope you are open to. I wrote <a rel="nofollow" href="https://1password.community/discussion/comment/582622/#Comment_582622">this</a> in December 2020</p>
<blockquote><p>The writing has been on the wall for years. AgileBits no longer has interest in standalone vaults, licenses, iCloud, Dropbox, or anything other than memberships.</p></blockquote>
<p>Another six months has passed. AgileBits continues to erode licenses and standalone vaults as evidenced with today&#39;s beta for Windows. Yet there has been no announcement or public statement to this effect from the company, other than the coy &#34;membership is the way forward&#34; comments we see touted around this board. I would like to see AgileBits make a clear and concise statement that anything other than 1Password.com is effectively &#34;dead and gone&#34;.</p>
<p>I am not unhappy with the direction the company is taking. My only wish is for clarity so that informed decisions can be made. Much frustration that I see as I browse these forums could be avoided if only the company were to be sincere in this regard. I am excited for you to launch this same app on macOS and mobile. As someone who uses a wide variety of devices in my work it will be such a relief to have the same 1Password experience wherever I end up.</p>
<p>Cheers.</p>
<p><a rel="nofollow" href="https://1password.community/discussion/comment/601917/#Comment_601917"></a></p>
</div>
 </div>
</div>
</div>
</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 17:47:49 +0000</pubDate>
      <source>https://1password.community/discussion/comment/601917/#Comment_601917</source>
    </item>
    <item>
      <title>Kind: A Modern Proof Language</title>
      <link>https://github.com/uwu-tech/kind</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div data-target="readme-toc.content">
          <article itemprop="text">
<p>A minimal, efficient and practical proof and programming language. Under the hoods, it is basically Haskell, except purer and with dependent types. That means it can handle mathematical theorems just like Coq, Idris, Lean and Agda. On the surface, it aims to be more practical and looks more like TypeScript. Compared to other proof assistants, Kind has:</p>
<ol>
<li>
<p>The smallest core. Check <a href="https://github.com/moonad/FormCoreJS/blob/master/FormCore.js">FormCore.js</a> or <a href="https://github.com/uwu-tech/Kind/blob/master/base/Kind/Core.kind">Core.kind</a>. Both are <code>&lt; 1000-LOC</code> complete implementations!</p>
</li>
<li>
<p>Novel type-level features. Check <a href="https://github.com/uwu-tech/Kind/blob/master/blog/1-beyond-inductive-datatypes.md">this article</a> on super-inductive datatypes.</p>
</li>
<li>
<p>An accessible syntax that makes it less scary. Check <a href="https://github.com/uwu-tech/Kind/blob/master/SYNTAX.md">SYNTAX.md</a>.</p>
</li>
<li>
<p>A complete bootstrap: the language is implemented in itself. Check it <a href="https://github.com/uwu-tech/Kind/tree/master/base/Kind">here</a>.</p>
</li>
<li>
<p>Efficient real-world compilers. Check <a href="http://uwu.tech" rel="nofollow">http://uwu.tech/</a> for a list of apps. (WIP)</p>
</li>
</ol>
<h2><a id="user-content-usage" aria-hidden="true" href="#usage"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Usage</h2>
<p><a target="_blank" rel="noopener noreferrer" href="https://camo.githubusercontent.com/433259f5afbee51bef67116aff867390e273626cd2b96334b32fe372452b8934/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6b696e642d6c616e67"></a>  <a href="https://t.me/formality_lang" rel="nofollow"></a></p>
<ol start="0">
<li>
<p>Choose a release. We&#39;ll use JavaScript here but ChezScheme is also <a href="https://github.com/uwu-tech/Kind/blob/master/INSTALL.md">available</a>.</p>
</li>
<li>
<p>Install Kind using <code>npm</code>:</p>
</li>
</ol>

<ol start="2">
<li>Save the file below as <code>Main.kind</code>:</li>
</ol>
<div data-snippet-clipboard-copy-content="Main: IO(Unit)
  IO {
    IO.print(&#34;Hello, world!&#34;)
  }
"><pre><code>Main: IO(Unit)
  IO {
    IO.print(&#34;Hello, world!&#34;)
  }
</code></pre></div>
<ol start="3">
<li>Type-check it:</li>
</ol>

<ol start="4">
<li>Run it:</li>
</ol>

<ol start="5">
<li>Have fun!</li>
</ol>
<h2><a id="user-content-things-you-can-do-with-kind" aria-hidden="true" href="#things-you-can-do-with-kind"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Things you can do with Kind:</h2>
<h3><a id="user-content-compile-programs-and-modules-to-several-targets" aria-hidden="true" href="#compile-programs-and-modules-to-several-targets"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Compile programs and modules to several targets.</h3>
<p>Kind has an universal compiler that targets several back-ends. Just find what you need on Kind, and compile it with <code>kind Main --lang</code>. For example, to generate a QuickSort function in JavaScript, just type <code>kind List.quicksort --js</code>. You may never write code in any other language! Available targets: <code>--js</code>, <code>--scm</code>. Several more will be available this month.</p>
<h3><a id="user-content-create-live-applications" aria-hidden="true" href="#create-live-applications"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Create live applications.</h3>
<p>Kind has an interconnected back-end that allows you to create rich, interactive applications without ever touching databases, TCP packets or messing with apis. Just add a file to <code>base/App</code> and it will be available on <a href="http://uwu.tech" rel="nofollow">http://uwu.tech/</a>. You can fork entire applications - not just the front-end, but all of it, back-end, database, and networking - in seconds.</p>
<h3><a id="user-content-prove-theorems" aria-hidden="true" href="#prove-theorems"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Prove theorems.</h3>
<p>No, theorems are not scary things mathematicians do. For programmers, they&#39;re more like unit tests, except they can involve symbols, allowing you to cover infinitely many test cases. If you like unit tests, you&#39;ll love theorems. To learn more, check <a href="https://github.com/uwu-tech/Kind/blob/master/THEOREMS.md">THEOREMS.md</a>. You can also compile Kind programs and proofs to a minuscle core language with the <code>--fmc</code> flag (example: <code>kind Nat.add.assoc --fmc</code>). Try it!</p>
<h3><a id="user-content-deploy-smart-contracts" aria-hidden="true" href="#deploy-smart-contracts"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Deploy Smart-Contracts.</h3>
<p>(Soon.)</p>
<h2><a id="user-content-examples" aria-hidden="true" href="#examples"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Examples</h2>
<h3><a id="user-content-some-programs" aria-hidden="true" href="#some-programs"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Some programs</h3>
<div data-snippet-clipboard-copy-content="// A &#39;Hello, world!&#34;
Main: IO(Unit)
  IO {
    IO.print(&#34;Hello, world!&#34;)
  }
"><pre><span>// A &#39;Hello, world!&#34;</span>
Main: <span>IO</span><span>(</span><span>Unit</span><span>)</span>
  <span>IO</span><span></span> <span>{</span>
    <span>IO</span><span>.</span><span>print</span><span>(</span><span>&#34;Hello, world!&#34;</span><span>)</span>
  <span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// Quicksort (using recursion)
quicksort(list: List&lt;Nat&gt;): List&lt;Nat&gt;
  case list {
    nil:
      []
    cons:
      fst = list.head
      min = filter!((x) x &lt;? list.head, list.tail)
      max = filter!((x) x &gt;=? list.head, list.tail)
      quicksort(min) ++ [fst] ++ quicksort(max)
  }
"><pre><span>// Quicksort (using recursion)</span>
<span>quicksort</span><span>(</span><span>list</span>: <span>List</span><span>&lt;</span><span>Nat</span><span>&gt;</span><span>)</span>: <span>List</span><span>&lt;</span><span>Nat</span><span>&gt;</span>
  <span>case</span> <span>list</span> <span>{</span>
    <span>nil</span>:
      <span>[</span><span>]</span>
    <span>cons</span>:
      <span>fst</span> <span>=</span> <span>list</span><span>.</span><span>head</span>
      <span>min</span> <span>=</span> <span>filter</span><span>!</span><span>(</span><span>(</span><span>x</span><span>)</span> <span>x</span> <span>&lt;</span>? <span>list</span><span>.</span><span>head</span><span>,</span> <span>list</span><span>.</span><span>tail</span><span>)</span>
      <span>max</span> <span>=</span> <span>filter</span><span>!</span><span>(</span><span>(</span><span>x</span><span>)</span> <span>x</span> <span>&gt;=</span>? <span>list</span><span>.</span><span>head</span><span>,</span> <span>list</span><span>.</span><span>tail</span><span>)</span>
      <span>quicksort</span><span>(</span><span>min</span><span>)</span> <span>++</span> <span>[</span><span>fst</span><span>]</span> <span>++</span> <span>quicksort</span><span>(</span><span>max</span><span>)</span>
  <span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// List iteration (using folds)
some_text: String
  List.foldl!!(&#34;&#34;,
    (str, result) 
      str = String.to_upper(str)
      str = String.reverse(str)
      result | str,
    [&#34;cba&#34;,&#34;fed&#34;,&#34;ihg&#34;])
"><pre><span>// List iteration (using folds)</span>
some_text: <span>String</span>
  <span>List</span><span>.</span><span>foldl</span><span></span><span>!</span><span>!</span><span>(</span><span>&#34;&#34;</span><span>,</span>
    <span>(</span><span>str</span><span>,</span> <span>result</span><span>)</span> 
      <span>str</span> <span>=</span> <span>String</span><span>.</span><span>to_upper</span><span>(</span><span>str</span><span>)</span>
      <span>str</span> <span>=</span> <span>String</span><span>.</span><span>reverse</span><span>(</span><span>str</span><span>)</span>
      <span>result</span> <span>|</span> <span>str</span><span>,</span>
    <span>[</span><span>&#34;cba&#34;</span><span>,</span><span>&#34;fed&#34;</span><span>,</span><span>&#34;ihg&#34;</span><span>]</span><span>)</span></pre></div>
<div data-snippet-clipboard-copy-content="// List iteration (using fors)
some_text: String
  result = &#34;&#34;
  for str in [&#34;cba&#34;,&#34;fed&#34;,&#34;ihg&#34;] with result:
    str = String.to_upper(str)
    str = String.reverse(str)
    result | str
  result
"><pre><span>// List iteration (using fors)</span>
some_text: <span>String</span>
  <span>result</span> <span>=</span> <span>&#34;&#34;</span>
  <span>for</span> <span>str</span> <span>in</span> <span>[</span><span>&#34;cba&#34;</span><span>,</span><span>&#34;fed&#34;</span><span>,</span><span>&#34;ihg&#34;</span><span>]</span> <span>with</span> <span>result</span>:
    <span>str</span> <span>=</span> <span>String</span><span>.</span><span>to_upper</span><span>(</span><span>str</span><span>)</span>
    <span>str</span> <span>=</span> <span>String</span><span>.</span><span>reverse</span><span>(</span><span>str</span><span>)</span>
    <span>result</span> <span>|</span> <span>str</span>
  <span>result</span></pre></div>
<div data-snippet-clipboard-copy-content="// Map, Maybe, String and Nat sugars
sugars: Nat
  key  = &#34;toe&#34;
  map  = {&#34;tic&#34;: 1, &#34;tac&#34;: 2, key: 3} // Map.from_list!([{&#34;tic&#34;,1}, ...])
  map  = map{&#34;tic&#34;} &lt;- 100            // Map.set!(&#34;tic&#34;, 100, map)
  map  = map{&#34;tac&#34;} &lt;- 200            // Map.set!(&#34;tac&#34;, 200, map)
  map  = map{ key } &lt;- 300            // Map.set!(key, 300, map)
  val0 = map{&#34;tic&#34;} &lt;&gt; 0              // Maybe.default!(Map.get!(&#34;tic&#34;,map), 0)
  val1 = map{&#34;tac&#34;} &lt;&gt; 0              // Maybe.default!(Map.get!(&#34;tac&#34;,map), 0)
  val2 = map{ key } &lt;&gt; 0              // Maybe.default!(Map.get!(key, map), 0)
  val0 + val1 + val2                  // Nat.add(val0, Nat.add(val1, val2))
"><pre><span><span>//</span> Map, Maybe, String and Nat sugars</span>
sugars: Nat
  key  = <span><span>&#34;</span>toe<span>&#34;</span></span>
  map  = {<span><span>&#34;</span>tic<span>&#34;</span></span>: <span>1</span>, <span><span>&#34;</span>tac<span>&#34;</span></span>: <span>2</span>, key: <span>3</span>} <span><span>//</span> Map.from_list!([{&#34;tic&#34;,1}, ...])</span>
  map  = map{<span><span>&#34;</span>tic<span>&#34;</span></span>} &lt;- <span>100</span>            <span><span>//</span> Map.set!(&#34;tic&#34;, 100, map)</span>
  map  = map{<span><span>&#34;</span>tac<span>&#34;</span></span>} &lt;- <span>200</span>            <span><span>//</span> Map.set!(&#34;tac&#34;, 200, map)</span>
  map  = map{ key } &lt;- <span>300</span>            <span><span>//</span> Map.set!(key, 300, map)</span>
  val0 = map{<span><span>&#34;</span>tic<span>&#34;</span></span>} &lt;&gt; <span>0</span>              <span><span>//</span> Maybe.default!(Map.get!(&#34;tic&#34;,map), 0)</span>
  val1 = map{<span><span>&#34;</span>tac<span>&#34;</span></span>} &lt;&gt; <span>0</span>              <span><span>//</span> Maybe.default!(Map.get!(&#34;tac&#34;,map), 0)</span>
  val2 = map{ key } &lt;&gt; <span>0</span>              <span><span>//</span> Maybe.default!(Map.get!(key, map), 0)</span>
  val0 + val1 + val2                  <span><span>//</span> Nat.add(val0, Nat.add(val1, val2))</span></pre></div>
<div data-snippet-clipboard-copy-content="// List monadic block: returns [{1,4},{1,5},{1,6},{2,4},...,{3,6}]
my_list: List&lt;Pair&lt;Nat,Nat&gt;&gt;
  List {
    get x = [1, 2, 3]
    get y = [4, 5, 6]
    return {x, y}
  }
"><pre><span><span>//</span> List monadic block: returns [{1,4},{1,5},{1,6},{2,4},...,{3,6}]</span>
my_list: List&lt;Pair&lt;Nat,Nat&gt;&gt;
  List {
    get x = [<span>1</span>, <span>2</span>, <span>3</span>]
    get y = [<span>4</span>, <span>5</span>, <span>6</span>]
    <span>return</span> {x, y}
  }</pre></div>
<p>Check many List algorithms on <a href="https://github.com/uwu-tech/Kind/tree/master/base/List">base/List</a>!</p>
<h3><a id="user-content-some-types" aria-hidden="true" href="#some-types"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Some types</h3>
<div data-snippet-clipboard-copy-content="// A boolean
type Bool {
  true
  false
}
"><pre><span>// A boolean</span>
<span>type</span> <span>Bool</span> <span>{</span>
  <span>true</span>
  <span>false</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// A natural number
type Nat {
  zero
  succ(pred: Nat)
}
"><pre><span>// A natural number</span>
<span>type</span> <span>Nat</span> <span>{</span>
  <span>zero</span>
  <span>succ</span><span>(</span><span>pred</span>: <span>Nat</span><span>)</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// A polymorphic list
type List &lt;A: Type&gt; {
  nil
  cons(head: A, tail: List&lt;A&gt;)
}
"><pre><span>// A polymorphic list</span>
<span>type</span> <span>List</span> <span>&lt;</span><span>A</span>: <span>Type</span><span>&gt;</span> <span>{</span>
  <span>nil</span>
  <span>cons</span><span>(</span><span>head</span>: <span>A</span><span>,</span> <span>tail</span>: <span>List</span><span>&lt;</span><span>A</span><span>&gt;</span><span>)</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// A polymorphic pair
type Pair &lt;A: Type, B: Type&gt; {
  new(fst: A, snd: B)
}
"><pre><span>// A polymorphic pair</span>
<span>type</span> <span>Pair</span> <span>&lt;</span><span>A</span>: <span>Type</span><span>,</span> <span>B</span>: <span>Type</span><span>&gt;</span> <span>{</span>
  <span>new</span><span>(</span><span>fst</span>: <span>A</span><span>,</span> <span>snd</span>: <span>B</span><span>)</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// A polymorphic dependent pair
type Sigma &lt;A: Type, B: A -&gt; Type&gt; {
  new(fst: A, snd: B(fst))
}
"><pre><span>// A polymorphic dependent pair</span>
<span>type</span> <span>Sigma</span> <span>&lt;</span><span>A</span>: <span>Type</span><span>,</span> <span>B</span>: <span>A</span> <span>-</span><span>&gt;</span> <span>Type</span><span>&gt;</span> <span>{</span>
  <span>new</span><span>(</span><span>fst</span>: <span>A</span><span>,</span> <span>snd</span>: <span>B</span><span>(</span><span>fst</span><span>)</span><span>)</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// A polymorphic list with a statically known size
type Vector &lt;A: Type&gt; ~ (size: Nat) {
  nil                                              ~ (size = 0) 
  cons(size: Nat, head: Nat, tail: Vector&lt;A,size&gt;) ~ (size = 1 + size)
}
"><pre><span>// A polymorphic list with a statically known size</span>
<span>type</span> <span>Vector</span> <span>&lt;</span><span>A</span>: <span>Type</span><span>&gt;</span> <span>~</span> <span>(</span><span>size</span>: <span>Nat</span><span>)</span><span></span> <span>{</span>
  <span>nil</span>                                              <span>~</span> <span>(</span><span>size</span> <span>=</span> <span>0</span><span>)</span> 
  <span>cons</span><span>(</span><span>size</span>: <span>Nat</span><span>,</span> <span>head</span>: <span>Nat</span><span>,</span> <span>tail</span>: <span>Vector</span><span>&lt;</span><span>A</span><span>,</span><span>size</span><span>&gt;</span><span>)</span> <span>~</span> <span>(</span><span>size</span> <span>=</span> <span>1</span> <span>+</span> <span>size</span><span>)</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// A bounded natural number
type Fin ~ &lt;lim: Nat&gt; {
  zero&lt;N: Nat&gt;               ~ (lim = Nat.succ(N))
  succ&lt;N: Nat&gt;(pred: Fin&lt;N&gt;) ~ (lim = Nat.succ(N))
}
"><pre><span>// A bounded natural number</span>
<span>type</span> <span>Fin</span> <span>~</span> <span>&lt;</span><span>lim</span>: <span>Nat</span><span>&gt;</span> <span>{</span>
  <span>zero</span><span>&lt;</span><span>N</span>: <span>Nat</span><span>&gt;</span>               <span>~</span> <span>(</span><span>lim</span> <span>=</span> <span>Nat</span><span>.</span><span>succ</span><span>(</span><span>N</span><span>)</span><span>)</span>
  <span>succ</span><span>&lt;</span><span>N</span>: <span>Nat</span><span>&gt;</span><span>(</span><span>pred</span>: <span>Fin</span><span>&lt;</span><span>N</span><span>&gt;</span><span>)</span> <span>~</span> <span>(</span><span>lim</span> <span>=</span> <span>Nat</span><span>.</span><span>succ</span><span>(</span><span>N</span><span>)</span><span>)</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// The type used in equality proofs
type Equal &lt;A: Type, a: A&gt; ~ (b: A) {
  refl ~ (b = a)
}
"><pre><span>// The type used in equality proofs</span>
<span>type</span> <span>Equal</span> <span>&lt;</span><span>A</span>: <span>Type</span><span>,</span> <span>a</span>: <span>A</span><span>&gt;</span> <span>~</span> <span>(</span><span>b</span>: <span>A</span><span>)</span> <span>{</span>
  <span>refl</span> <span>~</span> <span>(</span><span>b</span> <span>=</span> <span>a</span><span>)</span>
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// A burrito
type Monad &lt;M: Type -&gt; Type&gt; {
  new(
    bind: &lt;A: Type, B: Type&gt; M&lt;A&gt; -&gt; (A -&gt; M&lt;B&gt;) -&gt; M&lt;B&gt;
    pure: &lt;A: Type&gt; A -&gt; M&lt;A&gt;
  )
}
"><pre><span>// A burrito</span>
<span>type</span> <span>Monad</span> <span>&lt;</span><span>M</span>: <span>Type</span> <span>-</span><span>&gt;</span> <span>Type</span><span>&gt;</span> <span>{</span>
  <span>new</span><span>(</span>
    <span>bind</span>: <span>&lt;</span><span>A</span>: <span>Type</span><span>,</span> <span>B</span>: <span>Type</span><span>&gt;</span> M<span>&lt;</span><span>A</span><span>&gt;</span> -<span>&gt;</span> <span>(</span><span>A</span> <span>-</span><span>&gt;</span> <span>M</span><span>&lt;</span><span>B</span><span>&gt;</span>) -<span>&gt;</span> <span>M</span><span>&lt;</span><span>B</span><span>&gt;</span>
    pure: <span>&lt;</span><span>A</span>: <span>Type</span><span>&gt;</span> A -<span>&gt;</span> <span>M</span><span>&lt;</span><span>A</span><span>&gt;</span>
  )
<span>}</span></pre></div>
<div data-snippet-clipboard-copy-content="// Some game entity
type Entity {
  player(
    name: String
    pos: V3
    health: Nat
    items: List&lt;Item&gt;
    sprite: Image
  )
  wall(
    hitbox: Pair&lt;V3, V3&gt;
    collision: Entity -&gt; Entity
    sprite: Image
  )
}
"><pre><span>// Some game entity</span>
<span>type</span> <span>Entity</span> <span>{</span>
  <span>player</span><span>(</span>
    <span>name</span>: <span>String</span>
    <span>pos</span>: <span>V3</span>
    health: <span>Nat</span>
    <span>items</span>: <span>List</span><span>&lt;</span><span>Item</span><span>&gt;</span>
    <span>sprite</span>: <span>Image</span>
  <span>)</span>
  <span>wall</span><span>(</span>
    <span>hitbox</span>: <span>Pair</span><span>&lt;</span><span>V3</span><span>,</span> <span>V3</span><span>&gt;</span>
    <span>collision</span>: <span>Entity</span> <span>-</span><span>&gt;</span> <span>Entity</span>
    <span>sprite</span>: <span>Image</span>
  <span>)</span>
<span>}</span></pre></div>
<p>Check all core types on <a href="https://github.com/uwu-tech/Kind/tree/master/base">base</a>!</p>
<h3><a id="user-content-some-proofs" aria-hidden="true" href="#some-proofs"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Some proofs</h3>
<div data-snippet-clipboard-copy-content="// Proof that `a == a + 0`
Nat.add.zero(a: Nat): a == Nat.add(a, 0)
  case a {
    zero: refl
    succ: apply(Nat.succ, Nat.add.zero(a.pred))
  }!
"><pre><span>// Proof that `a == a + 0`</span>
<span>Nat</span><span>.</span><span>add</span><span>.</span><span>zero</span><span>(</span><span>a</span>: <span>Nat</span><span>)</span>: <span>a</span> <span>==</span> <span>Nat</span><span>.</span><span>add</span><span>(</span><span>a</span><span>,</span> <span>0</span><span>)</span>
  <span>case</span> <span>a</span> <span>{</span>
    zero: <span>refl</span>
    succ: <span>apply</span><span>(</span><span>Nat</span><span>.</span><span>succ</span><span>,</span> <span>Nat</span><span>.</span><span>add</span><span>.</span><span>zero</span><span>(</span><span>a</span><span>.</span><span>pred</span><span>)</span><span>)</span>
  <span>}</span><span>!</span></pre></div>
<div data-snippet-clipboard-copy-content="// Proof that `1 + (a + b) == a + (1 + b)`
Nat.add.succ(a: Nat, b: Nat): Nat.succ(a + b) == (a + Nat.succ(b))
  case a {
    zero: refl
    succ: apply(Nat.succ, Nat.add.succ(a.pred, b))
  }!
"><pre><span>// Proof that `1 + (a + b) == a + (1 + b)`</span>
<span>Nat</span><span>.</span><span>add</span><span>.</span><span>succ</span><span>(</span><span>a</span>: <span>Nat</span><span>,</span> <span>b</span>: <span>Nat</span><span>)</span>: <span>Nat</span><span>.</span><span>succ</span><span>(</span><span>a</span> <span>+</span> <span>b</span><span>)</span> <span>==</span> <span>(</span><span>a</span> <span>+</span> <span>Nat</span><span>.</span><span>succ</span><span>(</span><span>b</span><span>)</span><span>)</span>
  <span>case</span> <span>a</span> <span>{</span>
    zero: <span>refl</span>
    succ: <span>apply</span><span>(</span><span>Nat</span><span>.</span><span>succ</span><span>,</span> <span>Nat</span><span>.</span><span>add</span><span>.</span><span>succ</span><span>(</span><span>a</span><span>.</span><span>pred</span><span>,</span> <span>b</span><span>)</span><span>)</span>
  <span>}</span><span>!</span></pre></div>
<div data-snippet-clipboard-copy-content="// Proof that addition is commutative
Nat.add.comm(a: Nat, b: Nat): (a + b) == (b + a)
  case a {
    zero:
      Nat.add.zero(b)
    succ: 
      p0 = Nat.add.succ(b, a.pred)
      p1 = Nat.add.comm(b, a.pred)
      p0 :: rewrite X in Nat.succ(X) == _ with p1
  }!
"><pre><span>// Proof that addition is commutative</span>
<span>Nat</span><span>.</span><span>add</span><span>.</span><span>comm</span><span>(</span><span>a</span>: <span>Nat</span><span>,</span> <span>b</span>: <span>Nat</span><span>)</span>: <span>(</span><span>a</span> <span>+</span> <span>b</span><span>)</span> <span>==</span> <span>(</span><span>b</span> <span>+</span> <span>a</span><span>)</span>
  <span>case</span> <span>a</span> <span>{</span>
    zero:
      <span>Nat</span><span>.</span><span>add</span><span>.</span><span>zero</span><span>(</span><span>b</span><span>)</span>
    succ: 
      <span>p0</span> <span>=</span> <span>Nat</span><span>.</span><span>add</span><span>.</span><span>succ</span><span>(</span><span>b</span><span>,</span> <span>a</span><span>.</span><span>pred</span><span>)</span>
      <span>p1</span> <span>=</span> <span>Nat</span><span>.</span><span>add</span><span>.</span><span>comm</span><span>(</span><span>b</span><span>,</span> <span>a</span><span>.</span><span>pred</span><span>)</span>
      p0 :: <span>rewrite</span> <span>X</span> <span>in</span> <span>Nat</span><span>.</span><span>succ</span><span>(</span><span>X</span><span>)</span> <span>==</span> <span>_</span> <span>with</span> <span>p1</span>
  <span>}</span><span>!</span></pre></div>
<p>Check some Nat proofs on <a href="https://github.com/uwu-tech/Kind/tree/master/base/Nat/add">base/Nat/add</a>!</p>
<h3><a id="user-content-a-web-app" aria-hidden="true" href="#a-web-app"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>A web app</h3>
<div data-snippet-clipboard-copy-content="// Render function
App.Hello.draw: App.Draw&lt;App.Hello.State&gt;
  (state)
  &lt;div style={&#34;border&#34;: &#34;1px solid black&#34;}&gt;
    &lt;div style={&#34;font-weight&#34;: &#34;bold&#34;}&gt;&#34;Hello, world!&#34;&lt;/div&gt;
    &lt;div&gt;&#34;Clicks: &#34; | Nat.show(state@local)&lt;/div&gt;
    &lt;div&gt;&#34;Visits: &#34; | Nat.show(state@global)&lt;/div&gt;
  &lt;/div&gt;

// Event handler
App.Hello.when: App.When&lt;App.Hello.State&gt;
  (event, state)
  case event {
    init: IO {
      App.watch!(App.room_zero)
      App.new_post!(App.room_zero, App.empty_post)
    }
    mouse_down: IO {
      App.set_local!(state@local + 1)
    }
  } default App.pass!
"><pre><span>// Render function</span>
<span>App</span><span>.</span><span>Hello</span><span>.</span><span>draw</span>: <span>App</span><span>.</span><span>Draw</span><span>&lt;</span><span>App</span><span>.</span><span>Hello</span><span>.</span><span>State</span><span>&gt;</span>
  <span>(</span><span>state</span><span>)</span>
  <span>&lt;</span><span>div</span> <span>style</span><span>=</span><span>{</span><span>&#34;border&#34;</span>: <span>&#34;1px solid black&#34;</span><span>}</span><span>&gt;</span>
    <span>&lt;</span><span>div</span> <span>style</span><span>=</span><span>{</span><span>&#34;font-weight&#34;</span>: <span>&#34;bold&#34;</span><span>}</span><span>&gt;</span>&#34;Hello, world!&#34;<span>&lt;</span><span>/</span><span>div</span><span>&gt;</span>
    <span>&lt;</span><span>div</span><span>&gt;</span><span>&#34;Clicks: &#34;</span> <span>|</span> <span>Nat</span><span>.</span><span>show</span><span>(</span><span>state</span>@<span>local</span><span>)</span><span>&lt;</span><span>/</span>div&gt;
    <span>&lt;</span><span>div</span><span>&gt;</span>&#34;Visits: &#34; | Nat.show(state@global)<span>&lt;</span><span>/</span><span>div</span><span>&gt;</span>
  <span>&lt;</span><span>/</span>div&gt;

<span>// Event handler</span>
<span>App</span><span>.</span><span>Hello</span><span>.</span><span>when</span>: <span>App</span><span>.</span><span>When</span><span>&lt;</span><span>App</span><span>.</span><span>Hello</span><span>.</span><span>State</span><span>&gt;</span>
  <span>(</span><span>event</span><span>,</span> <span>state</span><span>)</span>
  <span>case</span> <span>event</span> <span>{</span>
    init: <span>IO</span> <span>{</span>
      <span>App</span><span>.</span><span>watch</span><span>!</span><span>(</span><span>App</span><span>.</span><span>room_zero</span><span>)</span>
      <span>App</span><span>.</span><span>new_post</span><span>!</span><span>(</span><span>App</span><span>.</span><span>room_zero</span><span>,</span> <span>App</span><span>.</span><span>empty_post</span><span>)</span>
    <span>}</span>
    mouse_down: <span>IO</span> <span>{</span>
      <span>App</span><span>.</span><span>set_local</span><span>!</span><span>(</span><span>state</span>@<span>local</span> <span>+</span> <span>1</span><span>)</span>
    <span>}</span>
  <span>}</span> <span>default</span> <span>App</span><span>.</span><span>pass</span><span>!</span></pre></div>
<p>Source: <a href="https://github.com/uwu-tech/Kind/blob/master/base/App/Hello.kind">base/App/Hello.kind</a></p>
<p>Live: <a href="http://uwu.tech/App.Hello" rel="nofollow">http://uwu.tech/App.Hello</a></p>
<h2><a id="user-content-future-work" aria-hidden="true" href="#future-work"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Future work</h2>
<p>There are so many things we want to do and improve. Would like to contribute? Check <a href="https://github.com/uwu-tech/Kind/blob/master/CONTRIBUTE.md">CONTRIBUTE.md</a>. Also reach us on <a href="https://t.me/formality_lang" rel="nofollow">Telegram</a>. We&#39;re friendly!</p>
</article>
        </div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 12:47:34 +0000</pubDate>
      <source>https://github.com/uwu-tech/kind</source>
    </item>
    <item>
      <title>890M-year-old sponge fossil may be the earliest animal yet found</title>
      <link>https://www.nationalgeographic.com/science/article/890-million-year-old-sponge-fossil-may-be-the-earliest-animal-known</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><section><article><div><header><ul><li><a tabindex="0" href="https://www.nationalgeographic.com/science"><span>Science</span></a></li><li><span><span>News</span></span></li></ul><div><p>The mesh-like fossil would push back the oldest known animal on Earth by more than 300 million years. But like many claims of very old life, the study is kicking up lively debate.</p></div></header></div><section><div><p>Relatives of the humble sea sponge have filtered Earth&#39;s waters for hundreds of millions of years or more, long before the first plants took to land. Their simplicity has led scientists to suggest sponges were the earliest animals to arise on our planet. But exactly when that happened remains under debate.</p><p>Now, a study published in the journal <i>Nature</i> suggests that <a href="https://www.nature.com/articles/s41586-021-03773-z" target="_blank">mesh-like structures in an ancient reef may be 890-million-year-old sponges</a>. If confirmed, the fossil sponges, found in the &#34;Little Dal&#34; limestones in northwest Canada, would predate the earliest undisputed fossils of any animal by more than 300 million years.  </p><p>However, most claims of extremely old fossilized life kick up controversy. The creatures that flourished in ancient seas may have looked quite different than those that swim through oceans today, and scientists disagree about how much and which types of evidence can distinguish animals from other forms of life—or geologic structures. And the Little Dal fossils are no different. </p><p>&#34;What we have is essentially something a bit like a Rorschach inkblot test, where there are some squiggles in a rock,&#34; says <a href="https://wp.unil.ch/paleo/contact/jonathan-b-antcliffe/" target="_blank">Jonathan Antcliffe</a>, a paleontologist specializing in early life at the University of Lausanne, Switzerland.</p><p>During a Zoom interview, <a href="https://hes.laurentian.ca/people/elizabeth-c-turner" target="_blank">Elizabeth Turner</a>, the sole author of the study, holds up a mustard yellow natural bath sponge—a modern relative to the newly proposed fossil sponge. She points out the network of flexible tubes that give the sponge its squish, explaining that the mesh is &#34;identical&#34; to the newly analyzed fossils, as well as to several <a href="https://pubmed.ncbi.nlm.nih.gov/24763744/" target="_blank">younger mesh-like fossils</a> recently identified by other scientists.</p><p>&#34;It seems almost like a no-brainer,&#34; says Turner, a field geologist at Ontario&#39;s Laurentian University. But she acknowledges that the proposed animal identity will be controversial. &#34;It&#39;s time for it to be published and go out to the community for discussion and challenge.&#34;</p><h2><b>Fishy fossils</b></h2><p>The newly described fossils were tucked in the nooks and crannies of the towering Little Dal reef. The structure formed at a time when warm, shallow seas flooded a vast tract of land through what is now North America—time and tectonics dried out the inland seas and turned the reefs to stone. Unlike many modern reefs that are built by corals, the architects of this ancient structure were cyanobacteria. These microbes grow in slimy sheets, forming layered mounds over time as sands catch on their sticky surfaces and minerals dissolved in the waters turn into solid bits of fluff.</p><p>When fossilized, the layered microbial structures are <a href="https://www.sciencedirect.com/topics/earth-and-planetary-sciences/stromatolite" target="_blank">known as stromatolites</a>. Some date as far back <a href="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/47/11/1039/573756/Nano-porous-pyrite-and-organic-matter-in-3-5?redirectedFrom=fulltext" target="_blank">as 3.5 billion years ago</a>, providing some of the earliest convincing traces of any kind of life on Earth.</p><p>Turner began studying Little Dal decades ago as a graduate student at Queen&#39;s University in Ontario. At the time, she was interested in how the cyanobacteria built the reef. But a series of strange samples with complex structures caught her eye.</p><p>&#34;There was something fishy about it,&#34; Turner says. The Little Dal reef is mostly &#34;just a streaky set of laminated things,&#34; she says. Yet some odd samples from the structure displayed tube-like forms that branch apart and then rejoin in a polygonal three-dimensional network. She didn’t know what to make of the odd forms&#39; identity.</p><p>&#34;I just kind of thought, you know, I&#39;ll just let this fester away in my mind,&#34; she says.</p><p>In recent years, however, clues to their possible identity began to amass. Researchers found strikingly similar <a href="https://pubmed.ncbi.nlm.nih.gov/24763744/" target="_blank">winding networks</a> in <a href="https://onlinelibrary.wiley.com/doi/full/10.1111/gbi.12422" target="_blank">rocks much younger</a> than the Little Dal reef in several locations. They suggested the branching mesh formations could be the fossil remains of a group known as keratosan sponges.</p><p>Many sponges build their skeletons out of tiny rigid structures called spicules, which are made from calcium carbonate or silica and shaped like toy Jacks. In fossils, the structures provide telltale signs of early sponges, but keratosan sponges lack these rigid skeletons. Instead, they get their squishy structure from networks of the protein spongin, which has a soft, spring-like texture that is ideal for their modern use for bathing.</p><p>By studying paper-thin sections of the rocks under a microscope, Turner documented the similarities of the tubular shapes and structures in the Little Dal samples to fossils that were previously identified as keratosan sponges, as well as to modern sponges.</p><p>Decades after she first spotted the strange forms, Turner finally felt ready to publish. &#34;It&#39;s an ode to slow science,&#34; she says.</p><h2><b>Sponge or something else?</b></h2><p>The new study joins the lengthy debate about when the earliest animals arose—and what evidence is necessary to confirm a fossil as an animal. Over the last several decades, the use of geochemical tracers for early life, known as biomarkers, became a common way to identify possible creatures, explains <a href="https://nhm.academia.edu/KeyronHickmanLewis" target="_blank">Keyron Hickman-Lewis</a>, a geobiologist specializing in ancient microbes at London&#39;s Natural History Museum. The fossil remains of <a href="https://link.springer.com/referenceworkentry/10.1007/978-1-4020-9212-1_30" target="_blank">various types of lipids</a>, for example, are commonly used as biomarkers.</p><p>But since then, Hickman-Lewis says, much of this supposed evidence for early life has turned out to be false. Some of the would-be biomarkers were likely due to contamination, while other chemical traces were not surefire signs of animals. For example, <a href="https://theconversation.com/ancient-sponges-or-just-algae-new-research-overturns-chemical-evidence-for-the-earliest-animals-150635" target="_blank">scientists recently found that a combination</a> of algae and geologic alteration could produce the same compounds that were previously identified as evidence of ancient sponges extracted from 635-million-year-old sediments in Oman.</p><p>So after much early excitement, Hickman-Lewis says, &#34;we became very suspicious of an early origin for animals.&#34;</p><p>The study of the Little Dal mesh networks promises to further stoke the debate. &#34;I think the evidence is strong,&#34; says <a href="https://robertriding.com/personal/" target="_blank">Robert Riding</a> of the University of Tennessee, Knoxville, who was a reviewer of the study. He recently published a study <a href="https://onlinelibrary.wiley.com/doi/full/10.1111/gbi.12422" target="_blank">documenting similar fossils</a> associated with a roughly 485-million-year-old stromatolite in New York.</p><p>The association of these sponges with the microbial reefs would make sense, Turner notes. Earth’s atmosphere was not always rich in oxygen, and the early date for the sponges places them <a href="https://science.sciencemag.org/content/early/2019/12/09/science.aax6459?versioned=true" target="_blank">before this life-friendly gas</a><a href="https://science.sciencemag.org/content/early/2019/12/09/science.aax6459?versioned=true" target="_blank"> was common throughout the sea</a>. But so-called &#34;oxygen oases&#34; would likely have existed around cyanobacteria reefs, where the photosynthetic microbes would have spit out oxygen that the sponges could have used.</p><p>&#34;The fact that these two things occur together, it strengthens the case of both of them,&#34; Hickman-Lewis says.</p><p>Other experts are less convinced of the case, noting that the sponge-like network isn&#39;t as unique to the group as Turner and others suggest. &#34;Basically, every area of life—bacteria, algae, the fungi, the plants, the animals—they can all make things that look like this,&#34; Antcliffe says.</p><p>In a 2014 <a href="https://onlinelibrary.wiley.com/doi/full/10.1111/brv.12090" target="_blank">review of the evidence for early sponges</a>, Antcliffe and his colleagues found that the oldest convincing animal fossils are sponge spicules found in Iran dating to roughly 535 million years ago—and he says no recent studies have yet changed his mind.</p><p>Many analyses have identified what he calls &#34;hints and whispers&#34; of earlier sponge-like structures. But none sport indisputable characteristics, such as spicules or pores. The latter of these features were key to confirming the identity of the much-debated Archaeocyathid sponges, another group that lacks spicules but has been identified in rocks as old as 523 million years.</p><p>Partly the challenge comes down to the difficulty of identifying ancient sponges compared to other animals, says <a href="https://admuscente.com/" rel="noopener noreferrer" target="_blank">Drew Muscente</a>, a paleobiologist at Cornell College in Mount Vernon, Iowa. Dinosaurs, for example, have an array of distinctive boney features—sockets, skull sutures, and more—that can help scientists tell their fossils apart from nonliving objects. &#34;When you have a sponge or a sponge-like organism, you&#39;re missing all of those little details,&#34; he says.</p><p>Abiotic, or nonliving, chemical processes can also form structures that look surprisingly similar to life, adds <a href="https://blogs.ed.ac.uk/rwood4/" target="_blank">Rachel Wood</a>, a carbonate geologist at the University of Edinburgh. &#34;She may be right. But I think you really have to explore and disprove all the other possibilities to make such a really strong claim like this.&#34; So for now, Wood says, &#34;I don&#39;t think that she&#39;s really nailed that these are sponges.&#34;</p><p>Only further analysis can resolve the debate. Wood notes that crafting three-dimensional models of the tube network would help give a more detailed look at the structures. And Riding hopes the new study will inspire more scientists to take a closer look at other stromatolites to search for more of these meshy structures.</p><p>&#34;I don&#39;t think this is the end of the story,&#34; Riding says. &#34;This is just the beginning of a really interesting phase.&#34;</p></div></section></article></section></div>]]></content:encoded>
      <pubDate>Tue, 10 Aug 2021 12:13:01 +0000</pubDate>
      <source>https://www.nationalgeographic.com/science/article/890-million-year-old-sponge-fossil-may-be-the-earliest-animal-known</source>
    </item>
    <item>
      <title>Show HN: Lona – Framework for responsive web apps in full Python without JS</title>
      <link>http://lona-web.org</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page">

   
  <div>
    
    <nav data-toggle="wy-nav-shift">
      
    </nav>

    <section data-toggle="wy-nav-shift">

      
      <nav aria-label="top navigation">
        
          <i data-toggle="wy-nav-top"></i>
          <a href="http://lona-web.org/">Lona</a>
        
      </nav>


      <div>
        
        <div>
        
          


















          <div role="main" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  

<ul>
    
        <li>    <a href="#what-is-lona">What is Lona?</a></li>
    
        <li>    <a href="#how-does-it-work">How does it work?</a></li>
    
</ul>

<div id="what-is-lona">
<h2>What is Lona?</h2>
<p>Lona is a web application framework, designed to write responsive web apps in
<strong>full</strong> Python.</p>
<p>Web is a solved problem in Python since ages, but traditionally Python handles
only the server side. If you want to have client side interaction like
click events or you want update content live, you have to write an additional
Javascript application.</p>
<p>Lona handles the server side and the client side, and provides a simple,
pythonic API to write self contained views.</p>
<div>
  <div><pre><span></span><span>from</span> <span>lona.html</span> <span>import</span> <span>HTML</span><span>,</span> <span>Button</span><span>,</span> <span>Div</span><span>,</span> <span>H1</span>
<span>from</span> <span>lona.view</span> <span>import</span> <span>LonaView</span>


<span>class</span> <span>MyView</span><span>(</span><span>LonaView</span><span>):</span>
    <span>def</span> <span>handle_request</span><span>(</span><span>self</span><span>,</span> <span>request</span><span>):</span>
        <span>message</span> <span>=</span> <span>Div</span><span>(</span><span>&#39;Button not clicked&#39;</span><span>)</span>
        <span>button</span> <span>=</span> <span>Button</span><span>(</span><span>&#39;Click me!&#39;</span><span>)</span>

        <span>html</span> <span>=</span> <span>HTML</span><span>(</span>
            <span>H1</span><span>(</span><span>&#39;Click the button!&#39;</span><span>),</span>
            <span>message</span><span>,</span>
            <span>button</span><span>,</span>
        <span>)</span>

        <span>self</span><span>.</span><span>show</span><span>(</span><span>html</span><span>)</span>

        <span># this call blocks until the button was clicked</span>
        <span>input_event</span> <span>=</span> <span>self</span><span>.</span><span>await_click</span><span>(</span><span>button</span><span>)</span>

        <span>if</span> <span>input_event</span><span>.</span><span>node</span> <span>==</span> <span>button</span><span>:</span>
            <span>message</span><span>.</span><span>set_text</span><span>(</span><span>&#39;Button clicked&#39;</span><span>)</span>

        <span>return</span> <span>html</span>
</pre></div>

  
</div></div>
<div id="how-does-it-work">
<h2>How does it work?</h2>
<p>Lona comes with a Javascript based browser library that speaks a specialized
protocol with the backend.
This protocol specifies messages like &#34;hey frontend, please show $HTML&#34; and
&#34;hey backend, someone clicked on node XY&#34;
<a href="http://lona-web.org/end-user-documentation/basic-concept.html">read more</a></p>
</div>

<!-- Root element of PhotoSwipe. Must have class pswp. -->


           </div>
           
          </div>
          <hr/><p>
Built with <a href="http://www.flamingo-web.org">Flamingo</a> using a <a href="https://github.com/rtfd/sphinx_rtd_theme">theme</a> by <a href="https://readthedocs.org">Read the Docs</a>.
        </p></div>
      </div>

    </section>

  </div>
  

  

  
  
    
   


</div>]]></content:encoded>
      <pubDate>Tue, 10 Aug 2021 13:19:45 +0000</pubDate>
      <source>http://lona-web.org</source>
    </item>
    <item>
      <title>How Sweden became the Silicon Valley of Europe</title>
      <link>https://www.reuters.com/business/finance/how-sweden-became-silicon-valley-europe-2021-08-11/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___www_reuters_com_business_finance_how-sweden-became-silicon-valley-europe-2021-08-11_/image.jpg" /> 
<div id="readability-page-1" class="page"><div><p data-testid="paragraph-0">STOCKHOLM, Aug 11 (Reuters) - As Klarna&#39;s billionaire founder Sebastian Siemiatkowski prepares to stage one of the biggest-ever European fintech company listings, a feast of capitalism, he credits an unlikely backer for his runaway success: the Swedish welfare state.</p><p data-testid="paragraph-1">In particular, the 39-year-old pinpoints a late-1990s government policy to put a computer in every home.</p><p data-testid="paragraph-2">&#34;Computers were inaccessible for low-income families such as mine, but when the reform came into play, my mother bought us a computer the very next day,&#34; he told Reuters.</p><p data-testid="paragraph-3">Siemiatkowski began coding on that computer when he was 16. Fast-forward more than two decades, and his payments firm Klarna is valued at $46 billion and plans to go public. It hasn&#39;t given details, though many bankers predict it will list in New York early next year.</p><p data-testid="paragraph-4">Sweden&#39;s home computer drive, and concurrent early investment in internet connectivity, help explain why its capital Stockholm has become such rich soil for startups, birthing and incubating the likes of Spotify, Skype and Klarna, even though it has some of the highest tax rates in the world.</p><p data-testid="paragraph-5">That&#39;s the view of Siemiatkowski and several tech CEOs and venture capitalists interviewed by Reuters.</p><p data-testid="paragraph-6">In the three years the scheme ran, 1998-2001, 850,000 home computers were purchased through it, reaching almost a quarter of the country&#39;s then-four million households, who didn&#39;t have to pay for the machines and thus included many people who were otherwise unable to afford them.</p><p data-testid="paragraph-7">In 2005, when Klarna was founded, there were 28 broadband subscriptions per 100 people in Sweden, compared with 17 in the United States - where dial-up was still far more common - and a global average of 3.7, according to data from the World Bank.</p><p data-testid="paragraph-8">Spotify allowed users to stream music when Apple&#39;s <a href="https://www.reuters.com/companies/AAPL.O" target="_blank">(AAPL.O)</a> iTunes was still download-based, which gave the Swedish company the upper-hand when streaming became the norm around the world.</p><p data-testid="paragraph-9">&#34;That could only happen in a country where broadband was the standard much earlier, while in other markets the connection was too slow,&#34; Siemiatkowski said.</p><p data-testid="paragraph-10">&#34;That allowed our society to be a couple of years ahead.&#34;</p><p data-testid="paragraph-11">Some executives and campaigners say the Scandinavian nation demonstrates that a deep social safety net, often viewed as counter to entrepreneurial spirit, can foster innovation. It&#39;s an outcome that might not have been envisaged by the architects of Sweden&#39;s welfare state in the 1950s.</p><p data-testid="paragraph-12">Childcare is, for the most part, free. A range of income insurance funds can protect you if your business fails or you lose your job, guaranteeing up to 80% of your previous salary for the first 300 days of unemployment.</p><p data-testid="paragraph-13">&#34;The social safety net we have in Sweden allows us to be less vulnerable to taking risks,&#34; said Gohar Avagyan, the 31-year-old co-founder of Vaam, a video messaging service used for sales pitches and customer communication.</p><p data-testid="paragraph-14">STARTUP RATE VS SILICON VALLEY</p><p data-testid="paragraph-15">Although overall investments are larger in the bigger European economies of Britain and France and their longstanding finance hubs, Sweden punches above its weight in some regards.</p><p data-testid="paragraph-16">It has the third highest startup rate in the world, behind Turkey and Spain, with 20 startups per 1000 employees and the highest three year survival rate for startups anywhere, at 74%, according to a 2018 study by OECD economists.</p><p data-testid="paragraph-17">Stockholm is second only to Silicon Valley in terms of unicorns - startups valued at above $1 billion - per capita, at around 0.8 per 100,000 inhabitants, according to Sarah Guemouri at venture capital firm Atomico.</p><p data-testid="paragraph-18">Silicon Valley - San Francisco and the Bay Area - boasts 1.4 unicorns per 100,000, said Guemouri, co-author of a 2020 report on European tech companies.</p><p data-testid="paragraph-19">No one can say for sure if the boom will last, though, in a country where capital gains are taxed at 30 percent and income tax can be as high as 60 percent.</p><p data-testid="paragraph-20">In 2016, Spotify said it was considering moving its headquarters out of the country, arguing high taxes made it difficult to attract overseas talent, though it hasn&#39;t done so.</p><p data-testid="paragraph-21">Yusuf Ozdalga, partner at venture capital firm QED Investors, said access to funding and administrative or legal tasks connected with founding a company could also prove tough to navigate for non-Swedish speakers.</p><p data-testid="paragraph-22">He contrasted that to Amsterdam, capital of the Netherlands, where the government adopted English as an official language in April to make life easier for international companies.</p><p data-testid="paragraph-23">&#39;INTERESTING DILEMMA&#39; FOR VC</p><p data-testid="paragraph-24">Jeppe Zink, partner at London-based venture capital firm Northzone, said a third of all the exit value from fintech companies in Europe - the amount received by investors when they cash out - came from Sweden alone.</p><p data-testid="paragraph-25">Government policy had contributed to this trend, he added.</p><p data-testid="paragraph-26">&#34;Its an interesting dilemma for us venture capitalists as we&#39;re not used to regulation creating markets, in fact we are inherently nervous about regulation.&#34;</p><p data-testid="paragraph-27">Sweden&#39;s digital minister Anders Ygeman said that social regulation could make it &#34;possible to fail&#34; and then &#34;be up and running again&#34; for innovators.</p><p data-testid="paragraph-28">Peter Carlsson, CEO of startup Northvolt, which makes Lithium-ion batteries for electric vehicles and is valued at $11.75 billion, said that ultimately success bred success.</p><p data-testid="paragraph-29">&#34;You&#39;re really creating ripple effects when you&#39;re seeing the success of somebody else and I think that&#39;s perhaps the most important thing in order to create local ecosystems.&#34;</p><p><span>Reporting by Supantha Mukherjee and Colm Fulton in Stockholm; Editing by Pravin Char</span></p><p>Our Standards: <a href="https://www.thomsonreuters.com/en/about-us/trust-principles.html" target="_blank">The Thomson Reuters Trust Principles.</a></p></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 08:16:36 +0000</pubDate>
      <source>https://www.reuters.com/business/finance/how-sweden-became-silicon-valley-europe-2021-08-11/</source>
    </item>
    <item>
      <title>Ruthless Prioritization</title>
      <link>https://blackboxofpm.com/ruthless-prioritization-e4256e3520a9</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><section><div><div><figure><div role="button" tabindex="0"><p></p></div><figcaption><a href="http://sorting.at/" rel="noopener">sorting.at</a></figcaption></figure><div><h2 id="2d90">All high functioning teams must prioritize. Not once a month, not once a week — but <em>rigorously, and ruthlessly</em>.</h2><div><div><div><p><a href="https://medium.com/@brandonmchu?source=post_page-----e4256e3520a9--------------------------------" rel="noopener"></a></p></div></div></div></div><p id="6358">Prioritization means doing the things that are most important first. If you build products, it means doing the things that create the most customer value first.</p><p id="2d0d">In my experience, the craft of making prioritization decisions is one of the most difficult skills to impart on teams because of how complex those decisions can become, and while it’s usually a core responsibility of product managers, I’ve found that the best teams are the ones where <em>everyone</em> is maniacally prioritizing towards the same goal, and doing so in a way that’s consistent with each other.</p><p id="99a6">This post is about a framework to think about prioritization.</p></div></div></section><section><div><div><p id="3855">Prioritization in product management can be broken down into two scopes:</p><ol><li id="c738"><strong>Prioritization between projects </strong>— this is about determining what project your team should do next.</li><li id="666f"><strong>Prioritizing work within a project </strong>—this is about how efficiently you can execute a project.</li></ol><p id="d042">As we’ll see, the way we should tackle each of these scopes is very different. The reason is because they are each driving at different types of decisions.</p><p id="94d0">When prioritizing between projects, you have to make one big decision: <em>what will my team invest in next? </em>The right way to approach this turns out to be like completing a puzzle. Apply a <strong>rigorous process </strong>to find all the pieces, and the answer is in how they all fit together.</p><p id="1610">When prioritizing work within a project, you have to make the same decision hundreds of times: <em>is this absolutely necessary to do? </em>The right way to approach this is by accepting the <strong>chaotic</strong> nature of building products, and then develop a<strong> ruthless mindset</strong> to make quick decisions about what’s absolutely necessary.</p><figure><div role="button" tabindex="0"><div><div><div><p></p><p></p></div></div></div></div></figure><p id="82ad"><em>A rigorous process to solve the puzzle: What will my team invest in next?</em></p><p id="e5ec"><strong>Answering this question may require rigour, but the process isn’t complicated:</strong></p><ol><li id="1ed6">Estimate return on investment for each project</li><li id="1616">Apply three constraints: dependencies, timelines, and team composition</li><li id="a9d9">Put the puzzle together — sequence projects based ROI + constraints</li></ol><p id="2159">I’m going to assume most of these concepts aren’t new to readers, so we’re going to go through them pretty quickly.</p><h2 id="5365">1. Estimate Return on Investment</h2><p id="8b76">The basis for all project prioritization is return on investment (ROI), which is measured as the amount of customer value your team creates for a unit of time. Your goal with prioritization<em> </em>is to <em>always be doing the work that maximizes customer value created over time.</em></p><p id="f917"><strong>In order to prioritize between projects, you need to estimate two data points:</strong></p><ol><li id="7b95">the amount of customer value that will be produced</li><li id="7e46">the amount of time it will take to finish the project</li></ol><p id="e657">Once you have this data for each project, you can simply compare them all and then <em>voilà</em> — you have your priorities.</p></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div><figcaption>Mechanically this is what you’re trying to do</figcaption></figure></div></div></div><div><div><p id="55ad">Of course, it’s notoriously difficult to estimate both impact and effort, but assuming you have an equal chance of being wrong each time you estimate, then as a comparative exercise calculating ROI is a legitimate method of project prioritization.</p><blockquote><p id="c9e8">Pro-tip: double the effort and halve the impact of any estimates, and you’ll be much closer to reality.</p></blockquote><h2 id="1d42">2. Apply Constraints</h2><p id="8ca5">Since life isn’t as orderly as a spreadsheet, there are also <em>constraints</em> that you need to factor into your prioritization decisions. The core constraints you have to deal with are dependencies, timelines, and team composition.</p><p id="1861"><strong>Dependencies</strong></p><p id="4a84">A dependency is created when a unit of work needs to be complete in order for another unit of work to progress.</p><p id="44f5">Say you’re on the mobile team and you want to create a seamless one-tap payments button for customers on their phones. You’ve identified this is the highest ROI project, so you want to do it asap.</p></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><p id="e0c3">However, to do that, your company actually needs to have the ability to accept payments in the first place, which another team is working on now. The dependency on the other team finishing means you can’t really do anything yet, so the correct prioritization decision is to delay the one-tap feature and <em>do your next highest ROI project.</em></p></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><div><p id="233d">Dependencies are everywhere when building products, and it gets worse the more successful your product becomes, as scale creates more complex systems. In larger companies, understanding and working around dependencies are often the most vital dimensions to prioritizing.</p><p id="4f96">As an aside, most people think startups are fast because they work harder and are more ambitious. The truth is that most of the speed difference comes from having far fewer dependencies (and few customers to upset if something screws up), so it’s just easier to get stuff done.</p><p id="f4a1"><strong><em>Reverse Dependencies</em></strong></p><p id="ce21">There are times when you have a project that will really help other teams to achieve their goals. <strong>You are the dependency in this case.</strong></p><p id="3401">If you’re optimizing for the company’s ROI above your product’s— which you should be — you’ll now need to assess the <em>cumulative ROI </em>of not just your project, but the dependent projects that you unblock in order to make the correct prioritization decision for your team.</p></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><div><p id="29f9">Whenever I see teams working to unblock other teams they earn a lot of respect from me, and it signals maturity in their product thinking. These teams are the unsung heroes of product companies, and are the ones who provide the most leverage for a company.</p><p id="7110"><strong>Timelines</strong></p><p id="c9ad">Timelines are the canonical constraint, one we’ve all experienced. A particularly serious one is when your startup will run out of cash and die before the highest ROI feature will ship.</p></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><p id="40c6">When this happens, the correct prioritization decision of course is to do the highest ROI project that is achievable within the timeframe.</p></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><div><p id="9ac2"><strong>Team composition</strong></p><p id="868b">Not all teams are equal, and sometimes the composition of the specific people on your team means that you will need to make different prioritization decisions about which project to take on.</p><p id="da2a">An example is having a team that is full of brand new people to the company, like a gaggle of interns (no disrespect to interns, 50% of all software is built by them).</p><p id="7258">In these situations you should be wary of prioritizing a project that has a lot of risks to customers, <em>even if it’s the highest ROI. </em>Instead, you’ll often be better off prioritizing a project that doesn’t touch any critical code or user experience journeys, because then the magnitude of a bad outcomes are diminished.</p></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><div><p id="9280">Help newbie teams get their feet wet first by shipping small wins. Once they have a few production features under their belt, they can progress towards more complex projects.</p><h2 id="ec4f">Prioritizing between projects: Complete the puzzle and get to work</h2><p id="af4e">I’m trivializing the amount of work it takes to gather all the information above, but once you have it all, you just have put the pieces together.</p><figure><div role="button" tabindex="0"><div><div><div><p></p><p></p></div></div></div></div></figure><p id="6f3c"><em>A ruthless mindset to determine: Is this absolutely necessary to do?</em></p><p id="3f09">The nature of prioritization is different during the execution of a project. It’s chaotic. Decisions are needed everyday, and you don’t have time analyze each one as deeply as we did when prioritizing between projects. It’s also a more emotional time for a team, as real customers are going to be impacted, and their reputation may feel on the line.</p><p id="6033"><strong>The only way to combat the speed and chaos of building products is to develop a ruthless mindset</strong>, one that is constantly aware of the work a team is doing and challenges them on the necessity of that work.</p><p id="2b95">Having a ruthless mindset means<strong> </strong>accepting reality. It’s a realization that you will have to make hard choices every day on where to focus. It’s a realization that shipping the perfect product is an illusion, and that trade-offs are always required to ship.</p><p id="a130">Having a ruthless mindset is about the will to ship. Stakeholder and customer expectations create enormous pressure on teams, and as a result they are often afraid to ship. They start sweating tiny issues so much that they’re frozen into inaction. They start losing sight of what matters, customer value created over time, and start trying to be perfect.</p><blockquote><p id="7fb1">Show me a team that has no bugs at launch, and I’ll show you one that should have shipped a long time ago.</p></blockquote><p id="ed71">In reality, the chaotic nature of prioritizing work within a project means that defining a process around it is foolhardy. A more productive strategy is to help teams internalize product development concepts that aid them in ruthlessly answering <em>“is this absolutely necessary?”. </em>Here are the one’s we’ll cover in the remainder of this post:</p><ol><li id="a7f6">Building prioritization systems</li><li id="b82d">Using product assumptions to make quality vs. speed trade offs</li><li id="5a57">The Time Value of Shipping</li></ol><h2 id="7810">1. Building prioritization systems</h2><p id="c238">All software is a liability. It has bugs now, and it will develop more over time. When faced with a new bug, if your team can’t quickly figure out if they should fix it or not, their ability to focus on the most important work will be constantly disrupted.</p><p id="ef26">You can’t afford to have a prioritization meeting every time a bug pops up, so one of the highest leverage things you can do is to create a system that determines when to fix bugs or when to move on.</p><p id="6b63"><strong>Here’s an example of one that I’ve found productive for my teams:</strong></p><figure><div role="button" tabindex="0"><div><div><div><p></p><p></p></div></div></div></div></figure><p id="8848">The X axis represents the frequency that a bug affects users, and the Y axis represents the severity of that bug. A red dot is a bug.</p><p id="91dc">To use this system, work with your team to define what level of severity is<em> too severe</em> (in this case, that users can’t pay) and which level of frequency is <em>too frequent </em>(in this case, 5% of users affected). Then, agree on a set of actions given which zone the bug falls, with at least one of those actions being <strong>put in the backlog and do nothing.</strong></p><p id="247c">If you invest in this, your team will be a bug triaging machine, and the chance of someone working on a low value bug will be systematically removed.</p><h2 id="5716"><strong>2. </strong>Using product assumptions to make quality vs. speed trade offs</h2><p id="e400">You’ll often hear about shitty code written by founders in the early days of a product. As the company became successful, this code created nightmares for new engineers joining the team.</p><p id="f595">Were the founders poor programmers? Maybe. But more likely than not, they didn’t care much about code quality at the time because the product was unlikely to succeed. Instead, they cared about speed and validating their idea.</p><p id="22b4">In order to ship, every team invariably makes some sacrifices to quality. Teams have to choose when enough is enough, and that comes down to a prioritization decision about what is essential to the quality of a product.</p><p id="a796">Here’s a useful way to guide yourself to the right spot on the spectrum of speed vs. quality: <strong>base it around your product assumptions</strong><em>. </em>Product assumptions are fundamental beliefs that you hold about a customer problem, or the solution you’re building for them.</p><p id="3118">A simple example from the early days of Facebook would have been the problem assumption that<em> people want to connect with each other online</em>. Once that problem was validated, they then thought of product ideas like <em>being able to add another user as a friend, </em>which is a solution assumption about how to solve that problem.</p><p id="24dd"><strong>If you think about your product, there are three situations you can be in with respect to these product assumptions:</strong></p><ol><li id="8817">The <em>problem</em> you’re trying to solve is an assumption</li><li id="3c20">The <em>solution</em> to fulfill a known problem is an assumption</li><li id="dad0"><em>Neither</em> are assumptions (you know exactly what’s needed and why)</li></ol></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><div><p id="276a">When you find yourself on the left side of this spectrum, you have an assumption about a customer problem but you don’t know if it’s real. In this situation, you should be cutting corners to ship something as fast as possible, which minimizes the risk that you’ll be trying to solving a problem that doesn’t exist.</p><p id="862b">On the right end of the spectrum, if there is high confidence in what problem you’re solving and how to build the right solution, then you should maximize quality because you know that feature will be successful and will need to scale well into the future.</p><p id="5302">You’ll often see companies split teams into those that “experiment” and those that do “core” work. In my opinion, organizational structures like this reflect the inability for most teams to understand the product assumption spectrum, and be able to switch gears towards speed or quality.</p><h2 id="a79f">3. The Time Value of Shipping</h2><p id="1f35">Software only creates value for customers<em> </em>once it’s shipped.</p></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><div><p id="2a91">As such, we should be able to place a value on shipping something faster to customers. This is a concept I wrote about a while ago called <a href="https://medium.com/the-black-box-of-product-management/the-time-value-of-shipping-6deaf8d7d565#.mtt9lq5wh" rel="noopener">The Time Value of Shipping</a>.</p><p id="0a85">As an example, a difficult choice product teams often face is whether or not to ship a feature early to 80% of the customer base, while delaying the feature for the last 20%. This choice typically arises when building the final 20% requires a lot of niche functionality, which takes double the time to build (as the first 80%).</p><p id="5902"><strong>Let’s break down this choice:</strong></p></div></div><div><div><div><figure><div role="button" tabindex="0"><p></p></div></figure></div></div></div><div><div><p id="b662">Looking at the diagram, we see that the 80% of customers are enjoying an additional period of getting value in option #1, whereas in option #2 they have to wait. So is it obvious to choose #1? Not exactly, it’s still a hard choice for the team because:</p><ol><li id="01f1">The 20% of customers that the feature doesn’t work for will definitely<em> </em>recognize your choice to not support them, <em>and they’ll be pissed</em>. To them, it’s worse than if you gave them nothing at all.</li><li id="d847">The 80% of customers that the feature does work for <em>don’t actually perceive the extra value </em>they received from getting the feature early.</li></ol><p id="309b">The irony of these two effects is that you will actually have <em>more pissed off customers </em>by making the decision to provide <em>more customer value over time</em> to them<em>.</em> Strange times we live in.</p><p id="ce52">Despite the above, when faced with this choice I usually encourage teams to be ruthless and ship it. Here’s why:</p><ol><li id="0b3e">If customers knew the full context and could make the decision for us, the majority of them would want us to ship it.</li><li id="b1a2">In the long run, if a team consistently follows this strategy, the number of times a customer will fall on the good side of that 80%|20% will even out, and as a result, relative to a company that always waits for 100%, customers will get exponentially more value over time as the effect of constantly getting features earlier compounds.</li></ol><p id="7d00">Placing a value on shipping faster to customers is one of those concepts that is easy to understand, but hard to act on because of pain that comes with it. Ruthless prioritizers will see through this, and act in the best interests of customers.</p><h2 id="d8da">Prioritizing work within a project: Ruthless mindsets are unnatural</h2><p id="d524">The concepts we’ve covered are only what experience has taught me are worth internalizing. There are more, and you tweak these with your own based on your experiences.</p><p id="e1a4">Sadly, most teams in the industry aren’t incentivized to be ruthless prioritizers, despite it being a core meme of product companies.</p><p id="4640">For example, in larger organizations, teams are shipping features all the time and most employees don’t even hear about a launch until customers do. In that environment, do you think employees can see that their teammates managed to ship 3x faster than others in their place would have? Likely not. Instead, they only see what’s missing in the product, even though all those shortcomings were <em>consciously accepted </em>by their teammates.</p><p id="7a34">In contrast, a perfectly polished product tends to receive a lot of praise internally. Too bad it took two years to ship. Too bad we rarely think about all the customers that churned because they never thought it would come.</p><p id="79e5"><strong>Challenge your team to be better. Challenge them to be ruthless.</strong></p></div></div></section><section><div><div><p id="db6c">Your team’s time is the most precious resource a company has at it’s disposal, and if part of your job is to direct that time, you need to become great at it. It’s a craft, and one that you can deliberately get better at with practice.</p><p id="8689">I’d like to leave you with one last truth about prioritization:<strong> there is always a way to accomplish your goal faster than you currently plan to.</strong></p><p id="08b8">Always. You just have to find it. You just have to ask, “<em>How can we do this in half the time?” </em>at the end of that planning meeting<em>, </em>and miraculously — the team will find a way.</p><p id="9d3e">After years of shipping products, I have yet to come across a situation where a team was unable to figure out how to create the same customer value with less time invested. I also have never come across a situation where a team ended up prioritizing things perfectly, which reinforces the same idea.</p><p id="e1e1">If you accept that there’s always a way, the only logical thing to do is to be ruthlessly and rigorously prioritizing, whether you’re executing a project now, or you’re deciding which project to take on next.</p><p id="467e">Even if your project is an entire country.</p><figure><div></div></figure></div></div></section><section><div><div><h2 id="a962">Before you go, some things to consider:</h2><ol><li id="b448"><em>Recommend or share</em> this if you found it useful. It gives me 🔋 to write knowing people find value in it.</li><li id="b08c">Subscribe to <a href="https://medium.com/the-black-box-of-product-management" rel="noopener">The Black Box of Product Management</a> if you want more reads like this, or if you consider submitting to it so we can share your story.</li></ol></div></div></section></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 16:29:12 +0000</pubDate>
      <source>https://blackboxofpm.com/ruthless-prioritization-e4256e3520a9</source>
    </item>
    <item>
      <title>Copy-Protection for Vinyl in the 1970s</title>
      <link>https://www.currybet.net/cbet_blog/2008/01/copy-protection-for-vinyl-in-t.php</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___www_currybet_net_cbet_blog_2008_01_copy-protection-for-vinyl-in-t_php/image.jpg" /> 
<div id="readability-page-1" class="page"><div>

                                    <div>
                                        <p>When I was thinking about an <a href="https://www.currybet.net/cbet_blog/2007/12/drm_icons.php">iconography for DRM</a>, I began to think back to the old days of recording vinyl onto my portable tape deck using a <a href="https://en.wikipedia.org/wiki/DIN_connector">5-pin DIN plug</a> to connect the two machines, the advent of tape-to-tape decks, and being <a href="http://www.last.fm/music/This+Poison/_/Poised+Over+The+Pause+Button">poised over the pause button</a> to record tracks from <a href="http://www.bbc.co.uk/radio1/johnpeel/index.shtml">John Peel</a> sessions. It was all so simple and blissfully analogue in those days, without a hint of copy protection in place.</p>

<p>Well, that isn&#39;t <em>strictly</em> true.</p>

<p>I dimly recalled that there <em>was</em> a form of copy-restriction placed on some vinyl albums. A high-pitched frequency was pressed into the album, which was inaudible to the human ear during playback, but which would destabilise the process of recording the album to cassette 
tape.</p>

<p>The reason I remember it more than anything was that a family friend had built some sort of decoder to eliminate the frequency, and was hoping, should it become widely adopted, to become rich on the back of selling little gizmos that would strip this primitive analogue rights management from recordings.</p>

<p>Unfortunately, copy-protection for vinyl appears to be one of those technological developments that seems to have slipped down the internet&#39;s collective <a href="https://en.wikipedia.org/wiki/Memory_hole">memory hole</a>. I couldn&#39;t find very much about it on the web at all, and of the stuff I did find, some of it seemed wrong or difficult to verify.</p>



<p>It may be that this was more common in the USA than the UK, but take this claim in  
Ram Samudrala&#39;s 1998 paper &#39;<a href="https://www.ram.org/ramblings/philosophy/fmp/creativity_ownership.html">Creativity and ownership: where is the balance?</a>&#39; that:</p>

<blockquote>&#39;When recording artists started objecting to this (Elvis Costello released his album Almost Blue with a sticker indicating that it didn&#39;t contain a spoiler signal), the industry gave up this effort.&#39;</blockquote>

<p>As far as I&#39;m aware the album <em>did</em> come with a sticker on the front in the UK, but it was one that was defensive of Costello&#39;s move into &#39;genre&#39; music, rather than a protest against anti-piracy measures:</p>

<blockquote>&#39;Warning: This album contains country &amp; western music, and may be harmful to narrow minds.&#39;</blockquote> 

<p>
</p>

<p>Then there is this 1999 article by Barry Fox from the New Scientist - &#34;<a href="https://www.newscientist.com/article/mg16422175.100-the-pirates-tale.html">The pirate&#39;s tale</a>&#34;. This puts the origination of this tactic down to The Beatles:</p>


<blockquote>&#39;It didn&#39;t take the recording industry long to see the danger [<em>of the compact cassette</em>]. When the Beatles founded the company Apple, they hired a colourful Greek character called &#34;Magic Alex&#34; Mardas. Together they hatched a plan to put a &#34;spoiler&#34; signal on the Beatles&#39;s next album, Sergeant Pepper. The record would play normally, but anyone who tried to copy it onto a blank cassette would find their recording ruined.
</blockquote>

<p>
</p>

<p>This is almost certainly wrong in attributing the development to The Beatles. &#34;Magic Alex&#34; Mardas was not the revolutionary engineer he portrayed himself to be. In 1995, <a href="https://www.injustice.org/nemo/newsfile/im951028.html">in an article about what became of The Beatle&#39;s hangers-on</a>, The Independent described him as:</p>

<blockquote>&#39;The Greek TV repairman, set up in Apple Electronics by the Beatles, who promised to build an artificial sun, a telephone you told who to call, wallpaper loudspeakers, a house which hovered supported by an invisible beam, and even a flying saucer. Not one invention was made, and the recording studio he built proved unusable and was demolished. Allen Klein fired him, and he has since disappeared.&#39;</blockquote>





<p>Additionally, Sergeant Pepper was released by <em>Parlophone</em> in 1967, not Apple. The Beatle&#39;s first album release for Apple was the double-vinyl set that became commonly known as &#34;The White Album&#34;.</p>

<p>It may be that this story is due to confusion with the fact that Sergeant Pepper <em>does</em> in fact contain a very high frequency signal on it - but only for a very short duration. At the end of side 2 on the original vinyl release, the long drawn out chord that closes &#34;A Day In The Life&#34; leads into a short snippet of nonsense noise that repeats infinitely in a locked-groove.</p>

<p>Just prior to this, a very high pitch frequency is included, designed to attract the attention of any dogs who were around when the album was being played. However, <a href="https://savetherobot.wordpress.com/2007/06/03/the-story-you-tell-yourself/">it was included as a joke for a couple of seconds</a>, and not as a serious attempt to prevent home recording of the album.</p>


<p>Where Barry Fox <em>wasn&#39;t</em> wrong was in his assessment that the system didn&#39;t work very well. Repeated plays of vinyl dampen the ability to reproduce high frequencies, and it seems that often the spoiler signal was either audible during regular playback, or didn&#39;t have sufficient impact upon recordings. Either way, after a few plays it was destined to disappear due to regular wear and tear on the record&#39;s groove.</p>



<p>In the end, the best information I found about this 1970s development with vinyl copy-protection was included as incidental information on this Google Answers thread - &#39;<a href="https://answers.google.com/answers/threadview?id=56500">Did Recording Industry Intend Compact Discs (CDs) to Have Copy Protection?</a>&#39;</p>

<p>It seems a shame that the history is not more widely available on the internet.</p><p>You see it looks like in the 1970s the music industry tried to stop people copying their content, didn&#39;t do it very well, made themselves unpopular with both the consumer and the artists they are meant to represent, and eventually had to recant. What is it they say about those who fail to learn from history?</p>
                                        
</div> <!-- end div entry-body -->

</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 12:18:53 +0000</pubDate>
      <source>https://www.currybet.net/cbet_blog/2008/01/copy-protection-for-vinyl-in-t.php</source>
    </item>
    <item>
      <title>An Old Hacker&#39;s Tips on Staying Employed</title>
      <link>https://madned.substack.com/p/an-old-hackers-tips-on-staying-employed</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___madned_substack_com_p_an-old-hackers-tips-on-staying-employed/image.jpg" /> 
<div id="readability-page-1" class="page"><div><div><figure><a target="_blank" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Ffed3bd69-b2ce-4c57-ae44-50766c7209c5_853x480.jpeg"></a></figure></div><p>I know my core audience is expecting crusty old tales of computing past, but this time I wanted to talk about something a little more topical — about job security, whether it indeed exists in any form, and what if anything you can do to improve your odds of staying employed.</p><p>Most people are probably familiar with the concept of <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">Impostor Syndrome</a>, the phenomenon whereby someone who is actually qualified in some area still feels like they are illegitimate in some way compared to their peers.   I don’t think I often feel this way in my day-to-day career as an engineer, but that insecurity rears its ugly head frequently when I start to write about things, especially in the form of published advice.</p><p>I’ve <a href="https://madned.substack.com/p/general-expert-major-havoc">talked before</a> about me being a generalist, and as such, I do not consider myself enough of an expert in anything to be telling others how to do stuff, which probably plays into the whole impostor thing.  But I realized after 35+ years on the job, maybe the thing I’m expert in is being an old guy in the tech field.  </p><p>So here are a few things that I think were not obvious to me earlier in my career that I picked up later, sometimes even embarrassingly later.  If I can give anyone a head start on learning these things before they reach their 50’s, so much the better!</p><h2>Ride The Bull</h2><p>When I started work at <a href="https://en.wikipedia.org/wiki/History_of_Digital_Equipment_Corporation">Digital Equipment Corporation</a> in 1986, the company had never had a layoff in its 30-year history.  This changed around 1987, after <a href="https://en.wikipedia.org/wiki/Black_Monday_(1987)">“Black Monday”</a> rattled the stock market with a 20+% single-day decline.  Digital had its first layoff not long after that, and they felt so guilty about having to do it, they gave all the lucky participants one year’s salary as part of the termination package.  Most people pocketed the money and went right back to work - because in truth, this layoff was not so much the symptom of some macroeconomic collapse as it was due to Digital’s mounting woes.</p><p>I kept my job, but even so, Black Monday was a watershed moment in time for me. In my mind, it divided the previous years of (mostly illusionary even then) company-based job stability, from the era that followed.  The era we live in now features a new kind of job stability, that is of the personal sort.  </p><p>After that first layoff at Digital, further layoffs at the company followed, but also further opportunities elsewhere as many new companies sprung up.  We had the dot-com bubble, a boom, a recession, another boom.  And through all the ups and downs, companies big and small would lay people off — sometimes as part of a regular process, and sometimes due to unforeseen events. </p><p>Although there may be a few pockets of workplaces with more durable guarantees of continued employment (thinking about countries with strict labor laws, tenured professors, government work, and so on) for the most part, we in the tech world today have come to accept that there is no such thing as job security, and losing your job could happen at almost any time. (And sadly, you will probably not be getting a year’s salary if it happens to you now.)</p><p>I myself have been very lucky, and despite some close calls over 3.5 decades, have never missed a paycheck.  I’ll go on next to talk about some things that I think helped me improve my odds, but to be clear, it is really mostly a matter of luck.   I have seen really great people get laid off just because they were in the wrong place at the wrong time, and I’ve seen large numbers of people get laid off because either their company or the general economy had a downturn.</p><div><figure><a target="_blank" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7b2b5fe5-6183-4c15-ac91-2365303e7fcd_1200x605.jpeg"></a></figure></div><p>I tend to think of employment in tech as riding a bull.  Not a big bull-riding spectator, but from what little I have seen, it really isn’t about whether you are going to stay on the bull or not.  You are going to get thrown off, it’s just a matter of when.   I am hoping to make it all the way to retirement and to be the rare guy who stays on the bull, but you never know.  I like to assume though that if I do get thrown, I’ll pick myself up, dust myself off, and just move on to the next bull.  So that is really the first piece of advice I’ll give; don’t take losing a job or having to move jobs too personally, because it’s almost certain to happen at some point.  </p><p>Hopefully, this starting advice is useful, even though it is somewhat simplistic, and coming from someone who’s a little bit of a layoff-victim impostor.</p><h2>Develop Your Personal Brand</h2><p>I mentor junior engineers from time to time, and one concern that comes up is when someone is working on a project that is not doing well.  In some cases, they are worried that they might lose their job if the project is canceled, and in some cases, it is more of a matter of them feeling bad about their career, partly because they have entangled their own self-worth with the success of their project.</p><p>In both cases, I offer the same advice, which is to develop your “personal brand”.  If you think about a company that you have had a high opinion of in the past, you will probably find that your trust level for that company’s latest products is also generally higher, and you are more likely to shop there versus somewhere else in the future.  Brand loyalty is a thing, and even if you do not slavishly follow it, you are probably at least somewhat likely to return to something you know is of good quality than take a risk on something unknown.</p><p>Personal brand also works like that.  When you work on a project, even a crappy project, your personal brand is on display for all potential shoppers to see.  And even when everything is going south, others will notice which people are easy to work with, which people can be relied upon to do what they said they would do, and which people consistently produce a quality result.</p><p>This is what job security looks like, in the post-Black-Monday world.  If your project was canceled or your company tanks and you get laid off in the process, your personal brand will control your fate.  If you were a complete pain-in-the-ass to work with, dropped the ball a lot, said things you were going to do but didn’t do them, then good luck.  Your brand is trash, and you’ll have to find a place that doesn’t do backreferences in your probably-long job hunt.</p><p>On the other hand, if your personal brand is highly regarded, magic things will often just happen for you in this situation.   Maybe some other project in the company will realize you are now free, and snatch you up.  Maybe one of your fellow laid-off coworkers will find a better job and refer you as well.  Maybe your boss will feel super-guilty you got laid off and give you a glowing recommendation, or even help find something for you. </p><p>So basically, your “brand” gives you not the security that you will keep your current job forever, but the security that you will be able to have <em>a</em> job, on some regular basis.</p><h2>Make Your Boss Afraid</h2><p>What about not getting laid off in the first place?  Isn’t that more the goal here, Mad Ned?  It sure is. I’ve given a lot of lip service so far to the idea that layoffs happen and just get used to it, but ideally, the best job security advice is about how to reduce the chance they will happen to you.</p><p>The best tip I have here is to make sure your boss is afraid.  </p><p>Afraid?  Yep.  Afraid of what will happen, if you ever decide to leave.  I am not talking about doing stupid stuff like leaving your resume conspicuously lying around on the printer, or brinksmanship games of claiming you have another job offer just to get a raise.  I have seen people play these games to varying degrees of short-term success in the past, but inevitably it’s a long-term lose, as it destroys trust relationships (in addition to being petty and sometimes backfiring).</p><p>In saying “make your boss afraid”, I do not suggest doing anything to undermine the trust you have with your boss - establishing trust is important, with any coworker.  What I mean is, you want to be so useful that it will create a lot of problems for your boss (and by extension project, and company) if you were not there for some reason. </p><div><figure><a target="_blank" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F089a5407-af45-4625-95fb-736c2a8cd3c3_983x763.jpeg"></a><figcaption>Norman offers to coordinate, so you don’t have to.</figcaption></figure></div><p>There is an old Star Trek episode called <a href="https://memory-alpha.fandom.com/wiki/I,_Mudd_(episode)">“I, Mudd”</a> where Captain Kirk and company faced an interesting adversary, a race of androids whose plans for domination centered around helping and serving humans, to the point where humanity became so reliant on this help that the androids would end up with complete control of the universe.</p><p>Even though I love this idea for an enemy threat because of its sheer novelty, my version of this concept is not quite so sinister.   No <a href="https://en.wikipedia.org/wiki/Machiavellianism_(psychology)">Machiavellian plotting</a> is required to accomplish this goal, but like the Star Trek storyline, a willingness to do what needs to be done, and to take ownership of things.  If possible, important things.  In some cases, even things that no one wants to do.</p><p>In a previous job as manager I ended up inheriting a lot of smaller technical work that no one else wanted to do, like getting the license token code updated, writing simple translators for file formats, and other small projects that fit within the available time I had when not doing the manager side of things.  When my boss had something that was giving him a headache and he asked if I could look into it, I would do it without complaint, and my personal brand in this job was to be a reliable go-to guy that could solve problems, kind of like <a href="https://quentin-tarantino.fandom.com/wiki/The_Wolf">Winston Wolf</a> from Pulp Fiction.</p><p>This approach served me well through many a layoff, when management would hold a <a href="https://everything2.com/title/lifeboat+exercises">lifeboat meeting</a> to determine who would be cut.   The goal in these situations is always to not be the lowest-ranked person under consideration, and the management-fear-thing does well for you in situations like that.</p><p>But it is not foolproof.  In 2009 or so when we had the last tech recession, a lot of people lost their jobs at our company.  My boss I am reasonably sure resisted laying me off for a while, again because he was probably afraid of having to deal with all these things I was keeping at bay.  But none of my responsibilities, in this case, were key enough to prevent me from getting onto the layoff list, and I did actually lose that job because the manager position itself was eliminated.</p><p>My personal brand here saved me though, because my boss had a positive opinion of me after putting out so many fires for him, and he recommended me to another group that was looking for a developer (and in retrospect, turned out to be a better fit for me than the management job anyway).  </p><p>So while I may have failed at making myself fearfully indispensable in that case, trying to get there was still worth it because it helped my personal brand, and boosted my overall job security in the process.</p><h2>Make Your Boss Happy</h2><p>Wait, what?  Make your boss happy? I thought we were supposed to make our boss afraid.  Well yes, he or she should be afraid, but only at certain times, like maybe raise time, or when the layoff list is being planned, or late at night when up worrying about life, work, and other existential matters.   The majority of the time though you want him or her to be happy — happy because they are successful.</p><p>Doctors say that if exercise could be given in pill form, it would be the most prescribed drug because it affects so many health-related things in positive ways.  Making your boss successful is Dr. Ned’s similar prescription here, because of the numerous positive effects it has for your career.  It goes beyond just doing a good job with your own personal assignments.  What it means is, putting yourself in your boss’s shoes, and thinking about what they need to be able to succeed in <em>their</em> boss’s eyes.</p><p>Give your boss stuff they can use.  Maybe it’s ideas and suggestions about how to frame or present work the group has done, or explain problems you have faced.  Maybe it’s a little bit of bonus content from time to time, that can be highlighted in a status report.  Maybe it’s helping to defuse a situation that would make your boss or the group look bad.  Sometimes it takes a little imagination to put yourself in your boss’s place, or maybe even some investigation on your part to find out what your boss’s true care-about’s really are, but this is worthwhile to do in general, anyway.</p><p>If taken too far, I guess these “managing up” strategies begin to border on sucking up to the boss or being overly calculating and political, but doing just the right amount of this can have immensely positive effects for your career, no pill needed!</p><div><figure><a target="_blank" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F2cce4724-e652-4b25-b1d3-92dc8eb686e4_1024x478.png"></a></figure></div><p>This strategy by the way also includes the idea of letting your boss take credit for your work.  That is super-not-cool if it’s say a peer doing it, but when your boss takes credit for your work, it is usually (unless you have an awful boss, anyway) done in a way that helps him or her, while simultaneously raising your visibility in the company, and improving your personal brand.   </p><p>Successful bosses get more resources, more freedoms. And that is also quite good for you, and your team.</p><h2>The “Do It Anyway” Principle</h2><p>It’s unavoidable. You will hopefully work on many cool projects and be very productive in your career, but sooner or later you will end up on some task or project that is difficult to accomplish and/or generally unpleasant, all due to factors outside of your control. </p><p>This has happened to me on some occasions, and it is super-frustrating when it does.  I spent a lot of time developing software features for a product once that had a horrible regression test and code versioning environment, such that it required a large number of very long test runs and updates and merges before any code could be checked in.  Tests were unreliable and produced false positives all the time. It took hours if not days to integrate code.</p><p>This was eventually straightened out, but it took I would say, a couple of years.  In that intervening time though, life went on.  Products had to be developed in spite of the challenges we had with the environment.   </p><p>At our team standup meetings, we would go over the progress of things, and I would see people divide into two general categories.   The first category was people who were similarly frustrated and fed-up with the work environment issues we faced.  They were more vocal about it though and would complain about these issues frequently, even though they were for the most part, out of our collective control.</p><p>Tasks assigned to people in this first group would frequently get delayed, due to the problems we faced with the development environment.  Each day when we met and someone said they could not finish something because of some obstacle that cropped up, it was never really challenged because it was pretty unreasonable to expect people to be productive given various problems we faced.  The net effect though was, the tasks assigned to this group of people were not really getting done.</p><p>The second category of people, which I would try my best to be in (but admittedly, not always succeed) would be the people that somehow got their tasks done anyway, even though there were ridiculous constraints imposed by our environment issues that made it a lot harder.  My own personal way of dealing with this would be to look at it as a challenge, like: Can I pick up wet grapes with chopsticks?  Can I run more than 100 feet without throwing up because I’m so out of shape?  View everything as unnecessary feats I clearly was not expected to do but would attempt, anyway.</p><p>Gamifying things this way helped me get through some of these situations, but I think others used different strategies that also worked.  In the end, it is really about mindset.  You can take the stance that you should not be expected to be productive in a bad work environment, and you would be right.  If that motivates you to affect change in the environment, it is great.  But sometimes, we do not have that luxury.</p><p>There is something called the <a href="https://en.wikipedia.org/wiki/Serenity_Prayer">Serenity Prayer</a>, written by theologian Reinhold Niehbur which goes like this:</p><blockquote><p><em>God, grant me the serenity to accept the things I cannot change,</em></p></blockquote><p>Applicable.  Whether you subscribe to a particular theology, or not.  Coming back to the job security theme though, I will say that at least one person from the first category did get laid off later because they just weren’t getting enough done.  Not fair I know, because you shouldn’t be expected to have your productivity measured when you are being held back by things beyond your control.</p><p>The brutal truth though is, you still do.  We are all constantly measured in the eyes of our employers by what we actually deliver, and those who can find a way to succeed even in the face of adversity will always have an advantage over those who cannot, or do not want to.</p><h2>The “Two-And-Done” Rule</h2><p>I’ve saved my favorite piece of advice to the end.  The “Two-And-Done” Rule as I call it was something that did not occur to me until I was almost in my 50’s, and I really wish I had come up with it earlier because it probably would have helped me in a lot of past situations.</p><p>It has to do with how to handle disagreements that come up at work.  In my younger days, I would have a pretty strong desire to always have the right answer to things, and also to be seen as someone who has the right answer to things.  When I got into situations where I thought I was right about something that others disagreed with, I would tenaciously argue my point, without letting go.  </p><p>It did not matter if the person was my peer, subordinate, or superior, I would let them know just why they were wrong, and why we needed to do it my way.  Sometimes the decision on what to do was out of my control, and management would pick the thing I was against.  And even after the decision was made, I would continue to try to find ways to criticize it, reverse it, undermine it, or revisit it, because something that I knew was better was being ignored (and by extension, I think I felt I was being ignored as well).</p><p>But this take-no-prisoners approach to debate did not do me any good.  Rarely would my continued efforts to upturn settled law ever yield any good results, and in fact much the opposite — it would negatively impact my ability to affect change.  If I did this too often, people would begin to see me as argumentative, difficult to work with, not a team player, and so on.  I started getting left out of meetings where decisions were being made because no one wanted to get into yet another argument over things.</p><div><figure><a target="_blank" href="https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fca70603c-c514-4b0d-aa07-31363459d6c5_700x350.jpeg"></a></figure></div><p>I will admit, I am still a big fan of being right all the time, and of having people agree with me.  What’s changed over the years though is first, an enhanced understanding that I in fact am not right all the time. But also that even when I am right, it isn’t always a guarantee that others will follow my advice, and if they do not, that it’s still OK.</p><p>So the Two-And-Done rule was born, wherein I will state my case the first time, and if whoever is arguing to the contrary does not agree after hearing my position, I’ll let it go.  But the next time the opportunity comes up, I will argue my point again.  Maybe allowing for a gap of time for people to consider my original point, or maybe allowing me time to refine and rephrase my ideas to be more convincing.</p><p>If I fail to get my way after the second time though, I am done.  I will even say as much to whomever I am debating if they are the final decision-maker.  I will say something like, “OK, let’s go your way then.  I still don’t completely agree with everything proposed here, but I think I’ve made my case, and we need to move on.”</p><p>Yielding in an argument like this has some weird, powerful effects.  One is, it kind of releases you from responsibility if things should go wrong.  And if a truly bad decision has been made, it is actually pretty likely that things <em>will</em> start going wrong.  <em>(Important Note: If you fail to convince people after two tries, you really do have to get behind the decision, and not try to sabotage or undermine it)</em></p><p>If it goes bad anyway and you have been graceful enough in your concession on the original bad decision, you can then just skip over the “I told you so!” part (it will just be implied), and go straight to the getting your way part.  This is because people will be more likely to revisit their decision if you did not make your original disagreement with it a super-unpleasant experience for them.</p><p>The added bonus of that is, it bumps up your personal brand, as someone who should maybe be listened to more often.  Sometimes though you end up just having to live with not getting your way, and learn to truly let go of whatever it was.  But more often than you might expect, this technique will end up causing things to pivot back your way, eventually.  </p><p>Anyway, this is not strictly a job-security-specific tip, as much as it’s a “how to be more effective at work” tip.  But being effective, indirectly, means job security.  </p><p>You might also wonder — shouldn’t the rule be “Three and Done”?  Things come in threes right, like three strikes, or the <a href="https://en.wikipedia.org/wiki/Rule_of_three_(writing)">rule-of-three</a>?  I just think three arguments is one argument too many to have about something.  You give your opinion once, and once more just in case you screwed up your pitch the first time. Beyond that though it has diminishing returns, in my experience at least.</p><h2>Who Needs Job Security Anyway?</h2><p>I’m someone who’s worked at only a couple of companies, for a very long time at each.  I would say it’s pretty clear I’ve prioritized job security over other things, like maximizing my income or job title or taking risky bets on startups or equity-driven opportunities.</p><p>So maybe not all of this advice I’ve given applies to you if your priorities are different. Also, maybe I am not qualified to talk about how to deal with some situations like having to job hop between startups and so on.  I can only offer what I have learned myself, take away what is useful.</p><p>If you take away only one thing though, take away the idea that job security doesn’t come from your job, it comes from you.  The Buddhists have this <a href="https://tricycle.org/magazine/buddhism-and-happiness/">philosophy</a> regarding happiness, that you should not have any dependencies on external things to make you happy because happiness comes from within.</p><p>Like job security, subscribing to this philosophy has the downside of, it means you are doing all the work.  Nobody is going to make you happy but yourself, and no job or company is going to give you job security, you have to do it on your own.</p><p>But it also means your fate is in your own hands.  And that is a great thing.</p><h2>Explore Further</h2><ul><li><p><a href="https://www.youtube.com/watch?v=YMg9HXSYcUc">Bull Riding 101 (YouTube)</a></p></li><li><p><a href="https://www.psychologytoday.com/us/blog/fighting-fear/201209/the-proper-way-argue">The Proper Way To Argue (Psychology Today)</a></p></li><li><p><a href="https://www.indeed.com/career-advice/career-development/job-security">Other Job Security Tips (Indeed.com)</a></p></li></ul><blockquote><p><strong>Next Time:   </strong>What it looks like inside the supply chain, from someone who has visited both ends.  The world of bossy customers and needy sellers collide in: <em>Vendor, Vidi, Vici !</em></p></blockquote><p><em>If I subscribe to the <a href="https://madned.substack.com/">Mad Ned Memo</a>, won’t I get spam? No! Just strange and nerdy tales of computer technology, past present, and future - delivered to your inbox regularly. (check the link to see some past articles)  It’s cost-free and ad-free, and you can unsubscribe at any time.</em></p><pre><code><code>The Mad Ned Memo takes subscriber privacy seriously, and does not share email addresses or other information with third parties.  For more details, </code><a href="https://madned.substack.com/about"><code>click here</code></a><code>.</code></code></pre></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 12:31:22 +0000</pubDate>
      <source>https://madned.substack.com/p/an-old-hackers-tips-on-staying-employed</source>
    </item>
    <item>
      <title>Facebook announces privacy-enhancing technologies</title>
      <link>https://www.facebook.com/business/news/building-for-the-future</link>
      <description></description>
      <content:encoded><![CDATA[<div id="readability-page-1" class="page"><div><div><div><div><div><div><p>As we mentioned in a post<a href="https://www.facebook.com/business/news/building-the-next-era-of-personalized-experiences" data-clickable="true" data-ms="{&#34;creative&#34;:&#34;link&#34;,&#34;creative_detail&#34;:&#34;FBBNews_DanLevyPostLastMonth_Link&#34;}" target="_blank" rel="noreferrer noopener"> last month</a>, we believe personalization in marketing is the best possible experience for people and businesses. Without personalized advertising, businesses would be harder to start and grow, new products and services would be harder to discover and would cost more, and people would see less relevant, less timely and less interesting ads. The free and open internet, including the news people read, the ways they communicate and the entertainment they watch, would become less accessible to those who can’t afford subscription services.</p><p>We are optimistic that new privacy-enhancing technologies will prove that personalization remains possible and effective as our industry evolves to become less reliant on individual third-party data. These technologies will help us minimize the amount of personal information we process, while still allowing us to show people relevant ads and measure ad effectiveness for advertisers.</p><p>Last year we began testing our Private Lift Measurement solution with select partners, which uses a privacy-enhancing technology called secure multi-party computation. This helps advertisers understand how their campaigns are performing, while adding extra layers of privacy to limit the information that can be learned by the advertiser or Facebook. This solution will be broadly available to advertisers next year. In the meantime, we have open sourced our framework for <a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Ffacebookresearch%2Ffbpcf&amp;h=AT1lLWuPNpm632uvI03KqLS3D52bKCI9SiVOFjnYQaiAMtDGNvv6Bh1FX61q14wipGjy4G5LJ5WOLtZ6siI3f2HuhJofq4QWaWt04jdAiDhwIpgRdV0ZQejymi1c5tR3w4YXYjmCDiYuoKxH" data-clickable="true" data-ms="{&#34;creative&#34;:&#34;link&#34;,&#34;creative_detail&#34;:&#34;GitHub_ComputationSolutions&#34;}" target="_blank" rel="noreferrer noopener nofollow" data-lynx-mode="hover">Private Computation Solutions</a>, so that anyone in the industry can develop measurement products based on this technology. We’re also exploring applications for on-device learning, a technology that could improve a person’s ad experience by processing data locally on their device rather than sending individual data to a remote server or cloud.</p><p>These technologies will only be successful for people and businesses of all sizes if there is industry collaboration and a shared set of standards. That’s why we are calling on platforms, publishers, developers and other industry participants to work together — on these technologies and other privacy-focused standards and practices. We’re encouraged by the debates and solutions already in development through industry groups like the Partnership for Responsible Addressable Media (PRAM), the World Wide Web Consortium (W3C) and the World Federation of Advertisers (WFA).</p><p>Our engagement with the industry and platforms on these technologies has focused primarily on three areas:</p><ul><li><b>Data use cases</b>: What are advertisers’ most important uses of data that privacy-enhancing technology needs to address? We’ve been working with industry groups to develop lists of use cases for discussion (<a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Fw3c%2Fweb-advertising%2Fblob%2Fmain%2Fsupport_for_advertising_use_cases.md&amp;h=AT1wFEQimsWMUyEMF4Ifpx7qopm9rR2yhmP5gakXOWvXNQwMEwZb2ew23rChj-xR0RJ2tLYAvYfzmpliqPMyk0POK0BIcAh-Q6v-feJelyIrcG_XMs6VWcZvbbd2KLfyKJTSD7KBAOz5JX-R" data-clickable="true" data-ms="{&#34;creative&#34;:&#34;link&#34;,&#34;creative_detail&#34;:&#34;GitHub_W3C&#34;}" target="_blank" rel="noreferrer noopener nofollow" data-lynx-mode="hover">W3C</a> and <a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fwww.responsibleaddressablemedia.com%2Fbusinessusecases&amp;h=AT3pgYNxPXnx3verG0EjkeFncHpv8nmvg94rSFkdU6tz6xJynj2HELdfrqs7AWcdQZkI0R0MhZigKfCaY-wT2KY7988V5skzUVP1egmta8unoqfsTkiId-M5kEXQlUAppHsCccnVMq2B88at" data-clickable="true" data-ms="{&#34;creative&#34;:&#34;link&#34;,&#34;creative_detail&#34;:&#34;PRAM_Link&#34;}" target="_blank" rel="noreferrer noopener nofollow" data-lynx-mode="hover">PRAM</a>), and encourage more industry partners to share their perspective.</li><li><b>Proposals: </b>What proposals can we develop that enable important uses of data while leveraging privacy-enhancing techniques?</li><li><b>Feedback: </b>How can we collaborate to iterate on and improve existing proposals?</li></ul><p>As we work with the industry to answer these questions, we know businesses — especially small businesses — are counting on us to help them navigate through these changes. Many of them don’t have large marketing budgets — or even marketing teams — so they use our tools to deliver and measure their ad campaigns efficiently. We remain committed to helping them grow, while also meeting our mutual customers’ privacy expectations.</p><p>Over the coming months, we’ll engage with clients, partners and the broader industry via educational events to discuss the next era of personalized experiences and the product proposals we hope to develop together. We will provide more details on these events and proposals soon.</p><p>New technologies take time to develop, but we’re confident that through our ongoing work and engagement with the broader industry, we can build solutions that will support a free and open internet.<span></span></p></div></div></div></div></div></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 16:11:10 +0000</pubDate>
      <source>https://www.facebook.com/business/news/building-for-the-future</source>
    </item>
    <item>
      <title>Roland Barthes: Studium and Punctum (2013)</title>
      <link>https://educationmuseum.wordpress.com/2013/03/12/roland-barthes-studium-and-punctum/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___educationmuseum_wordpress_com_2013_03_12_roland-barthes-studium-and-punctum_/image.jpg" /> 
<div id="readability-page-1" class="page"><div>
		<p>Barthes’ <i><a href="http://www.scribd.com/doc/46446178/Roland-Barthes-Camera-Lucida" target="_blank">Camera Lucida</a></i> , first published in 1980, assumes that the automaticity of the camera distinguishes photography from traditional media and has significant implications for how we experience photographs. To address the apparently uncoded level of photographs, which troubles the semiological approach Barthes himself adopted in the early 1960s, <i>Camera Lucida</i> advances a theory of photographic meaning that makes a distinction between the <i>studium </i>and the <i>punctum</i> and highlights the <i>punctum</i> as photography-specific.</p>
<p>The <i>studium </i>indicates historical, social or cultural meanings extracted via semiotic analysis. For example, the photograph taken by Koen Wessing in 1979 (p. 22), portraying a war-torn street in Nicaragua with three armed soldiers patrolling the street and two nuns crossing the section of the street behind the soldiers, could be interpreted as a presence of the traditional oppositions between war and religion, violence and spirituality.</p>
<p><a href="https://educationmuseum.files.wordpress.com/2013/03/wessing.jpg"></a></p>
<p><em>“I understood at once that this photograph’s ‘adventure’ derived from the co-presence of two elements… “</em></p>
<p>KOEN WESSING: NICARAGUA 1979</p>
<p>The <i>punctum</i> points to those features of a photograph that seem to produce or convey a meaning without invoking any recognizable symbolic system. This kind of meaning is unique to the response of the individual viewer of the image. The <i>punctum</i> punctuates<i> </i><i>the studium</i> and as a result pierces its viewer. To allow the <i>punctum</i> effect, the viewer must repudiate all knowledge. Barthes insists that the <i>punctum</i> is not simply the sum of desires projected into the photograph. Instead, it arises from details that are unintended or uncontrolled by the photographer. Photography can be distinguished from painting or drawing in that its apparatus visualizes the world automatically rather than being wholly informed by the interventions of the photographer. The theory of the <i>punctum</i> speaks the indexical nature of the photographic medium. It also accounts for the importance of emotion and subjectivity in interacting with photographs.</p>
<p>Barthes offers many examples to illustrate his definition of the <i>punctum</i>. The first part of <i>Camera Lucida</i> “randomly” looks at mostly famous photographs and describes how certain details operate on the images to bring about the <i>punctum</i>.  The second part of the book, engaging the author’s mourning for his recently deceased mother based on a photograph of her when she was five years old, the <i>Winter Garden</i> photograph, traces the <i>punctum</i> more intensively in terms of how photography represents time. It is possible to say that <i>Camera Lucida</i> dwells on the “that-has-been” of the photograph, which relates directly to death, reveals the ephemeral nature of life and calls us to recognize the singularity of existence. As implied from <i>Camera Lucida</i>, if we fail to appreciate what is specific about photography, we miss the affect that makes a photograph personally meaningful to us. It also means that we miss the chance to discover a kind of truth, the truth of unique being. The <i>Winter Garden</i> photograph, which is not present in the book, where Barthes discovers the truth of his mother’s face, achieves “the impossible science of the unique being” (p. 71). The <i>punctum</i> is not always available in our everyday existence, and Barthes describes it as life-giving.</p>
<p>It should be noted that presenting examples of <i>punctum</i> is an impossible mission. The <i>punctum</i> always turns into the <i>studium</i> when expressed in language. That is also why we may perceive that his examples do not support his theory. Rancière (2009, pp. 111) argues, “what he tells us he sees by the way of the <i>punctum</i> pertains to the same logic as that of the <i>studium</i>.” For instance, faced with a photograph of two retarded children taken by Lewis Hine in a New Jersey institution, Barthes writes: “I … hardly see the monstrous heads and pathetic profiles (which belong to the <i>studium</i>); what I see … is the off-centre detail, the little boy’s huge Danton collar, the girl’s finger bandage …” (p. 51).  Rancière (2009) reminds us that these details are also features of disproportion and “Danton” is the proper name of a person who was decapitated. Barthes cannot dismiss knowledge as he claims. Nonetheless, he is fully aware that a theory of the <i>punctum </i>is not possible in language, “to give examples of <i>punctum</i> is, in a certain fashion, to give myself up” (p. 43).</p>
<p></p>
<p><em>“I dismiss all knowledge, all culture…I see only the boy’s huge Danton collar, the girl’s finger bandage…”</em></p>
<p>LEWIS H. HINE: IDIOT CHILDREN IN AN INSTITUTION. NEW JERSEY, 1924</p>
<p>References</p>
<p>Barthes, R. (2010). <i><a href="http://www.scribd.com/doc/46446178/Roland-Barthes-Camera-Lucida" target="_blank">Camera Lucida: Reflections on photography</a></i>. (R. Howard, Trans.). New York: Hill and Wang.</p>
<p>Rancière, J. (2009). <a href="http://www.scribd.com/doc/77131057/Jacques-Ranciere-The-Emancipated-Spectator-2009-Book-OCR"><i>The emancipated spectator</i></a>. (G. Elliott, Trans.). New York and London: Verso.</p>
			
			
						</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 02:25:48 +0000</pubDate>
      <source>https://educationmuseum.wordpress.com/2013/03/12/roland-barthes-studium-and-punctum/</source>
    </item>
    <item>
      <title>Interactive introduction to game theory and trust</title>
      <link>https://ncase.me/trust/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___ncase_me_trust_/image.jpg" /> 
<div id="readability-page-1" class="page">
	<p>loading...</p> <!-- TRANSLATE THIS -->
	
	
















<!-- Core Engine -->













<!-- Simulations -->






<!-- Slides -->











<!-- Main Code -->

</div>]]></content:encoded>
      <pubDate>Mon, 09 Aug 2021 09:32:19 +0000</pubDate>
      <source>https://ncase.me/trust/</source>
    </item>
    <item>
      <title>ANSI Escape Codes</title>
      <link>https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___gist_github_com_fnky_458719343aabd01cfb17a3a4f7296797/image.jpg" /> 
<div id="readability-page-1" class="page"><div>
  <div id="file-ansi-md">
      
      <div id="file-ansi-md-readme">
    <article itemprop="text">
<p>Standard escape codes are prefixed with <code>Escape</code>:</p>
<ul>
<li>Ctrl-Key: <code>^[</code></li>
<li>Octal: <code>\033</code></li>
<li>Unicode: <code>\u001b</code></li>
<li>Hexadecimal: <code>\x1b</code></li>
<li>Decimal: <code>27</code></li>
</ul>
<p>Followed by the command, somtimes delimited by opening square bracket (<code>[</code>), known as a Control Sequence Introducer (CSI), optionally followed by arguments and the command itself.</p>
<p>Arguments are delimeted by semi colon (<code>;</code>).</p>
<p>For example:</p>
<div><pre><span>\x</span>1b[1<span>;</span>31m  <span><span>#</span> Set style to bold, red foreground.</span></pre></div>
<h2><a id="user-content-general-ascii-codes" aria-hidden="true" href="#general-ascii-codes"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>General ASCII Codes</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>decimal</th>
<th>octal</th>
<th>hex</th>
<th>C-escape</th>
<th>Ctrl-Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BEL</code></td>
<td>7</td>
<td>007</td>
<td>0x07</td>
<td><code>\a</code></td>
<td><code>^G</code></td>
<td>Terminal bell</td>
</tr>
<tr>
<td><code>BS</code></td>
<td>8</td>
<td>010</td>
<td>0x08</td>
<td><code>\b</code></td>
<td><code>^H</code></td>
<td>Backspace</td>
</tr>
<tr>
<td><code>HT</code></td>
<td>9</td>
<td>011</td>
<td>0x09</td>
<td><code>\t</code></td>
<td><code>^I</code></td>
<td>Horizontal TAB</td>
</tr>
<tr>
<td><code>LF</code></td>
<td>10</td>
<td>012</td>
<td>0x0A</td>
<td><code>\n</code></td>
<td><code>^J</code></td>
<td>Linefeed (newline)</td>
</tr>
<tr>
<td><code>VT</code></td>
<td>11</td>
<td>013</td>
<td>0x0B</td>
<td><code>\v</code></td>
<td><code>^K</code></td>
<td>Vertical TAB</td>
</tr>
<tr>
<td><code>FF</code></td>
<td>12</td>
<td>014</td>
<td>0x0C</td>
<td><code>\f</code></td>
<td><code>^L</code></td>
<td>Formfeed (also: New page <code>NP</code>)</td>
</tr>
<tr>
<td><code>CR</code></td>
<td>13</td>
<td>015</td>
<td>0x0D</td>
<td><code>\r</code></td>
<td><code>^M</code></td>
<td>Carriage return</td>
</tr>
<tr>
<td><code>ESC</code></td>
<td>27</td>
<td>033</td>
<td>0x1B</td>
<td><code>\e</code><a href="#escape">*</a></td>
<td><code>^[</code></td>
<td>Escape character</td>
</tr>
<tr>
<td><code>DEL</code></td>
<td>127</td>
<td>177</td>
<td>0x7F</td>
<td><code>&lt;none&gt;</code></td>
<td><code>&lt;none&gt;</code></td>
<td>Delete character</td>
</tr>
</tbody>
</table>

<blockquote>
<p><strong>Note:</strong> Some control escape sequences, like <code>\e</code> for <code>ESC</code>, are not guaranteed to work in all languages and compilers. It is recommended to use the decimal, octal or hex representation as escape code.</p>
</blockquote>
<blockquote>
<p><strong>Note:</strong> The <strong>Ctrl-Key</strong> representation is simply associating the non-printable characters from ASCII code 1 with the printable (letter) characters from ASCII code 65 (&#34;A&#34;). ASCII code 1 would be <code>^A</code> (Ctrl-A), while ASCII code 7 (BEL) would be <code>^G</code> (Ctrl-G). This is a common representation (and input method) and historically comes from one of the VT series of terminals.</p>
</blockquote>
<h2><a id="user-content-cursor-controls" aria-hidden="true" href="#cursor-controls"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Cursor Controls</h2>
<table>
<thead>
<tr>
<th>ESC Code Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ESC[H</code></td>
<td>moves cursor to home position (0, 0)</td>
</tr>
<tr>
<td><code>ESC[{line};{column}H</code> </td>
<td>moves cursor to line #, column #</td>
</tr>
<tr>
<td><code>ESC[#A</code></td>
<td>moves cursor up # lines</td>
</tr>
<tr>
<td><code>ESC[#B</code></td>
<td>moves cursor down # lines</td>
</tr>
<tr>
<td><code>ESC[#C</code></td>
<td>moves cursor right # columns</td>
</tr>
<tr>
<td><code>ESC[#D</code></td>
<td>moves cursor left # columns</td>
</tr>
<tr>
<td><code>ESC[#E</code></td>
<td>moves cursor to beginning of next line, # lines down</td>
</tr>
<tr>
<td><code>ESC[#F</code></td>
<td>moves cursor to beginning of previous line, # lines down</td>
</tr>
<tr>
<td><code>ESC[#G</code></td>
<td>moves cursor to column #</td>
</tr>
<tr>
<td><code>ESC[6n</code></td>
<td>request cursor position (reports as <code>ESC[#;#R</code>)</td>
</tr>
<tr>
<td><code>ESC7</code></td>
<td>save cursor position (DEC)</td>
</tr>
<tr>
<td><code>ESC8</code></td>
<td>restores the cursor to the last saved position (DEC)</td>
</tr>
<tr>
<td><code>ESC[s</code></td>
<td>save cursor position (SCO)</td>
</tr>
<tr>
<td><code>ESC[u</code></td>
<td>restores the cursor to the last saved position (SCO)</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note:</strong> Some sequences, like saving and restoring cursors, are private sequences and are not standardized. While some terminal emulators (i.e. xterm and derived) support both SCO and DEC sequences, they are likely to have different functionality. It is therefore recommended to use DEC sequences.</p>
</blockquote>
<h2><a id="user-content-erase-functions" aria-hidden="true" href="#erase-functions"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Erase Functions</h2>
<table>
<thead>
<tr>
<th>ESC Code Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ESC[J</code></td>
<td>clears the screen</td>
</tr>
<tr>
<td><code>ESC[0J</code></td>
<td>clears from cursor until end of screen</td>
</tr>
<tr>
<td><code>ESC[1J</code></td>
<td>clears from cursor to beginning of screen</td>
</tr>
<tr>
<td><code>ESC[2J</code></td>
<td>clears entire screen</td>
</tr>
<tr>
<td><code>ESC[K</code></td>
<td>clears the current line</td>
</tr>
<tr>
<td><code>ESC[0K</code></td>
<td>clears from cursor to end of line</td>
</tr>
<tr>
<td><code>ESC[1K</code></td>
<td>clears from cursor to start of line</td>
</tr>
<tr>
<td><code>ESC[2K</code></td>
<td>clears entire line</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-colors--graphics-mode" aria-hidden="true" href="#colors--graphics-mode"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Colors / Graphics Mode</h2>
<table>
<thead>
<tr>
<th>ESC Code Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ESC[1;34;{...}m</code></td>
<td>Set graphics modes for cell, separated by semicolon (<code>;</code>).</td>
</tr>
<tr>
<td><code>ESC[0m</code></td>
<td>reset all modes (styles and colors)</td>
</tr>
<tr>
<td><code>ESC[1m</code></td>
<td>set bold mode.</td>
</tr>
<tr>
<td><code>ESC[2m</code></td>
<td>set dim/faint mode.</td>
</tr>
<tr>
<td><code>ESC[3m</code></td>
<td>set italic mode.</td>
</tr>
<tr>
<td><code>ESC[4m</code></td>
<td>set underline mode.</td>
</tr>
<tr>
<td><code>ESC[5m</code></td>
<td>set blinking mode</td>
</tr>
<tr>
<td><code>ESC[7m</code></td>
<td>set inverse/reverse mode</td>
</tr>
<tr>
<td><code>ESC[8m</code></td>
<td>set invisible mode</td>
</tr>
<tr>
<td><code>ESC[9m</code></td>
<td>set strikethrough mode.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note:</strong> Some terminals may not support some of the graphic mode sequences listed above.</p>
</blockquote>
<h3><a id="user-content-color-codes" aria-hidden="true" href="#color-codes"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Color codes</h3>
<p>Most terminals support 8 and 16 colors, as well as 256 (8-bit) colors. These colors are set by the user, but have commonly defined meanings.</p>
<h4><a id="user-content-8-16-colors" aria-hidden="true" href="#8-16-colors"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>8-16 Colors</h4>
<table>
<thead>
<tr>
<th>Color Name</th>
<th>Foreground Color Code</th>
<th>Background Color Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>Black</td>
<td><code>30</code></td>
<td><code>40</code></td>
</tr>
<tr>
<td>Red</td>
<td><code>31</code></td>
<td><code>41</code></td>
</tr>
<tr>
<td>Green</td>
<td><code>32</code></td>
<td><code>42</code></td>
</tr>
<tr>
<td>Yellow</td>
<td><code>33</code></td>
<td><code>43</code></td>
</tr>
<tr>
<td>Blue</td>
<td><code>34</code></td>
<td><code>44</code></td>
</tr>
<tr>
<td>Magenta</td>
<td><code>35</code></td>
<td><code>45</code></td>
</tr>
<tr>
<td>Cyan</td>
<td><code>36</code></td>
<td><code>46</code></td>
</tr>
<tr>
<td>White</td>
<td><code>37</code></td>
<td><code>47</code></td>
</tr>
<tr>
<td>Reset</td>
<td><code>0</code></td>
<td><code>0</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note:</strong> the <em>Reset</em> color is the reset code that resets <em>all</em> colors and text effects.</p>
</blockquote>
<p>Most terminals, apart from the basic set of 8 colors, also support the &#34;bright&#34; or &#34;bold&#34; colors. These have their own set of codes, mirroring the normal colors, but with an additional <code>;1</code> in their codes:</p>
<div><pre><span><span>#</span> Set style to bold, red foreground.</span>
<span>\x</span>1b[1<span>;</span>31mHello
<span><span>#</span> Set style to dimmed white foreground with red background.</span>
<span>\x</span>1b[2<span>;</span>37<span>;</span>41mWorld</pre></div>
<h4><a id="user-content-256-colors" aria-hidden="true" href="#256-colors"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>256 Colors</h4>
<p>The following escape codes tells the terminal to use the given color ID:</p>
<table>
<thead>
<tr>
<th>ESC Code Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ESC[38;5;{ID}m</code></td>
<td>Set foreground color.</td>
</tr>
<tr>
<td><code>ESC[48;5;{ID}m</code></td>
<td>Set background color.</td>
</tr>
</tbody>
</table>
<p>Where <code>{ID}</code> should be replaced with the color index from 0 to 255 of the following color table:</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/995050/47952855-ecb12480-df75-11e8-89d4-ac26c50e80b9.png"></a></p>
<p>The table starts with the original 16 colors (0-15).</p>
<p>The proceeding 216 colors (16-231) or formed by a 3bpc RGB value offset by 16, packed into a single value.</p>
<p>The final 24 colors (232-255) are grayscale starting from a shade slighly lighter than black, ranging up to shade slightly darker than white.</p>
<p>Some emulators interpret these steps as linear increments (<code>256 / 24</code>) on all three channels, although some emulators may explicitly define these values.</p>
<h4><a id="user-content-rgb-colors" aria-hidden="true" href="#rgb-colors"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>RGB Colors</h4>
<p>More modern terminals supports <a href="https://en.wikipedia.org/wiki/Color_depth#True_color_.2824-bit.29" rel="nofollow">Truecolor</a> (24-bit RGB), which allows you to set foreground and background colors using RGB.</p>
<p>These escape sequences are usually not well documented.</p>
<table>
<thead>
<tr>
<th>ESC Code Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ESC[38;2;{r};{g};{b}m</code></td>
<td>Set foreground color as RGB.</td>
</tr>
<tr>
<td><code>ESC[48;2;{r};{g};{b}m</code></td>
<td>Set background color as RGB.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Note that <code>;38</code> and <code>;48</code> corresponds to the 16 color sequence and is interpreted by the terminal to set the foreground and background color respectively. Where as <code>;2</code> and <code>;5</code> sets the color format.</p>
</blockquote>
<h2><a id="user-content-screen-modes" aria-hidden="true" href="#screen-modes"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Screen Modes</h2>
<h3><a id="user-content-set-mode" aria-hidden="true" href="#set-mode"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Set Mode</h3>
<table>
<thead>
<tr>
<th>ESC Code Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ESC[={value}h</code></td>
<td>Changes the screen width or type to the mode specified by value.</td>
</tr>
<tr>
<td><code>ESC[=0h</code></td>
<td>40 x 25 monochrome (text)</td>
</tr>
<tr>
<td><code>ESC[=1h</code></td>
<td>40 x 25 color (text)</td>
</tr>
<tr>
<td><code>ESC[=2h</code></td>
<td>80 x 25 monochrome (text)</td>
</tr>
<tr>
<td><code>ESC[=3h</code></td>
<td>80 x 25 color (text)</td>
</tr>
<tr>
<td><code>ESC[=4h</code></td>
<td>320 x 200 4-color (graphics)</td>
</tr>
<tr>
<td><code>ESC[=5h</code></td>
<td>320 x 200 monochrome (graphics)</td>
</tr>
<tr>
<td><code>ESC[=6h</code></td>
<td>640 x 200 monochrome (graphics)</td>
</tr>
<tr>
<td><code>ESC[=7h</code></td>
<td>Enables line wrapping</td>
</tr>
<tr>
<td><code>ESC[=13h</code></td>
<td>320 x 200 color (graphics)</td>
</tr>
<tr>
<td><code>ESC[=14h</code></td>
<td>640 x 200 color (16-color graphics)</td>
</tr>
<tr>
<td><code>ESC[=15h</code></td>
<td>640 x 350 monochrome (2-color graphics)</td>
</tr>
<tr>
<td><code>ESC[=16h</code></td>
<td>640 x 350 color (16-color graphics)</td>
</tr>
<tr>
<td><code>ESC[=17h</code></td>
<td>640 x 480 monochrome (2-color graphics)</td>
</tr>
<tr>
<td><code>ESC[=18h</code></td>
<td>640 x 480 color (16-color graphics)</td>
</tr>
<tr>
<td><code>ESC[=19h</code></td>
<td>320 x 200 color (256-color graphics)</td>
</tr>
<tr>
<td><code>ESC[={value}l</code></td>
<td>Resets the mode by using the same values that Set Mode uses, except for 7, which disables line wrapping. The last character in this escape sequence is a lowercase L.</td>
</tr>
</tbody>
</table>
<h3><a id="user-content-common-private-modes" aria-hidden="true" href="#common-private-modes"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Common Private Modes</h3>
<p>These are some examples of private modes, which are not defined by the specification, but are implemented in most terminals.</p>
<table>
<thead>
<tr>
<th>ESC Code Sequence</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ESC[?25l</code></td>
<td>make cursor invisible</td>
</tr>
<tr>
<td><code>ESC[?25h</code></td>
<td>make cursor visible</td>
</tr>
<tr>
<td><code>ESC[?47l</code></td>
<td>restore screen</td>
</tr>
<tr>
<td><code>ESC[?47h</code></td>
<td>save screen</td>
</tr>
<tr>
<td><code>ESC[?1049h</code></td>
<td>enables the alternative buffer</td>
</tr>
<tr>
<td><code>ESC[?1049l</code></td>
<td>disables the alternative buffer</td>
</tr>
</tbody>
</table>
<p>Refer to the <a href="https://invisible-island.net/xterm/ctlseqs/ctlseqs.html" rel="nofollow">XTerm Control Sequences</a> for a more in-depth list of private modes defined by XTerm.</p>
<blockquote>
<p>Note: While these modes may be supported by the most terminals, some may not work in multiplexers like tmux.</p>
</blockquote>
<h3><a id="user-content-keyboard-strings" aria-hidden="true" href="#keyboard-strings"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Keyboard Strings</h3>
<div><pre>ESC[{code}<span>;</span>{string}<span>;</span>{...}p</pre></div>
<p>Redefines a keyboard key to a specified string.</p>
<p>The parameters for this escape sequence are defined as follows:</p>
<ul>
<li>
<p><code>code</code> is one or more of the values listed in the following table. These values represent keyboard keys and key combinations. When using these values in a command, you must type the semicolons shown in this table in addition to the semicolons required by the escape sequence. The codes in parentheses are not available on some keyboards. <code>ANSI.SYS</code> will not interpret the codes in parentheses for those keyboards unless you specify the <code>/X</code> switch in the <code>DEVICE</code> command for <code>ANSI.SYS</code>.</p>
</li>
<li>
<p><code>string</code> is either the ASCII code for a single character or a string contained in quotation marks. For example, both 65 and &#34;A&#34; can be used to represent an uppercase A.</p>
</li>
</ul>
<blockquote>
<p><strong>IMPORTANT:</strong> Some of the values in the following table are not valid for all computers. Check your computer&#39;s documentation for values that are different.</p>
</blockquote>
<h4><a id="user-content-list-of-keyboard-strings" aria-hidden="true" href="#list-of-keyboard-strings"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>List of keyboard strings</h4>
<table>
<thead>
<tr>
<th>Key</th>
<th>Code</th>
<th>SHIFT+code</th>
<th>CTRL+code</th>
<th>ALT+code</th>
</tr>
</thead>
<tbody>
<tr>
<td>F1</td>
<td>0;59</td>
<td>0;84</td>
<td>0;94</td>
<td>0;104</td>
</tr>
<tr>
<td>F2</td>
<td>0;60</td>
<td>0;85</td>
<td>0;95</td>
<td>0;105</td>
</tr>
<tr>
<td>F3</td>
<td>0;61</td>
<td>0;86</td>
<td>0;96</td>
<td>0;106</td>
</tr>
<tr>
<td>F4</td>
<td>0;62</td>
<td>0;87</td>
<td>0;97</td>
<td>0;107</td>
</tr>
<tr>
<td>F5</td>
<td>0;63</td>
<td>0;88</td>
<td>0;98</td>
<td>0;108</td>
</tr>
<tr>
<td>F6</td>
<td>0;64</td>
<td>0;89</td>
<td>0;99</td>
<td>0;109</td>
</tr>
<tr>
<td>F7</td>
<td>0;65</td>
<td>0;90</td>
<td>0;100</td>
<td>0;110</td>
</tr>
<tr>
<td>F8</td>
<td>0;66</td>
<td>0;91</td>
<td>0;101</td>
<td>0;111</td>
</tr>
<tr>
<td>F9</td>
<td>0;67</td>
<td>0;92</td>
<td>0;102</td>
<td>0;112</td>
</tr>
<tr>
<td>F10</td>
<td>0;68</td>
<td>0;93</td>
<td>0;103</td>
<td>0;113</td>
</tr>
<tr>
<td>F11</td>
<td>0;133</td>
<td>0;135</td>
<td>0;137</td>
<td>0;139</td>
</tr>
<tr>
<td>F12</td>
<td>0;134</td>
<td>0;136</td>
<td>0;138</td>
<td>0;140</td>
</tr>
<tr>
<td>HOME (num keypad)</td>
<td>0;71</td>
<td>55</td>
<td>0;119</td>
<td>--</td>
</tr>
<tr>
<td>UP ARROW (num keypad)</td>
<td>0;72</td>
<td>56</td>
<td>(0;141)</td>
<td>--</td>
</tr>
<tr>
<td>PAGE UP (num keypad)</td>
<td>0;73</td>
<td>57</td>
<td>0;132</td>
<td>--</td>
</tr>
<tr>
<td>LEFT ARROW (num keypad)</td>
<td>0;75</td>
<td>52</td>
<td>0;115</td>
<td>--</td>
</tr>
<tr>
<td>RIGHT ARROW (num keypad)</td>
<td>0;77</td>
<td>54</td>
<td>0;116</td>
<td>--</td>
</tr>
<tr>
<td>END (num keypad)</td>
<td>0;79</td>
<td>49</td>
<td>0;117</td>
<td>--</td>
</tr>
<tr>
<td>DOWN ARROW (num keypad)</td>
<td>0;80</td>
<td>50</td>
<td>(0;145)</td>
<td>--</td>
</tr>
<tr>
<td>PAGE DOWN (num keypad)</td>
<td>0;81</td>
<td>51</td>
<td>0;118</td>
<td>--</td>
</tr>
<tr>
<td>INSERT (num keypad)</td>
<td>0;82</td>
<td>48</td>
<td>(0;146)</td>
<td>--</td>
</tr>
<tr>
<td>DELETE (num keypad)</td>
<td>0;83</td>
<td>46</td>
<td>(0;147)</td>
<td>--</td>
</tr>
<tr>
<td>HOME</td>
<td>(224;71)</td>
<td>(224;71)</td>
<td>(224;119)</td>
<td>(224;151)</td>
</tr>
<tr>
<td>UP ARROW</td>
<td>(224;72)</td>
<td>(224;72)</td>
<td>(224;141)</td>
<td>(224;152)</td>
</tr>
<tr>
<td>PAGE UP</td>
<td>(224;73)</td>
<td>(224;73)</td>
<td>(224;132)</td>
<td>(224;153)</td>
</tr>
<tr>
<td>LEFT ARROW</td>
<td>(224;75)</td>
<td>(224;75)</td>
<td>(224;115)</td>
<td>(224;155)</td>
</tr>
<tr>
<td>RIGHT ARROW</td>
<td>(224;77)</td>
<td>(224;77)</td>
<td>(224;116)</td>
<td>(224;157)</td>
</tr>
<tr>
<td>END</td>
<td>(224;79)</td>
<td>(224;79)</td>
<td>(224;117)</td>
<td>(224;159)</td>
</tr>
<tr>
<td>DOWN ARROW</td>
<td>(224;80)</td>
<td>(224;80)</td>
<td>(224;145)</td>
<td>(224;154)</td>
</tr>
<tr>
<td>PAGE DOWN</td>
<td>(224;81)</td>
<td>(224;81)</td>
<td>(224;118)</td>
<td>(224;161)</td>
</tr>
<tr>
<td>INSERT</td>
<td>(224;82)</td>
<td>(224;82)</td>
<td>(224;146)</td>
<td>(224;162)</td>
</tr>
<tr>
<td>DELETE</td>
<td>(224;83)</td>
<td>(224;83)</td>
<td>(224;147)</td>
<td>(224;163)</td>
</tr>
<tr>
<td>PRINT SCREEN</td>
<td>--</td>
<td>--</td>
<td>0;114</td>
<td>--</td>
</tr>
<tr>
<td>PAUSE/BREAK</td>
<td>--</td>
<td>--</td>
<td>0;0</td>
<td>--</td>
</tr>
<tr>
<td>BACKSPACE</td>
<td>8</td>
<td>8</td>
<td>127</td>
<td>(0)</td>
</tr>
<tr>
<td>ENTER</td>
<td>13</td>
<td>--</td>
<td>10</td>
<td>(0</td>
</tr>
<tr>
<td>TAB</td>
<td>9</td>
<td>0;15</td>
<td>(0;148)</td>
<td>(0;165)</td>
</tr>
<tr>
<td>NULL</td>
<td>0;3</td>
<td>--</td>
<td>--</td>
<td>--</td>
</tr>
<tr>
<td>A</td>
<td>97</td>
<td>65</td>
<td>1</td>
<td>0;30</td>
</tr>
<tr>
<td>B</td>
<td>98</td>
<td>66</td>
<td>2</td>
<td>0;48</td>
</tr>
<tr>
<td>C</td>
<td>99</td>
<td>66</td>
<td>3</td>
<td>0;46</td>
</tr>
<tr>
<td>D</td>
<td>100</td>
<td>68</td>
<td>4</td>
<td>0;32</td>
</tr>
<tr>
<td>E</td>
<td>101</td>
<td>69</td>
<td>5</td>
<td>0;18</td>
</tr>
<tr>
<td>F</td>
<td>102</td>
<td>70</td>
<td>6</td>
<td>0;33</td>
</tr>
<tr>
<td>G</td>
<td>103</td>
<td>71</td>
<td>7</td>
<td>0;34</td>
</tr>
<tr>
<td>H</td>
<td>104</td>
<td>72</td>
<td>8</td>
<td>0;35</td>
</tr>
<tr>
<td>I</td>
<td>105</td>
<td>73</td>
<td>9</td>
<td>0;23</td>
</tr>
<tr>
<td>J</td>
<td>106</td>
<td>74</td>
<td>10</td>
<td>0;36</td>
</tr>
<tr>
<td>K</td>
<td>107</td>
<td>75</td>
<td>11</td>
<td>0;37</td>
</tr>
<tr>
<td>L</td>
<td>108</td>
<td>76</td>
<td>12</td>
<td>0;38</td>
</tr>
<tr>
<td>M</td>
<td>109</td>
<td>77</td>
<td>13</td>
<td>0;50</td>
</tr>
<tr>
<td>N</td>
<td>110</td>
<td>78</td>
<td>14</td>
<td>0;49</td>
</tr>
<tr>
<td>O</td>
<td>111</td>
<td>79</td>
<td>15</td>
<td>0;24</td>
</tr>
<tr>
<td>P</td>
<td>112</td>
<td>80</td>
<td>16</td>
<td>0;25</td>
</tr>
<tr>
<td>Q</td>
<td>113</td>
<td>81</td>
<td>17</td>
<td>0;16</td>
</tr>
<tr>
<td>R</td>
<td>114</td>
<td>82</td>
<td>18</td>
<td>0;19</td>
</tr>
<tr>
<td>S</td>
<td>115</td>
<td>83</td>
<td>19</td>
<td>0;31</td>
</tr>
<tr>
<td>T</td>
<td>116</td>
<td>84</td>
<td>20</td>
<td>0;20</td>
</tr>
<tr>
<td>U</td>
<td>117</td>
<td>85</td>
<td>21</td>
<td>0;22</td>
</tr>
<tr>
<td>V</td>
<td>118</td>
<td>86</td>
<td>22</td>
<td>0;47</td>
</tr>
<tr>
<td>W</td>
<td>119</td>
<td>87</td>
<td>23</td>
<td>0;17</td>
</tr>
<tr>
<td>X</td>
<td>120</td>
<td>88</td>
<td>24</td>
<td>0;45</td>
</tr>
<tr>
<td>Y</td>
<td>121</td>
<td>89</td>
<td>25</td>
<td>0;21</td>
</tr>
<tr>
<td>Z</td>
<td>122</td>
<td>90</td>
<td>26</td>
<td>0;44</td>
</tr>
<tr>
<td>1</td>
<td>49</td>
<td>33</td>
<td>--</td>
<td>0;120</td>
</tr>
<tr>
<td>2</td>
<td>50</td>
<td>64</td>
<td>0</td>
<td>0;121</td>
</tr>
<tr>
<td>3</td>
<td>51</td>
<td>35</td>
<td>--</td>
<td>0;122</td>
</tr>
<tr>
<td>4</td>
<td>52</td>
<td>36</td>
<td>--</td>
<td>0;123</td>
</tr>
<tr>
<td>5</td>
<td>53</td>
<td>37</td>
<td>--</td>
<td>0;124</td>
</tr>
<tr>
<td>6</td>
<td>54</td>
<td>94</td>
<td>30</td>
<td>0;125</td>
</tr>
<tr>
<td>7</td>
<td>55</td>
<td>38</td>
<td>--</td>
<td>0;126</td>
</tr>
<tr>
<td>8</td>
<td>56</td>
<td>42</td>
<td>--</td>
<td>0;126</td>
</tr>
<tr>
<td>9</td>
<td>57</td>
<td>40</td>
<td>--</td>
<td>0;127</td>
</tr>
<tr>
<td>0</td>
<td>48</td>
<td>41</td>
<td>--</td>
<td>0;129</td>
</tr>
<tr>
<td>-</td>
<td>45</td>
<td>95</td>
<td>31</td>
<td>0;130</td>
</tr>
<tr>
<td>=</td>
<td>61</td>
<td>43</td>
<td>---</td>
<td>0;131</td>
</tr>
<tr>
<td>[</td>
<td>91</td>
<td>123</td>
<td>27</td>
<td>0;26</td>
</tr>
<tr>
<td>]</td>
<td>93</td>
<td>125</td>
<td>29</td>
<td>0;27</td>
</tr>
<tr>
<td></td>
<td>92</td>
<td>124</td>
<td>28</td>
<td>0;43</td>
</tr>
<tr>
<td>;</td>
<td>59</td>
<td>58</td>
<td>--</td>
<td>0;39</td>
</tr>
<tr>
<td>&#39;</td>
<td>39</td>
<td>34</td>
<td>--</td>
<td>0;40</td>
</tr>
<tr>
<td>,</td>
<td>44</td>
<td>60</td>
<td>--</td>
<td>0;51</td>
</tr>
<tr>
<td>.</td>
<td>46</td>
<td>62</td>
<td>--</td>
<td>0;52</td>
</tr>
<tr>
<td>/</td>
<td>47</td>
<td>63</td>
<td>--</td>
<td>0;53</td>
</tr>
<tr>
<td>`</td>
<td>96</td>
<td>126</td>
<td>--</td>
<td>(0;41)</td>
</tr>
<tr>
<td>ENTER (keypad)</td>
<td>13</td>
<td>--</td>
<td>10</td>
<td>(0;166)</td>
</tr>
<tr>
<td>/ (keypad)</td>
<td>47</td>
<td>47</td>
<td>(0;142)</td>
<td>(0;74)</td>
</tr>
<tr>
<td>* (keypad)</td>
<td>42</td>
<td>(0;144)</td>
<td>(0;78)</td>
<td>--</td>
</tr>
<tr>
<td>- (keypad)</td>
<td>45</td>
<td>45</td>
<td>(0;149)</td>
<td>(0;164)</td>
</tr>
<tr>
<td>+ (keypad)</td>
<td>43</td>
<td>43</td>
<td>(0;150)</td>
<td>(0;55)</td>
</tr>
<tr>
<td>5 (keypad)</td>
<td>(0;76)</td>
<td>53</td>
<td>(0;143)</td>
<td>--</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-resources" aria-hidden="true" href="#resources"><svg viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Resources</h2>
<ul>
<li><a href="https://en.wikipedia.org/wiki/ANSI_escape_code" rel="nofollow">Wikipedia: ANSI escape code</a></li>
<li><a href="http://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html" rel="nofollow">Build your own Command Line with ANSI escape codes</a></li>
<li><a href="http://ascii-table.com/ansi-escape-sequences.php" rel="nofollow">ascii-table: ANSI Escape sequences</a></li>
<li><a href="https://bluesock.org/~willkg/dev/ansi.html" rel="nofollow">bluesock: ansi codes</a></li>
<li><a href="http://wiki.bash-hackers.org/scripting/terminalcodes" rel="nofollow">bash-hackers: Terminal Codes (ANSI/VT100) introduction</a></li>
<li><a href="https://invisible-island.net/xterm/ctlseqs/ctlseqs.html" rel="nofollow">XTerm Control Sequences</a></li>
</ul>
</article>
  </div>

  </div>
</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 17:45:44 +0000</pubDate>
      <source>https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797</source>
    </item>
    <item>
      <title>Mastering Web Scraping in Python: Crawling from Scratch</title>
      <link>https://www.zenrows.com/blog/mastering-web-scraping-in-python-crawling-from-scratch</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___www_zenrows_com_blog_mastering-web-scraping-in-python-crawling-from-scratch/image.jpg" /> 
<div id="readability-page-1" class="page"><div> <p> Have you ever tried to crawl thousands of pages? Scale that even further? Handle and recover from system failures? </p> <p> After seeing how to <a href="https://www.zenrows.com/blog/mastering-web-scraping-in-python-from-zero-to-hero">extract content from a website</a> and <a href="https://www.zenrows.com/blog/stealth-web-scraping-in-python-avoid-blocking-like-a-ninja">how to avoid being blocked</a>, we&#39;ll take a look at the crawling process. To get data at scale, getting a few URLs by hand is not an option. We need to use an automated system that will discover new pages and visit them. </p> <p> <i>Disclaimer: for real-world usage, find suitable software. Below is more info on that. This guide pretends to be an introduction to how the crawling process works and doing the basics. But there are tons of details that need addressing.</i> </p> <h3 id="prerequisites">Prerequisites</h3> <div> <p> For the code to work, you will need <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">python3 installed</a>. Some systems have it pre-installed. After that, install all the necessary libraries by running <code>pip install</code>. </p> <pre><code>pip install requests beautifulsoup4 </code></pre> </div> <h2 id="how-to-get-all-the-links-on-the-page">How to Get all the Links on the Page</h2> <p> From the first article in the series, we know that getting data from a webpage is easy with <code>requests.get</code> and <code>BeautifulSoup</code>. We will start by finding the links in a <a href="https://scrapeme.live/shop/page/1/" target="_blank" rel="noopener noreferrer nofollow">fake shop prepared for testing scraping</a>. </p> <p> The basics to get the content are the same. Then we get all the links on the paginator and add the links to a <code>set</code>. We chose set to avoid duplicates. As you can see, we hardcoded the selector for the links, meaning that it is not a universal solution. For the moment, we&#39;ll focus on the page at hand. </p> <pre><code>import requests 
from bs4 import BeautifulSoup 
 
to_visit = set() 
response = requests.get(&#39;https://scrapeme.live/shop/page/1/&#39;) 
soup = BeautifulSoup(response.content, &#39;html.parser&#39;) 
for a in soup.select(&#39;a.page-numbers&#39;): 
	to_visit.add(a.get(&#39;href&#39;)) 
 
print(to_visit) 
# {&#39;https://scrapeme.live/shop/page/2/&#39;, &#39;.../3/&#39;, &#39;.../46/&#39;, &#39;.../48/&#39;, &#39;.../4/&#39;, &#39;.../47/&#39;} </code></pre> <h2 id="one-url-at-a-time,-sequential">One URL at a Time, Sequential</h2> <p> Now we have several links but no way to visit them all. We need some kind of loop that will execute the extracting part for every URL available to fix that. Maybe the most straightforward way, although not the scalable one, is to use the same loop. But before that, there is a missing piece: avoid crawling the same page twice. </p> <p> We&#39;ll keep track of already visited links in another <code>set</code> and avoid duplicates by checking them before every request. In this case, <code>to_visit</code> is not being used, just maintained for demo purposes. To prevent visiting every page, we&#39;ll also add a <code>max_visits</code> variable. For now, we ignore the <code>robots.txt</code> file, but we have to be civil and nice. </p> <pre><code>visited = set() 
to_visit = set() 
max_visits = 3 
 
def crawl(url): 
	print(&#39;Crawl: &#39;, url) 
	response = requests.get(url) 
	soup = BeautifulSoup(response.content, &#39;html.parser&#39;) 
	visited.add(url) 
	for a in soup.select(&#39;a.page-numbers&#39;): 
		link = a.get(&#39;href&#39;) 
		to_visit.add(link) 
		if link not in visited and len(visited) &lt; max_visits: 
			crawl(link) 
 
crawl(&#39;https://scrapeme.live/shop/page/1/&#39;) 
 
print(visited) # {&#39;.../3/&#39;, &#39;.../1/&#39;, &#39;.../2/&#39;} 
print(to_visit) # { ... new ones added, such as pages 5 and 6 ... } </code></pre> <p> It is a recursive function with two exit conditions: there are no more links to visit, or we reached the maximum visits. In either case, it will exit and print the visited links and the ones pending. </p> <p> It is important to note that the same link can be added many times, but it will only get crawled once. In a big project, the idea would be to set a timer and only request each URL after a few days. </p> <h2 id="separation-of-concerns">Separation of Concerns</h2> <p> We said this is not about extracting or parsing content, but we need to separate concerns before it becomes entangled. For that, we&#39;ll create three helper functions: get HTML, extract links, and extract content. As their names imply, each of them will perform one of the main tasks of web scraping. </p> <p> The first one will get the HTML from a URL using the same library as earlier but wrapping it in a <code>try</code> block for security. </p> <pre><code>def get_html(url): 
	try: 
		return requests.get(url).content 
	except Exception as e: 
		print(e) 
		return &#39;&#39; </code></pre> <p> The second one, extracting the links, will work just as before. </p> <pre><code>def extract_links(soup): 
	return [a.get(&#39;href&#39;) for a in soup.select(&#39;a.page-numbers&#39;) 
		if a.get(&#39;href&#39;) not in visited] </code></pre> <p> The last one will be the placeholder for extracting the content we want. Since we are simplifying this part, it will get basic info from the same page, no need to enter on the detail page. </p> <pre><code>def extract_content(soup): 
	for product in soup.select(&#39;.product&#39;): 
		print(product.find(&#39;h2&#39;).text) 
 # Bulbasaur, Ivysaur, ... </code></pre> <p> Assembling it all together. </p> <pre><code>def crawl(url): 
	if not url or url in visited: 
		return 
	print(&#39;Crawl: &#39;, url) 
	visited.add(url) 
	html = get_html(url) 
	soup = BeautifulSoup(html, &#39;html.parser&#39;) 
	extract_content(soup) 
	links = extract_links(soup) 
	to_visit.update(links) </code></pre> <p> Noticed something different? The crawling logic is not attached to the link extracting part. Each of the helpers handles a single piece. And the <code>crawl</code> function acts as an orchestrator by calling them and applying the results. </p> <p> As the project evolves, all these parts could be moved to files or passed as parameters/callbacks. We can generalize the use cases if the core is independent of the selected page and content. </p> <p> Are we missing something? 🤔 </p> <pre><code>to_visit.add(&#39;https://scrapeme.live/shop/page/1/&#39;) 
 
while (len(to_visit) &gt; 0 and len(visited) &lt; max_visits): 
	crawl(to_visit.pop()) </code></pre> <h2 id="parallel-requests">Parallel Requests</h2> <p> There is a significant part missing: parallelism. HTTP request handlers are idle most of the time, waiting for the response to come back. It means that we can send several of them at the same time without overloading the machine. And then process them as they came back. </p> <p> It is relevant to note that this approach only works if the order is not imperative. But we are already using sets, which according to <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" target="_blank" rel="noopener noreferrer nofollow">Python&#39;s definition</a>, &#34;a set is an <strong>unordered collection</strong> with no duplicate elements.&#34; Meaning that our process was unordered from the start. </p> <p> Before diving deep into the parallel requests, we have to understand a couple of concepts: synchronization and queues. </p> <h3 id="synchronized-queues">Synchronized Queues</h3> <div><p> There is a huge risk in threaded or <a href="https://en.wikipedia.org/wiki/Parallel_computing" target="_blank" rel="noopener noreferrer nofollow">parallel computing</a>: modifying the same variables or data structures from different threads. It means two of our requests would be adding new links to a set (i.e., <code>to_visit</code>). Since the data structure is not protected, both could read and write it like this: </p><ul> <li>Both read its content, i.e. <code>(1, 2, 3)</code> <i>(simplified)</i></li> <li>Thread one adds links to pages <code>4, 5</code>: <code>(1, 2, 3, 4, 5)</code></li> <li>Thread two adds links to pages <code>6, 7</code>: <code>(1, 2, 3, 6, 7)</code></li> </ul><p> How did this happen? When thread two wrote the new links, it added them to a set with only three elements. </p></div> <p> What can we do to avoid these conflicts? Synchronization or locking. From the <a href="https://docs.python.org/3/library/queue.html" target="_blank" rel="noopener noreferrer nofollow">docs</a>: &#34;queues use locks to temporarily block competing threads.&#34; It means that thread one would acquire a lock on the set, read and write without any problem, and then release the lock automatically. Meanwhile, thread two would have to wait until the lock becomes available. Only then read and write. </p> <pre><code>import queue 
 
q = queue.Queue() 
q.put(&#39;https://scrapeme.live/shop/page/1/&#39;) 
 
def crawl(url): 
	... 
	links = extract_links(soup) 
	for link in links: 
		if link not in visited: 
			q.put(link) </code></pre> <p> For the moment, it does not work. Do not worry. The changes in the existing code are minimum: we replaced <code>to_visit</code> with a queue. But queues need handlers or workers to process their content. With the above, we have created a Queue and added an item (the original one). We also modified the <code>crawl</code> function to put links in the queue instead of updating the previous set. </p> <p> We&#39;ll create a worker using the <a href="https://docs.python.org/3/library/threading.html" target="_blank" rel="noopener noreferrer nofollow">threading module</a> to process that queue. </p> <pre><code>from threading import Thread 
 
def queue_worker(i, q): 
	while True: 
		url = q.get() # Get an item from the queue, blocks until one is available 
		print(&#39;to process:&#39;, url) 
		q.task_done() # Notifies the queue that the item has been processed 
 
q = queue.Queue() 
Thread(target=queue_worker, args=(0, q), daemon=True).start() 
 
q.put(&#39;https://scrapeme.live/shop/page/1/&#39;) 
q.join() # Blocks until all items in the queue are processed and marked as done 
print(&#39;Done&#39;) 
 
# to process: https://scrapeme.live/shop/page/1/ 
# Done </code></pre> <p> We defined a new function that will handle the queued items. For that, we enter into an infinite loop that will stop when all the processing finishes. </p> <p> Now we need two more things: process items and create more threads (it would not be parallel with just one, would it?). </p> <pre><code>def queue_worker(i, q): 
	while True: 
		url = q.get() 
		if (len(visited) &lt; max_visits and url not in visited): 
			crawl(url) 
		q.task_done() 
 
q = queue.Queue() 
num_workers = 4 
for i in range(num_workers): 
	Thread(target=queue_worker, args=(i, q), daemon=True).start() </code></pre> <p> Be careful when running it since big numbers in <code>num_workers</code> and <code>max_visits</code> would start lots of requests. If the script had some minor bug for any reason, you could perform hundreds of requests in a few seconds. </p> <h3 id="performance">Performance</h3> <div><p> We run benchmarks with different settings only as a reference. </p><ul> <li>Sequential requests: 29,32s</li> <li>Queue with one worker (<code>num_workers = 1</code>): 29,41s</li> <li>Queue with two workers (<code>num_workers = 2</code>): 20,05s</li> <li>Queue with five workers (<code>num_workers = 5</code>): 11,97s</li> <li>Queue with ten workers (<code>num_workers = 10</code>): 12,02s</li> </ul><p> There is almost no difference between sequential requests and having one worker. Threads carry some overhead, but it is barely noticeable here. It would require a more severe load test. Once we start adding workers, that overhead pays off. We could add even more, but it won&#39;t affect the outcome since they will be idle most of the time. </p></div> <h2 id="distributed-processing">Distributed Processing</h2> <p> We won&#39;t cover the following scale-up step: distributing the crawling process among several servers. <a href="https://docs.python.org/3/library/multiprocessing.html#using-a-remote-manager" target="_blank" rel="noopener noreferrer nofollow">Python allows it</a>, and some libraries can help you with it (<a href="https://docs.celeryproject.org/en/stable/" target="_blank" rel="noopener noreferrer nofollow">Celery</a> or <a href="https://python-rq.org/" target="_blank" rel="noopener noreferrer nofollow">Redis Queue</a>). It is a huge step, and we have already covered enough for the day. </p> <p> As a quick preview, the idea behind it is the same as the one with the threads. Each item will be processed as we&#39;ve seen until now but in different threads or even machines running the same code. With this approach, we can scale even further; theoretically, with no limit. But in reality, there is always a limit or bottleneck, usually the central node that handles the distribution. </p> <h2 id="take-into-account-when-scaling-up">Take into Account when Scaling Up</h2> <p> We&#39;ve shown a simplified version of a crawling process for educational purposes. To apply all this at scale, you should consider several things first. </p> <h3 id="build-vs-buy-vs-open-source">Build vs Buy vs Open Source</h3> <p> Before you write your own library for crawling, try some of the options out there. Many great Open Source libraries can achieve it: <a href="https://docs.scrapy.org/en/latest/" target="_blank" rel="noopener noreferrer nofollow">Scrapy</a>, <a href="http://docs.pyspider.org/en/latest/" target="_blank" rel="noopener noreferrer nofollow">pyspider</a>, <a href="https://github.com/bda-research/node-crawler" target="_blank" rel="noopener noreferrer nofollow">node-crawler</a> (Node.js), or <a href="https://github.com/gocolly/colly" target="_blank" rel="noopener noreferrer nofollow">Colly</a> (Go). And many companies and services that provide you with scraping and crawling solutions. </p> <h3 id="avoid-being-blocked">Avoid being blocked</h3> <p> As we saw in a previous post, <a href="https://www.zenrows.com/blog/stealth-web-scraping-in-python-avoid-blocking-like-a-ninja">there are several actions we can take to avoid blocking</a>. A couple of them are proxies and headers. Here is a simple snippet adding those to our current code. </p> <pre><code>proxies = { 
	&#39;http&#39;: &#39;http://190.64.18.177:80&#39;, 
	&#39;https&#39;: &#39;http://49.12.2.178:3128&#39;, 
} 
 
headers = { 
	&#39;authority&#39;: &#39;httpbin.org&#39;, 
	&#39;cache-control&#39;: &#39;max-age=0&#39;, 
	&#39;sec-ch-ua&#39;: &#39;&#34;Chromium&#34;;v=&#34;92&#34;, &#34; Not A;Brand&#34;;v=&#34;99&#34;, &#34;Google Chrome&#34;;v=&#34;92&#34;&#39;, 
	&#39;sec-ch-ua-mobile&#39;: &#39;?0&#39;, 
	&#39;upgrade-insecure-requests&#39;: &#39;1&#39;, 
	&#39;user-agent&#39;: &#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36&#39;, 
	&#39;accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#39;, 
	&#39;sec-fetch-site&#39;: &#39;none&#39;, 
	&#39;sec-fetch-mode&#39;: &#39;navigate&#39;, 
	&#39;sec-fetch-user&#39;: &#39;?1&#39;, 
	&#39;sec-fetch-dest&#39;: &#39;document&#39;, 
	&#39;accept-language&#39;: &#39;en-US,en;q=0.9&#39;, 
} 
 
def get_html(url): 
	try: 
		response = requests.get(url, headers=headers, proxies=proxies) 
		return response.content 
	except Exception as e: 
		print(e) 
		return &#39;&#39; </code></pre>  <p> We won&#39;t go into details here, only a simple snippet for extracting id, name, and price per item. We store everything in a <code>data</code> array, which is not a great idea. But it is enough for demo purposes. </p> <pre><code>data = [] 
 
def extract_content(soup): 
	for product in soup.select(&#39;.product&#39;): 
		data.append({ 
			&#39;id&#39;: product.find(&#39;a&#39;, attrs={&#39;data-product_id&#39;: True})[&#39;data-product_id&#39;], 
			&#39;name&#39;: product.find(&#39;h2&#39;).text, 
			&#39;price&#39;: product.find(class_=&#39;amount&#39;).text 
		}) 
 
print(data) 
# [{&#39;id&#39;: &#39;759&#39;, &#39;name&#39;: &#39;Bulbasaur&#39;, &#39;price&#39;: &#39;£63.00&#39;}, {&#39;id&#39;: &#39;729&#39;, &#39;name&#39;: &#39;Ivysaur&#39;, &#39;price&#39;: &#39;£87.00&#39;}, ...] </code></pre> <h3 id="persistency">Persistency</h3> <p> We haven&#39;t persisted anything, and that does not scale. In a real-world case, we should store the content and even the HTML itself for later processing. And all the discovered URLs with the timestamp time. It all starts to sound like a database is needed. Depending on the necessities, we could store just the actual content or the whole URLs, dates, HTML, etcetera generically. </p> <h3 id="canonicals">Canonicals</h3> <p> The link extraction part does not take into consideration <a href="https://en.wikipedia.org/wiki/Canonical_link_element" target="_blank" rel="noopener noreferrer nofollow">canonical links</a>. A page can have more than one URL: query strings or hashes might modify it. In our case, we would crawl it twice. It&#39;s not a problem now, but something to consider. </p> <p> The right approach would be to add the canonical URL (if present) to the visited list. Then we could arrive at that same page from a different origin URL, but we would detect it as duplicate. We could also remove some query string parameters using <a href="https://w3lib.readthedocs.io/en/latest/w3lib.html#w3lib.url.url_query_cleaner" target="_blank" rel="noopener noreferrer nofollow">url_query_cleaner</a>. </p> <h3 id="robotstxt">Robots.txt</h3> <p> We have not checked it because we are using a test website prepared for scraping. But please check the robots file and comply with it when crawling an actual target. And above it, do not cause more traffic than they can handle. Once again, be civil and nice ;) </p> <h2 id="final-code">Final Code</h2> <pre><code>import requests 
from bs4 import BeautifulSoup 
import queue 
from threading import Thread 
 
starting_url = &#39;https://scrapeme.live/shop/page/1/&#39; 
visited = set() 
max_visits = 100 # careful, it will crawl all the pages 
num_workers = 5 
data = [] 
 
def get_html(url): 
	try: 
		response = requests.get(url) 
		# response = requests.get(url, headers=headers, proxies=proxies) 
		return response.content 
	except Exception as e: 
		print(e) 
		return &#39;&#39; 
 
def extract_links(soup): 
	return [a.get(&#39;href&#39;) for a in soup.select(&#39;a.page-numbers&#39;) 
			if a.get(&#39;href&#39;) not in visited] 
 
def extract_content(soup): 
	for product in soup.select(&#39;.product&#39;): 
		data.append({ 
			&#39;id&#39;: product.find(&#39;a&#39;, attrs={&#39;data-product_id&#39;: True})[&#39;data-product_id&#39;], 
			&#39;name&#39;: product.find(&#39;h2&#39;).text, 
			&#39;price&#39;: product.find(class_=&#39;amount&#39;).text 
		}) 
 
def crawl(url): 
	visited.add(url) 
	print(&#39;Crawl: &#39;, url) 
	html = get_html(url) 
	soup = BeautifulSoup(html, &#39;html.parser&#39;) 
	extract_content(soup) 
	links = extract_links(soup) 
	for link in links: 
		if link not in visited: 
			q.put(link) 
 
def queue_worker(i, q): 
	while True: 
		url = q.get() # Get an item from the queue, blocks until one is available 
		if (len(visited) &lt; max_visits and url not in visited): 
			crawl(url) 
		q.task_done() # Notifies the queue that the item has been processed 
 
q = queue.Queue() 
for i in range(num_workers): 
	Thread(target=queue_worker, args=(i, q), daemon=True).start() 
 
q.put(starting_url) 
q.join() # Blocks until all items in the queue are processed and marked as done 
 
print(&#39;Done&#39;) 
print(&#39;Visited:&#39;, visited) 
print(&#39;Data:&#39;, data) </code></pre> <h2 id="conclusion">Conclusion</h2> <div><p> We&#39;d like you to part with three main points: </p><ol> <li>Separate getting the HTML and extracting the links from the crawling itself.</li> <li>Choose the appropriate system for your use case: simple sequential, parallel, or distributed.</li> <li>Building from scratch to a vast scale will probably hurt. Take a look at free or paid libraries/solutions.</li> </ol> </div> <p> Do not forget to take a look at the previous posts in this series.</p> <p> Stay tuned for the next one on scaling this crawling process even further. </p> <p> <span>Did you find the content helpful? Spread the word and share it on <a target="_blank" rel="noopener" href="https://twitter.com/share?text=✍🏻Mastering%20Web%20Scraping%20in%20Python:%20Crawling🕸️.%20Learn%20how%20to%20build%20a%20website%20crawler%20for%20scraping%20at%20scale🔥&amp;url=https%3A%2F%2Fwww.zenrows.com%2Fblog%2Fmastering-web-scraping-in-python-crawling-from-scratch%2F%3Futm_source%3Dtwitter%26utm_medium%3Dshared%26rd%3D997687557">Twitter</a>, <a target="_blank" rel="noopener" href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fwww.zenrows.com%2Fblog%2Fmastering-web-scraping-in-python-crawling-from-scratch%2F%3Futm_source%3Dlinkedin%26utm_medium%3Dshared%26rd%3D1381440169">LinkedIn</a> or <a target="_blank" rel="noopener" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.zenrows.com%2Fblog%2Fmastering-web-scraping-in-python-crawling-from-scratch%2F%3Futm_source%3Dfacebook%26utm_medium%3Dshared%26rd%3D985474658">Facebook</a>.</span> </p> <div> <p><strong>Rock-Solid Automated Data Extraction Infrastructure</strong> <span>Forget about blocks, managing headless browsers and servers. We handle the hassle for you.</span> </p> <p><a href="https://app.zenrows.com/register"> <span>Try ZenRows</span> </a> </p></div> </div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 13:55:49 +0000</pubDate>
      <source>https://www.zenrows.com/blog/mastering-web-scraping-in-python-crawling-from-scratch</source>
    </item>
    <item>
      <title>Actual impostors don&#39;t get impostor syndrome</title>
      <link>https://zapier.com/blog/actual-impostors-dont-get-impostor-syndrome/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___zapier_com_blog_actual-impostors-dont-get-impostor-syndrome_/image.jpg" /> 
<div id="readability-page-1" class="page"><div><article><p>I once volunteered at a nonprofit. The person who scammed it, before it shut down, was the hardest worker there.</p><p>It was an upstart computer recycling outfit. People and organizations donated old computers, a team of volunteers fixed them, and the repaired computers were either sold or donated to other nonprofits. </p><p>At least, that was the idea. </p><p>The organization was pretty dysfunctional until a guy calling himself &#34;Brazil&#34; showed up. He worked tirelessly to make everything come together. He was on the phone constantly, convinced several organizations to donate old equipment, and coordinated a steady stream of volunteers. Computers were being sold, regularly—more than enough to pay for rent. The organization was, after months of inertia, starting to find its feet.</p><p>Then Brazil emptied the organization&#39;s entire bank account into his own before skipping town. The nonprofit shut down not long after that. </p><p>This person was a con artist—an actual impostor. And you know what? I don&#39;t think he doubted himself once. He projected so much confidence in all of his statements, even ones that were objectively false, that you couldn&#39;t help but believe him. I honestly don&#39;t think he&#39;s doubted himself in his entire life.</p><p>Because actual impostors don&#39;t experience <a color="blue" target="_self" href="https://zapier.com/blog/what-is-imposter-syndrome/">impostor syndrome</a>. They don&#39;t wonder if they&#39;re qualified for their current position, or if they measure up with their peers. They just lie, lie, lie, until they have access to what they want, then they take it—and leave. </p><h2>Brilliant people tend to doubt themselves</h2><p>Impostor syndrome is a common psychological pattern where people doubt their own knowledge and skills, then live in fear that they&#39;ll eventually be outed as a fraud. This is particularly common among highly qualified and experienced people. </p><p>That sounds odd—why would qualified people doubt themselves? Remember: highly qualified people tend to work around <i>other</i> highly qualified people and also tend to measure their own self-worth in comparison to others. That&#39;s a recipe for self-doubt.</p><p><a color="blue" target="_blank" href="https://zapier.com/">Zapier</a>, where I work, is a company with a staggeringly high percentage of brilliant people, which can be very intimidating. Most everyone is very friendly and will help you if you have any questions, but it&#39;s still very easy to look around and feel like you don&#39;t measure up.</p><p>Some of the smartest people I&#39;ve ever met—people who consistently do great work, and in some cases manage entire departments—question whether they know anything about fields they&#39;ve worked in for over a decade. And they shouldn&#39;t feel that way. None of these people are pulling one over on the company—they&#39;re all qualified to do what they do and are making contributions no one else could. They&#39;re doing good work. </p><p>It&#39;s a hard feeling to get over, but every time I feel it, I think about Brazil. He could confidently state something that&#39;s objectively not true and would double down if you questioned him about it. I know because this happened to me. I doubted things I knew to be true because he was that confident and that persuasive. I&#39;ll never know what was going on inside his head, but I don&#39;t think he spent a moment questioning himself.</p><p>If you&#39;re not actually a con artist, and you&#39;re experiencing impostor syndrome, you should find comfort in this. The fact that you&#39;re wondering whether you&#39;re a fraud probably means that you&#39;re not one. Actual impostors don&#39;t ask themselves if they&#39;re a fraud.</p><h2>A monkey with a typewriter</h2><p>My Zapier colleague Hannah<a color="blue" target="_blank" href="https://twitter.com/hannahrherman/status/1412761113213784070" rel="nofollow"> asked me</a> to write an article about how amazing she is. It was a joke, but I&#39;m going to go ahead and actually do it. </p><p>Hannah is one of my favorite people to talk to on earth and is also really good at what she does. I learn something from her every week and deeply respect her abilities. So when she recently wrote an article titled<a color="blue" target="_self" href="https://zapier.com/blog/how-to-write-better/"> How to write real good</a>, I doubted myself. The article encouraged would-be writers to learn grammar, understand the rules of language, consult a style guide, and learn how to diagram sentences. </p><p>I&#39;m a writer. I have never done any of these things. </p><p>It made me think I don&#39;t actually know how to write—that&#39;s what impostor syndrome does to your brain. Never mind that I&#39;ve been writing professionally since 2007. Never mind that I&#39;ve had a lot of success in that time. If someone I respect thinks this is how you learn how to write, and I haven&#39;t done that, my mind is going to think that I simply don&#39;t know how to write. </p><p>But that&#39;s not true. I just learned a different way. </p><p>This has happened to me in other contexts too. I paid for a good chunk of college by working at a rural Ontario nursery, taking care of plants every summer from grade nine straight until my last year of college. I got pretty good at pruning, quickly shaping wholesale plants so that they would grow into something retail outlets could display. I don&#39;t remember anyone telling me how to do it—I just remember watching, mimicking, and eventually being able to shape a dogwood, a cedar, or a Japanese maple just so. </p><p>My wife once asked me to explain how to prune a bush while we were working in our yard. I couldn&#39;t. It&#39;s not something I&#39;ve ever thought about or have a grand theory for—it&#39;s just something I know how to do. </p><p>Pruning plants and writing—they&#39;re instincts. They&#39;re skills I have because I&#39;ve done them a lot. I can&#39;t point to any teachers who showed me how, and I couldn&#39;t explain the mechanics of it if I tried. I have no idea what a predicate is, for example. (I just now looked up what a predicate is, and I&#39;m going to be honest: I still have no idea what a predicate is.)</p><p>Sometimes I feel bad about this, like I&#39;m stupid, a monkey who learned a trick through repetition. </p><p>But I&#39;m not an impostor—I&#39;m actually good at this. I know this, if only because you&#39;re still reading this article, and it&#39;s not easy to keep someone reading this long. </p><p>It&#39;s not useful for me to read Hannah&#39;s advice on becoming a better writer and conclude that I must not be a good writer. People learn in different ways, is all. And I shouldn&#39;t listen to that voice that tells me I&#39;m faking it because I&#39;m not faking it. I&#39;m not a con artist. An actual con artist wouldn&#39;t read an article like Hannah&#39;s and doubt themselves. They&#39;d read the article and then claim to have already known all of those things and to already be great at them. </p><p>So I&#39;m glad that voice of self-doubt is there because without it I&#39;d assume I already know everything, and I&#39;d never bother to improve. Who knows? Maybe someday I&#39;ll learn what a predicate is. </p><h2>Out yourself and you&#39;ll feel better</h2><p>I&#39;m lucky: I work at a company that has normalized talking about <a color="blue" target="_self" href="https://zapier.com/blog/learning-from-mistakes/">impostor syndrome</a>. There&#39;s a dedicated Slack channel for the issue where 150 or so people support each other. There are various educational resources available specifically for this issue. And I have several friends here who have talked me through it. I can&#39;t tell you how comforting this is. </p><p>One thing a con artist will never do, in my experience, is openly admit that they&#39;re conning you. They will deny, lie, and generally talk in circles around the truth. So if you want to know, one hundred percent, that you&#39;re not an impostor, do something no impostor would ever do: out yourself. Tell a coworker you trust how you feel. I bet they&#39;ll react with understanding and that you&#39;ll feel a lot better after.</p></article></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 15:33:47 +0000</pubDate>
      <source>https://zapier.com/blog/actual-impostors-dont-get-impostor-syndrome/</source>
    </item>
    <item>
      <title>An intro to Pen Plotters (2019)</title>
      <link>https://medium.com/quarterstudio/an-intro-to-pen-plotters-29b6bd4327ba</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___medium_com_quarterstudio_an-intro-to-pen-plotters-29b6bd4327ba/image.jpg" /> 
<div id="readability-page-1" class="page"><article><span></span><div><section><div><div><div><div><div><div><p><a rel="noopener" href="https://medium.com/@tobiastoft?source=post_page-----29b6bd4327ba--------------------------------"></a></p></div></div></div></div><p id="c3ad"><em>I originally posted this on my website back in July 2014. It seems that interest in pen plotters has </em><a href="https://news.ycombinator.com/item?id=16495236" rel="noopener nofollow"><em>picked up recently</em></a><em>, so I decided to move the post to Medium which is arguably a much better place for it.</em></p></div></div><div><figure><p></p><figcaption>HP 7475A plotter — I paid $50 for it on eBay. The Delaunay triangulated Marilyn was one of my first experiments.</figcaption></figure></div><div><p id="cf90">I’ve been fascinated with pen plotters for a long time now and I’ve owned several of them — but for some reason never posted any of my explorations or findings online. Until now, at least.</p></div></section></div></article></div>]]></content:encoded>
      <pubDate>Tue, 10 Aug 2021 09:44:52 +0000</pubDate>
      <source>https://medium.com/quarterstudio/an-intro-to-pen-plotters-29b6bd4327ba</source>
    </item>
    <item>
      <title>Regulators should treat stablecoins like banks</title>
      <link>https://www.economist.com/leaders/2021/08/07/why-regulators-should-treat-stablecoins-like-banks</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___www_economist_com_leaders_2021_08_07_why-regulators-should-treat-stablecoins-like-banks/image.jpg" /> 
<div id="readability-page-1" class="page"><div><header><h2 data-test-id="Article Description" itemprop="description">Cryptocurrencies are not yet a threat to the financial system, but the dangers are growing</h2></header><div data-test-id="Lead Image"><div itemscope="" itemprop="image" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.economist.com/img/b/1280/720/90/sites/default/files/images/2021/08/articles/main/20210807_ldd010.jpg"/><p></p></div></div><hr/></div><div itemprop="text"><p data-caps="initial"><span data-caps="initial">T</span><small>WELVE YEARS</small> after bitcoin was born, governments are still struggling to cope with cryptocurrencies. Britain has banned Binance, a crypto exchange and the European Union’s regulators want transactions to be more traceable. On August 3rd Gary Gensler, the head of America’s Securities and Exchange Commission, said cryptocurrency markets were “rife with fraud, scams and abuse” and called on Congress to give his agency new regulatory powers. The price of bitcoin, the biggest cryptocurrency, gyrates with regulators’ every word.</p><div><figure><figcaption>Listen to this story</figcaption><audio controls="" id="audio-player" preload="none" src="https://www.economist.com/media-assets/audio/008%20Leaders%20-%20Regulating%20cryptocurrencies-f37ea4863833581743d0dfb7b28880e4.mp3" title="Why regulators should treat stablecoins like banks" controlslist="nodownload"><p>Your browser does not support the &lt;audio&gt; element.</p></audio></figure><p>Enjoy more audio and podcasts on<!-- --> <a id="audio-ios-cta" href="https://apps.apple.com/app/apple-store/id1239397626?pt=344884&amp;ct=article%20audio%20player&amp;mt=8" target="_blank" rel="noreferrer">iOS</a> <!-- -->or<!-- --> <a id="audio-android-cta" href="https://play.google.com/store/apps/details?id=com.economist.lamarr&amp;referrer=utm_source%3Darticle%2520audio%2520player" target="_blank" rel="noreferrer">Android</a>.</p></div><p>Governments have an obligation to fight the deception, tax evasion and money laundering that plagues the crypto world. Police seizures of bitcoin suggest that they are becoming more zealous. The harder issue they must grapple with is whether cryptocurrencies threaten the financial system. Were bitcoin to collapse, <a href="https://www.economist.com/finance-and-economics/2021/08/02/what-if-bitcoin-went-to-zero">our crypto “stress test” suggests</a> that its holders would lose hundreds of billions of dollars but that the fallout would be manageable. Yet there is another danger posed by “stablecoins”, a special type of cryptocurrency that pegs its value to conventional money.</p><p>Pledges of stability often lead to financial crises. Because banks offer deposits that are redeemable on demand and superficially riskless, but which are backed by longer-term, less liquid and riskier assets, they are vulnerable to runs. Stablecoins are similar. The biggest, Tether, has issued $62bn-worth of tokens which it says are redeemable for a dollar apiece. But of the assets backing the tokens in March only about 5% were cash or Treasury bills, according to Tether’s public disclosures. It says it will update the figures soon and that it is “fully backed by reserves”.</p><div><figure><div itemscope="" itemprop="image" itemtype="https://schema.org/ImageObject" data-slim="1"><meta itemprop="url" content="https://www.economist.com/img/b/608/468/90/sites/default/files/images/print-edition/20210807_LDC140.png"/><p></p></div></figure><p>Most of the assets were riskier—about half of them commercial paper. Stablecoins’ growth from a value of $14bn in August 2020 to over $100bn today has given them a big financial footprint. Extrapolating Tether’s disclosures implies that it owns over $30bn-worth of commercial paper, which probably makes it the asset class’s seventh-largest investor, not far off funds run by Vanguard and BlackRock, according to JPMorgan Chase. With estimated leverage of 383-to-1, Tether would be unable to honour all its tokens after losses of just 0.26%—a safety cushion that regulators would never allow at a bank.</p><p>Few stablecoins say much about their balance-sheets. Tether’s disclosures of the breakdown of its assets are puny and fall far below the standards expected of a bank. In February Tether was among the defendants who agreed to an $18.5m fine with New York’s attorney-general, which said that in 2017 Tether had misled the market about its <small>US</small> dollar backing and that it had not accurately disclosed the transfer of $625m of its assets to Bitfinex, an online trading platform. Tether says the funds were repaid and that it has a “total commitment to transparency”.</p><p>No wonder Mr Gensler calls cryptocurrencies a Wild West. Some policymakers have compared stablecoins to the period of “free banking”, when privately issued banknotes of uncertain backing and worth circulated in America’s economy in the 19th century. A more useful comparison is with money-market funds, which were created in the 1970s to circumvent rules limiting the interest banks could pay depositors. After promising to maintain the value of their shares at a dollar, money-market funds blew up in 2008 in the global financial crisis. American taxpayers stepped in to forestall a fire sale of their assets and a crash in the market for commercial paper, on which the real economy depends. A collapse of stablecoins could look similar.</p><p>Regulators must act quickly to subject stablecoins to bank-like rules for transparency, liquidity and capital. Those failing to comply should be cut off from the financial system, to stop people drifting into an unregulated crypto-ecosystem. Policymakers are right to sound the alarm, but if stablecoins continue to grow, governments will need to move faster to contain the risks.</p></div><p>It may be tempting to ban stablecoins, especially if central banks launch their own digital currencies—much as private banknotes were replaced with government monopolies on physical cash. Yet it is possible that regulated private-sector stablecoins will eventually bring benefits, such as making cross-border payments easier, or allowing self-executing “smart contracts”. Regulators should allow experiments whose goal is not merely to evade financial rules. But first they must prevent the repackaging of risks with which the world is all too familiar. <span data-ornament="ufinish">■</span></p><p data-test-id="Footnote">This article appeared in the Leaders section of the print edition under the headline &#34;Unstablecoins&#34;</p></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 15:02:34 +0000</pubDate>
      <source>https://www.economist.com/leaders/2021/08/07/why-regulators-should-treat-stablecoins-like-banks</source>
    </item>
    <item>
      <title>Technical Analysis of the Poly Network Hack</title>
      <link>https://rekt.news/polynetwork-rekt/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___rekt_news_polynetwork-rekt_/image.jpg" /> 
<div id="readability-page-1" class="page"><section><figure> </figure><p><strong>This is it rekt readers; the big one.</strong></p><p><em>$611 million dollars stolen.</em></p><p>That’s more than the <a href="https://www.bloomberg.com/news/articles/2014-02-28/mt-gox-exchange-files-for-bankruptcy">Mt Gox hack</a>. More than the GDP of several small countries. More than the entire rekt.news leaderboard added together.</p><p><strong>The biggest cryptocurrency hack... <em>ever</em>.</strong></p><blockquote><p><a href="https://twitter.com/PolyNetwork2/status/1425130017546149891">Poly Network</a> = rekt.</p></blockquote><p><em>But how?</em></p><figure> </figure><p><em>Credit:</em><a href="https://www.breadcrumbs.app/reports/671">breadcrumbs.app</a>, <a href="https://twitter.com/SlowMist_Team/status/1425197809058254849?s=20">slowmist</a>, <a href="https://blocksecteam.medium.com/the-initial-analysis-of-the-polynetwork-hack-270ac6072e2a">blocksec</a></p><p><strong>Attacker ETH:</strong> <a href="https://etherscan.io/address/0xc8a65fadf0e0ddaf421f28feab69bf6e2e589963">0xc8a65fadf0e0ddaf421f28feab69bf6e2e589963</a></p><p><strong>Attacker BSC:</strong> <a href="https://bscscan.com/address/0x0D6e286A7cfD25E0c01fEe9756765D8033B32C71">0x0D6e286A7cfD25E0c01fEe9756765D8033B32C71</a></p><p><strong>This was not the usual smart contract flash loan / arbitrage affair.</strong></p><p><strong>The hacker exploited the Proxy Lock Contracts of Poly Network on three different chains.</strong></p><p><strong>Ethereum:</strong><a href="https://etherscan.io/address/0x250e76987d838a75310c34bf422ea9f1ac4cc906">0x250e76987d838a75310c34bf422ea9f1ac4cc906</a></p><p><strong>BSC:</strong><a href="https://bscscan.com/address/0x05f0fDD0E49A5225011fff92aD85cC68e1D1F08e">0x05f0fDD0E49A5225011fff92aD85cC68e1D1F08e</a></p><p><strong>Polygon:</strong><a href="https://polygonscan.com/address/0x28FF66a1B95d7CAcf8eDED2e658f768F44841212">0x28FF66a1B95d7CAcf8eDED2e658f768F44841212</a></p><blockquote><p>Credit: <a href="https://twitter.com/kelvinfichter">@kelvinfichter</a></p></blockquote><p><strong>&#34;Poly has a contract called the &#34;<strong>EthCrossChainManager</strong>&#34;. It&#39;s a privileged contract that has the right to trigger messages from another chain. It&#39;s a standard thing for cross-chain projects.</strong></p><p>It has a function named <strong>verifyHeaderAndExecuteTx</strong> that anyone can call to execute a cross-chain transaction.</p><p>It (1) verifies that the block header is correct by checking signatures (seems the other chain was a poa sidechain or) and then (2) checks that the transaction was included within that block with a Merkle proof. <a href="https://github.com/polynetwork/eth-contracts/blob/d16252b2b857eecf8e558bd3e1f3bb14cff30e9b/contracts/core/cross_chain_manager/logic/EthCrossChainManager.sol#L127">Here&#39;s the code.</a></p><p>One of the last things the function does is call <strong>executeCrossChainTx</strong>, which makes the call to the target contract. This is where the critical flaw sits. <a href="https://github.com/polynetwork/eth-contracts/blob/d16252b2b857eecf8e558bd3e1f3bb14cff30e9b/contracts/core/cross_chain_manager/logic/EthCrossChainManager.sol#L185">Poly checks</a> that the target is a contract, but they forgot to prevent users from calling a very important target... the <a href="https://github.com/polynetwork/eth-contracts/blob/master/contracts/core/cross_chain_manager/data/EthCrossChainData.sol"><strong>EthCrossChainData</strong> contract</a></p><p>By sending this cross-chain message, the user could trick the <strong>EthCrossChainManager</strong> into calling the <strong>EthCrossChainData</strong> contract, passing the <strong>onlyOwner</strong> check. Now the user just had to craft the right data to be able to trigger the function that changes the public keys…</p><p>The only remaining challenge was to figure out how to make the <strong>EthCrossChainManager</strong> call the right function. Now comes a little bit of complexity around how Solidity picks which function you&#39;re trying to call.</p><p>The first four bytes of transaction input data is called the &#34;signature hash&#34; or &#34;sighash&#34; for short. It&#39;s a short piece of information that tells a Solidity contract what you&#39;re trying to do.</p><p>The sighash of a function is calculated by taking the first four bytes of the hash of &#34;<!-- -->&lt;function name&gt;<!-- -->(<!-- -->&lt;function input types&gt;<!-- -->)&#34;. For example, the sighash of the ERC20 transfer function is the first four bytes of the hash of &#34;transfer(address,uint256)&#34;.</p><p>Poly&#39;s contract was willing to call any contract. However, it would only call the contract function that corresponded to the following sighash:</p><p>Errr but wait... <strong>&#34;_method&#34;</strong> here was user input. All the attacker had to do to call the right function was figure out <em>some</em> value for &#34;<strong>_method</strong>&#34; that, when combined with those other values and hashed, had the same leading four bytes as the sighash of our target function.</p><p>With just a little bit of grinding, you can easily find some input that produces the right sighash. You don&#39;t need to find a full hash collision, you&#39;re only checking the first four bytes. So is this theory correct?</p><p>Well... here&#39;s the actual sighash of the target function:</p><blockquote><p><a href="http://ethers.utils.id">http://ethers.utils.id</a> (&#39;putCurEpochConPubKeyBytes(bytes)&#39;).slice(0, 10)</p></blockquote><p>&#39;0x41973cd9&#39;</p><p>And the sighash that the attacker crafted...</p><blockquote><p><a href="http://ethers.utils.id">http://ethers.utils.id</a> (&#39;f1121318093(bytes,bytes,uint64)&#39;).slice(0, 10)</p></blockquote><p>&#39;0x41973cd9&#39;</p><p><strong>Fantastic. No private key compromise required! Just craft the right data and boom... the contract will just hack itself!</strong></p><p>One of the biggest design lessons that people need to take away from this is: if you have cross-chain relay contracts like this, <strong>MAKE SURE THAT THEY CAN&#39;T BE USED TO CALL SPECIAL CONTRACTS.</strong> The <strong>EthCrossDomainManager</strong> shouldn&#39;t have owned the <strong>EthCrossDomainData</strong> contract.</p><p>Separate concerns. If your contract absolutely needs to have special privileges like this, make sure that users can&#39;t use cross-chain messages to call those special contracts.&#34;</p><figure> </figure><blockquote><p>On the Ethereum blockchain, the hacker stole</p></blockquote><p><strong>USDC</strong> - 96,389,444</p><p><strong>WBTC</strong> - 1,032</p><p><strong>DAI</strong> - 673,227</p><p><strong>UNI</strong> - 43,023</p><p><strong>SHIBA</strong> - 259,737,345,149</p><p><strong>renBTC</strong>- 14.47</p><p><strong>USDT</strong> - 33,431,197</p><p><strong>wETH</strong> - 26,109</p><p><strong>FEI USD</strong> - 616,082</p><blockquote><p>On BSC, the hacker stole:</p></blockquote><p><strong>BNB</strong> - 6,613.44</p><p><strong>USDC</strong> - 87,603,373</p><p><strong>ETH</strong> - 299</p><p><strong>BTCB</strong> - 26,629</p><p><strong>BUSD</strong> - 1,023</p><blockquote><p>On the Polygon blockchain, the hacker stole:</p></blockquote><p><strong>USDC</strong> - 85,089,610</p><blockquote><p>TOTAL VALUE LOST - ~$611,000,000</p></blockquote><p><em>At the time of writing, the stolen funds are located in the following wallets:</em></p><p><strong>ETH:</strong> <a href="https://etherscan.io/address/0xC8a65Fadf0e0dDAf421F28FEAb69Bf6E2E589963">0xC8a65Fadf0e0dDAf421F28FEAb69Bf6E2E589963</a></p><p><strong>BSC:</strong> <a href="https://bscscan.com/address/0x0D6e286A7cfD25E0c01fEe9756765D8033B32C71">0x0D6e286A7cfD25E0c01fEe9756765D8033B32C71</a></p><p><strong>Polygon:</strong> <a href="https://polygonscan.com/address/0x5dc3603C9D42Ff184153a8a9094a73d461663214">0x5dc3603C9D42Ff184153a8a9094a73d461663214</a></p><figure> </figure><p><strong>DeFi storylines are rarely straightforward, and this one is no exception.</strong></p><p><em>Even anonymous actors adore attention.</em></p><p>Shortly after the exploit, an unexpected protagonist appeared, going by the name of <a href="https://etherscan.io/address/0xf8b5c45c6388c9ee12546061786026aaeaa4b682">hanashiro.eth.</a></p><p>hanashiro.eth first gained attention when they <a href="https://etherscan.io/tx/0xae2442c5b5721df8c190fd8f59b53b6dc56a875fb03035ad34276a598ddf7d31">sent the hacker</a> a tip about how to handle USDT, for which they <a href="https://etherscan.io/tx/0xdf3afc47c7914e06ddb1be19afcd769e558111d353e55273a62c4a96e6a6090f">received 13.37 Ether</a> from the hacker as a reward.</p><p><strong><a href="https://twitter.com/JustDoingItBig/status/1425115724209655812?s=20">Many others</a> sent messages to the hacker afterwards, but none were quite as successful as hanashiro.eth.</strong></p><p>With a truly crypto native level of philanthropic showmanship, hanashiro.eth went on to donate their stolen money to a few of the foundational organisations which support our industry, such as Infura, Etherscan, and <a href="https://www.rekt.news/">rekt.news</a>.</p><p><em>But not all of the funds were so freely accessible.</em></p><p><a href="https://twitter.com/paoloardoino/status/1425090760609832978?s=20">Tether froze all of the 33M USDT</a> that were stolen on the Ethereum chain.</p><p><strong>Their coin - their choice… A fact worth remembering if you use USDT.</strong></p><p>By this point the shit had really hit the fan; and all eyes were on <a href="https://twitter.com/PolyNetwork2/status/1425123153009803267">Poly Network, who resorted to posting an open letter</a> to the attacker begging them to return the funds.</p><p><strong>A single tweet asking a criminal to return six hundred million dollars... Maybe Gensler was right when he said we are in the <a href="https://www.reuters.com/technology/us-sec-chair-gensler-calls-congress-help-rein-crypto-wild-west-2021-08-03/">“Wild West”</a> phase of cryptocurrency.</strong></p><p>Consider the mindset of the attacker at this point in the story. Which do you think they felt more; euphoria, or terror?</p><p><strong>Stealing 600 million dollars whilst sat at your computer must be a surreal experience.</strong></p><p><em>The experience of then trying to launder that money must be equally intense.</em></p><p>Aside from JPEGS, tornado.cash would be the obvious starting point, and that’s exactly where our hacker went.</p><p>They <a href="https://twitter.com/UnderTheBreach/status/1425119885978447875?s=20">sent themself a transaction</a> containing the message;</p><blockquote><p>Wonder why Tornado? Will miners stop me? Teach me please</p></blockquote><p><strong>Was that psyops or stupidity? In crypto it’s never quite clear...</strong></p><p><strong>On the run with 600 million, and broadcasting messages to an audience of thousands.</strong></p><p><em>The hacker was growing too confident.</em></p><figure> </figure><p><strong>When <a href="https://twitter.com/wardbradt/status/1425112492397764609?s=20">@WardBradt</a> tweeted the following;</strong></p><blockquote><p>Did the PolyNetwork Exploiter accidentally use the wrong sender address for this tx <a href="https://t.co/SXS7F6iJsM?amp=1">0xb12681d9e</a>? The sender address is tied to FTX, Binance, Okex accounts.</p></blockquote><p><strong>Suddenly the attacker&#39;s attitude changed.</strong></p><p>Surely a hacker who feels confident enough to attempt an attack of this scale wouldn’t make such a basic OPSEC error? Or maybe they used fake KYC documents…</p><p><em>Either way, we began to see signs of fear from the attacker.</em></p><p>The hacker <a href="https://twitter.com/UnderTheBreach/status/1425127303353356293?s=20">began to suggest</a> that they might return <em>&#34;some tokens&#34;</em> or even abandon them, saying that they were <em>&#34;not so interested in the money&#34;.</em></p><p><a href="https://twitter.com/sniko_/status/1425135792658255877?s=20">Then the hacker considered the idea</a> of creating a DAO to distribute the stolen funds.</p><p><strong>Finally, the pressure became too much, and the hacker announced that they were <a href="https://etherscan.io/tx/0x7b6009ea08c868d7c5c336bf1bc30c33b87a0eedd59dac8c26e6a8551b20b68a">“READY TO SURRENDER”</a></strong></p><p><strong>In an unexpected and unprecedented move, the attacker is now returning the funds to Poly Network.</strong></p><p>They announced that they were <a href="https://etherscan.io/tx/0x7b6009ea08c868d7c5c336bf1bc30c33b87a0eedd59dac8c26e6a8551b20b68a">&#34;READY TO RETURN THE FUNDS!&#34;</a> in an Ethereum transaction that was sent from the same wallet used for the attack.</p><p>Before sending the first return transaction, the hacker created a token called &#34;The hacker is ready to surrender&#34; and sent this token to Poly Network who announced that they had set up a <a href="https://twitter.com/PolyNetwork2/status/1425321860539949056">multisig controlled by ‘’known Poly addresses’’</a>.</p><p><a href="https://docs.google.com/spreadsheets/u/1/d/11LUJwLoHX8ZCyfjhg5YZ0V99iU6PafMNL_NET45FSVc/htmlview?pru=AAABe1lDAS0*CdZKWo5WZNYwj5Qca8505A#gid=0">A summary of the hackers&#39; communication with Poly Network can be found here.</a></p><p><strong>At the time of writing, the hacker has returned the following:</strong></p><p>On the Ethereum blockchain: <a href="https://etherscan.io/address/0x71fb9db587f6d47ac8192cd76110e05b8fd2142f#tokentxns">$2.6M</a></p><p>On the BSC: <a href="https://bscscan.com/address/0xEEBb0c4a5017bEd8079B88F35528eF2c722b31fc">$1.1M</a></p><p>On the Polygon blockchain: <a href="https://polygonscan.com/address/0xa4b291ed1220310d3120f515b5b7accaecd66f17">$1M</a></p><p><strong>Will the hacker continue to return the funds, or is this just another stunt?</strong></p><p><em>Can they really just return the money and be forgiven?</em></p><figure> </figure><p><strong>Poly Network. 611 million.</strong></p><p><em>And you thought you knew all the big protocols in DeFi.</em></p><p><strong>This industry has grown bigger than our echo chamber can handle.</strong></p><p>This may be the first, but it won’t be the last hack of this size that we will see over the coming years. Yet the market seems unphased, and rightly so.</p><p>For <a href="https://finance.yahoo.com/news/coinbase-crushes-q2-expectations-notes-210643795.html">better</a> or for <a href="https://www.coindesk.com/bitmex-announces-100m-cftc-fincen-settlement">worse</a>, crypto will make the news, and the <a href="https://twitter.com/NeerajKA/status/1423721468123287556?s=20">world will have to take notice</a> as our industry becomes the norm.</p><p><em>This is just another inevitable part of the progress.</em></p><figure> </figure><p>REKT serves as a public platform for anonymous authors, we take no responsibility for the views or content hosted on REKT. </p><p><strong>Donate (ETH / ERC20):<!-- --> <a href="https://etherscan.io/address/0x3C5c2F4bCeC51a36494682f91Dbc6cA7c63B514C">0x3C5c2F4bCeC51a36494682f91Dbc6cA7c63B514C</a></strong></p><p>Disclaimer: </p><p>REKT is not responsible or liable in any manner for any Content posted on our Website or in connection with our Services, whether posted or caused by ANON Author of our Website, or by REKT. Although we provide rules for Anon Author conduct and postings, we do not control and are not responsible for what Anon Author post, transmit or share on our Website or Services, and are not responsible for any offensive, inappropriate, obscene, unlawful or otherwise objectionable content you may encounter on our Website or Services. REKT is not responsible for the conduct, whether online or offline, of any user of our Website or Services.</p></section></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 14:29:59 +0000</pubDate>
      <source>https://rekt.news/polynetwork-rekt/</source>
    </item>
    <item>
      <title>What Bobby McIlvaine Left Behind</title>
      <link>https://www.theatlantic.com/magazine/archive/2021/09/twenty-years-gone-911-bobby-mcilvaine/619490/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___www_theatlantic_com_magazine_archive_2021_09_twenty-years-gone-911-bobby-mcilvaine_619490_/image.jpg" /> 
<div id="readability-page-1" class="page"><article><header><div><figure><p></p><figcaption><span>Bobby McIlvaine&#39;s wallet</span> (<!-- -->Danna Singer for The Atlantic<!-- -->)</figcaption></figure></div><div><p>Grief, conspiracy theories, and one family’s search for meaning in the two decades since 9/11</p></div></header><section><p><small><i>This article was published online on August 9, 2021.</i></small></p><figure></figure><p>W<span>hen Bobby McIlvaine </span>died on September 11, 2001, his desk at home was a study in plate tectonics, coated in shifting piles of leather-bound diaries and yellow legal pads. He’d kept the diaries since he was a teenager, and they were filled with the usual diary things—longings, observations, frustrations—while the legal pads were marbled with more variety: aphoristic musings, quotes that spoke to him, stabs at fiction.</p><p>The yellow pads appeared to have the earnest beginnings of two different novels. But the diaries told a different kind of story. To the outside world, Bobby, 26, was a charmer, a striver, a furnace of ambition. But inside, the guy was a sage and a sap—philosophical about disappointments, melancholy when the weather changed, moony over girlfriends.</p><p>Less than a week after his death, Bobby’s father had to contend with that pitiless still life of a desk. And so he began distributing the yellow legal pads, the perfect-bound diaries: to Bobby’s friends; to Bobby’s girlfriend, Jen, to whom he was about to propose. Maybe, he told them, there was material in there that they could use in their eulogies.</p><p>One object in that pile glowed with more meaning than all the others: Bobby’s very last diary. Jen took one look and quickly realized that her name was all over it. Could she keep it?</p><p>Bobby’s father didn’t think. He simply said yes. It was a reflex that he almost instantly came to regret. “This was a decision we were supposed to make together,” his wife, Helen, told him. Here was an opportunity to savor Bobby’s company one last time, to hear his <i>voice</i>, likely saying something new. In that sense, the diary wasn’t like a recovered photograph. It raised the prospect, however brief, of literary resurrection. How, Helen fumed, could her husband not want to know Bobby’s final thoughts—ones he may have scribbled as recently as the evening of September 10? And how could he not share her impulse to take every last molecule of what was Bobby’s and reconstruct him?</p><p>“One missing piece,” she told me recently, “was like not having an arm.”</p><p>Over and over, she asked Jen to see that final diary. Helen had plenty of chances to bring it up, because Jen lived with the McIlvaines for a time after September 11, unable to tolerate the emptiness of her own apartment. Helen was careful to explain that she didn’t need the object itself. All she asked was that Jen selectively photocopy it.</p><p>Jen would say she’d consider it. Then nothing would happen. Helen began to plead. <i>I just want the words</i>, she’d say. <i>If Bobby’s describing a tree, just give me the description of the tree.</i> Jen demurred.</p><p>The requests escalated, as did the rebuffs. They were having an argument now. Helen, Jen pointed out, already had Bobby’s other belongings, other diaries, the legal pads.</p><p>When she finally left the McIlvaines’ house for good, Jen slammed the door behind her, got into her car, and burst into tears. Shortly after, she wrote Helen a letter with her final answer: No, just no. If Helen wanted to discuss this matter any further, she’d have to do so in the presence of Jen’s therapist.</p><p>Helen and her husband never saw Jen again. “She became a nonperson to me,” Helen told me. Today, she can’t so much as recall Jen’s last name.</p><p>But for years, Helen thought about that diary. Her mind snagged on it like a nail; she needled her husband for giving it away; it became the subject of endless discussion in her “limping group,” as she calls it, a circle of six mothers in suburban Philadelphia who’d also lost children, though not on September 11. They became indignant on her behalf. A number proposed, only half jokingly, that they break into Jen’s apartment and liberate the diary. “You don’t get any more memories,” one of the women told me. “So anything written, any video, any card—you cling to that. That’s all you’re going to get for life.”</p><p>The McIlvaines would have to make do with what they already had. Eventually, they did. Three words of Bobby’s became the family motto: <i>Life loves on</i>. No one could quite figure out which diary or legal pad it came from, but no matter. Helen wears a silver bracelet engraved with this phrase, and her husband got it tattooed in curlicue script on his upper arm.</p><div><figure><picture></picture><figcaption>Bobby McIlvaine, with his parents, Helen and Bob Sr., at his Princeton graduation in 1997. Bobby’s body was found in the wreckage of the Twin Towers. (Danna Singer; original photo courtesy of the McIlvaine family)</figcaption></figure></div><p><span>Here I should note</span> that I know and love the McIlvaine family. On my brother’s first day of college, he was assigned to a seven-person suite, and because he arrived last, Bobby became his roommate. My brother often thinks about what a small miracle that was: If he’d arrived just 30 minutes earlier, the suite would have been an isomer of itself, with the kids all shuffled in an entirely different configuration. But thanks to a happy accident of timing, my brother got to spend his nights chattering away with this singular kid, an old soul with a snappity-popping mind.</p><p>Eight years later, almost to the day, a different accident of timing would take Bobby’s life. He and my brother were still roommates, but this time in a two-bedroom apartment in Manhattan, trying to navigate young adulthood.</p><p>Back when Bobby was still alive, I would occasionally see the McIlvaines. They struck me as maybe the nicest people on the planet. Helen taught reading to kids who needed extra help with it, mainly in a trailer in the parking lot of a Catholic high school. Bob Sr. was a teacher who specialized in working with troubled adolescents; for a decade, he’d also owned a bar. Jeff, Bobby’s younger brother, was just a kid in those days, but he was always unreasonably good-natured when he turned up.</p><p>And Bobby: My God. The boy was incandescent. When he smiled it looked for all the world like he’d swallowed the moon.</p><p>Then, on the morning of September 11, 2001, Bobby headed off to a conference at Windows on the World, a restaurant in a building to which he seldom had reason to go, for a media-relations job at Merrill Lynch he’d had only since July. My brother waited and waited. Bobby never came home. From that point forward, I watched as everyone in the blast radius of this horrible event tried to make sense of it, tried to cope.</p><p>Early on, the McIlvaines spoke to a therapist who warned them that each member of their family would grieve differently. <i>Imagine that you’re all at the top of a mountain</i>, she told them,<i> but you all have broken bones, so you can’t help each other. You each have to find your own way down</i>.</p><p>It was a helpful metaphor, one that may have saved the McIlvaines’ marriage. But when I mentioned it to Roxane Cohen Silver, a psychology professor at UC Irvine who’s spent a lifetime studying the effects of sudden, traumatic loss, she immediately spotted a problem with it: “That suggests everyone will <i>make it </i>down,” she told me. “Some people never get down the mountain at all.”</p><p>This is one of the many things you learn about mourning when examining it at close range: It’s idiosyncratic, anarchic, polychrome. A lot of the theories you read about grief are great, beautiful even, but they have a way of erasing individual experiences. Every mourner has a very different story to tell.</p><p>That therapist was certainly right, however, in the most crucial sense: After September 11, those who had been close to Bobby all spun off in very different directions. Helen stifled her grief, avoiding the same supermarket she’d shopped in for years so that no one would ask how she was. Jeff, Bobby’s lone sibling, had to force his way through the perdition of survivor’s guilt. Bob Sr. treated his son’s death as if it were an unsolved murder, a cover-up to be exposed. Something was fishy about 9/11.</p><p>And then there was Jen. She’s married now, has two terrific kids, but she wonders sometimes, when she’s quarreling with her husband or feeling exasperated with her life, what it would have been like if she’d been with Bobby all this time. I tracked her down in April, and of course she’s nothing like the heartless villainess I had come to imagine her to be. That was just the story I’d told myself, the one I’d used to make sense of the senseless, to give shape to my own rage. Like I said: We all need our stories.</p><p>One thing I knew when I finally visited her, though: I wanted to see that diary. And I wanted the McIlvaines to see it too. “I’m not a saver,” she said when we first met up for cocktails. My heart froze.</p><p>But she still had it, just so you know.</p><p><span>T</span><em><span>ell me about </span><span>your son.</span></em></p><p>Helen welcomed this invitation the first time she heard it, because it focused her thinking, gave her an outlet for her grief. But soon it filled her with dread, and she felt herself straining under the weight of it. How can you possibly convey who your firstborn was or what he meant to you?</p><p>Helen usually starts by telling people that Bobby went to Princeton, but that’s hardly because she’s status-fixated. It’s because she and Bob Sr. did not expect to have a child who went to an Ivy League school. They both went to state schools in Pennsylvania, not even particularly well-known ones. Both of their kids were sporty. But when Bobby was 8, his third-grade teacher said to them—and they both remember her exact words—“Start saving your pennies.” This one’s education might cost you.</p><p>“The amount of things that had to go right for my brother to go to Princeton were, like, astronomical,” says Jeff, a high-school biology teacher and track coach in Somerdale, New Jersey. “To us, it was like someone from our family becoming the president.”</p><p>This is how everyone in the family remembers Bobby: as a sui generis creature, exceptional and otherworldly, descended from the heavens through a basketball hoop.</p><p>He was an intense student. He was an even more intense athlete, competitive to the point of insolence. Writing in <i>The Philadelphia Inquirer</i> last year, Mike Sielski, an old high-school classmate of Bobby’s, <a href="https://www.inquirer.com/sports/kobe-bryant-bobby-mcilvaine-upper-dublin-lower-merion-september-11-20200409.html">described him</a> as “all bones and acute angles and stiletto elbows” on the basketball court. It was a goose-pimpling story, one he had occasion to write because another classmate of theirs had unearthed 36 seconds of video from 1992, in which a teenage Bobby McIlvaine throws an immaculate pass that sets up an immaculate shot that flies right over the teenage head of …</p><p>Kobe Bryant.</p><p>Bobby scored 16 points off Kobe and his team that day, in addition to setting up that floater.</p><p>When he arrived at college, Bobby retained a bit of that alpha-dog streak. He was still competitive, even while playing mindless, made-up dorm games. He wasn’t bashful about ribbing friends. He was tall and handsome and had a high level of confidence in his sense of style, which may or may not have been justified. “There were times you wanted him to step back and not be so serious and intense,” says Andre Parris, a former suitemate and one of Bobby’s closest friends. “But it was part of who and what he was, and what he thought he had to do to get ahead.”</p><p>What “getting ahead” meant to Bobby was complicated. Financial worries are all over his journals from those years (<i>I don’t feel like a real person sitting here with no money</i>, reads one typical entry). Yet he was conflicted about what it might take to make money, flummoxed by all the kids who were beating a dutiful path to business school. (<i>Is youth really just a hobby? </i>he asked about them, with evident pique.) He wanted to be a writer. Which paid nothing, obviously.</p><p>This conflict continued into his brief adulthood. He spent two years in book publishing before realizing that it was no way to make a living, and switched instead to corporate PR. He could still write his novels on the side.</p><p>But for all Bobby’s hunger and swagger, what he mainly exuded, even during his college years, was warmth, decency, a corkscrew quirkiness. He doted on girlfriends. He gave careful advice. His senior year, he took a modern-dance class because, well, why not? It would be fun. And different. His final project involved physically spelling out his girlfriend’s name.</p><p>That was just a lark, though. Bobby’s real intellectual passion was African American culture and history. After Bobby died, the McIlvaines got not one but two condolence notes from Toni Morrison, with whom he’d taken a class. The second came with the term paper he’d written for her. “It is certainly one of the more accomplished and insightful,” she wrote, “as was he.” His senior thesis received an honorable mention for the main prize in the department of African American studies.</p><p>At his funeral, Bobby’s oldest friends spoke of what a role model he was to them. I was five years older than Bobby, which meant I mainly saw him as charming and adorable, intelligent and unstoppable.</p><p>But strangely, I wanted to impress him too. When I started my job at <i>New York</i> magazine, writing short features in the theater section each week, Bobby gave me grief about ending each one of them with a quote. At first I was annoyed, defensive—<i>the little shit</i>—but in hindsight, it’s amazing that I cared so much about this 22-year-old’s opinion, and even more amazing that he’d read me attentively enough to discover an incipient tic. To this day, I credit Bobby with teaching me a valuable lesson: If you’re going to cede the power of the last word to someone else, you’d better be damn sure that person deserves it.</p><p><span>Bob M<span>c</span>Ilvaine Sr. </span>cries easily and regularly when you speak to him. Everyone in the family knows this and has grown accustomed to it—his grief lives close to the surface, heaving up occasionally for air. He cried at our first lunch after the McIlvaines picked me up at the train station a few months ago; he cried again just minutes into our first chat when the two of us were alone; he cried in a recent interview with Spike Lee for <a href="https://pressroom.warnermedia.com/us/media-release/hbo-0/hbo-documentary-films-and-spike-lee-production-monumental-documentary-event-nyc">a documentary series about 9/11 on HBO</a>.</p><p>In talking with Bob Sr., something heartbreaking and rudely basic dawned on me: September 11 may be one of the most-documented calamities in history, but for all the spools of disaster footage we’ve watched, we still know practically nothing about the last moments of the individual dead. It’s strange, when you think about it, that an event so public could still be such a punishing mystery. Yet it is, and it is awful—the living are left to perseverate, to let their imaginations run amok in their midnight corrals.</p><div><figure><picture></picture><figcaption>“The only thing I do is 9/11 stuff,” Bob McIlvaine Sr. says. “My whole basis of everything revolves around the day.” (Danna Singer)</figcaption></figure></div><p>For Bob Sr., what that meant was wondering where Bobby was and what he was doing when the chaos began. For years, that was all he could think about. The idea of Bobby suffering tortured him. Was he incinerated? Was he asphyxiated? Or even worse? “I think Bobby jumped,” he shouted up the stairs one day to his wife. The thought nearly drove Helen mad.</p><p>Over time, it became clear that Bobby didn’t jump. Bobby’s was one of fewer than 100 civilian corpses recovered from the wreckage. But it haunted Bob Sr. that he never saw the body. At the morgue on September 13, the pathologist strongly advised him against viewing it. Only years later—four? five? he can no longer remember—did he finally screw up the courage to go to the medical examiner’s office in New York City and get the official report.</p><p id="injected-recirculation-link-0" data-view-action="view link - injected link - item 1"><a href="https://www.theatlantic.com/magazine/archive/2002/07/excerpts-from-american-ground-unbuilding-the-world-trade-center/302542/">From the July/August, September, and October 2002 issues: Excerpts from William Langewiesche’s <em>American Ground: Unbuilding the World Trade Center</em></a></p><p>That’s when everything changed. “My whole thesis—everything I jump into now—is based upon his injuries,” he tells me. “Looking at the body, I came to the conclusion that he was walking in and bombs went off.”</p><p>A controlled demolition, he means. That is how he thinks Bobby died that day, and how the towers eventually fell: from a controlled demolition. It was an inside job, planned by the U.S. government, not to justify the war in Iraq—that was a bonus—but really, ultimately, to destroy the 23rd floor, because that’s where the FBI was investigating the use of gold that the United States had unlawfully requisitioned from the Japanese during World War II, which it then leveraged to bankrupt the Soviet Union. The planes were merely for show.</p><p><span>Does a man </span>wake up on September 12, 2001, and believe such a thing? No. This belief takes shape over the span of years, many years.</p><p>That first year, Bob Sr. was numb. His sole objective was to get through each day. But he eventually got involved in a group called 9/11 Families for Peaceful Tomorrows, protesting the wars in Afghanistan and Iraq. “It opened up my life,” he tells me. “I became very active. That’s how I grieved. It was perfect.”</p><p>Before Bobby went to Princeton, Bob Sr. had been indifferent to politics, voting sometimes for Democrats and sometimes for Republicans—including, he thinks, Ronald Reagan. “I was not a well-read person,” he says. “I owned a bar in the city. If I even mentioned the word <i>progressive</i>, my customers probably would have shot me.”</p><p>But then Bobby started taking classes with Princeton’s glamorous tenured radicals. He started writing for the school’s <i>Progressive Review</i>. His father devoured everything he wrote. Soon, he had Bob Sr. reading Howard Zinn’s <i>A People’s History of the United States</i> and <i>Z Magazine</i>, the radical monthly. Bob Sr. has been interested in politics ever since. “That’s all because of Bobby.”</p><p>So this anti-war activity? It <i>was </i>perfect—a natural outlet for him.</p><p>But as time wore on, Bob Sr. got impatient. In 2004, he went down to Washington to hear Condoleezza Rice speak to the 9/11 Commission, and <a href="https://www.americanprogress.org/issues/security/news/2004/04/07/714/911-testimony-of-national-security-adviser-condoleezza-rice/">her testimony</a>—or lack thereof, he’d say—so enraged him that he left in a huff, cursing in the halls of Congress. “I wanted answers,” he explains. Yet no answers were forthcoming. That’s when he realized: The government was hiding something. “I became militant,” he says. “To this day, I’m very militant.”</p><p>Bob Sr. is a bespectacled, soft-spoken man, slender and slightly stooped. But his affect is deceptive. We’re sitting in the upstairs den of the McIlvaines’ three-bedroom home in Oreland, Pennsylvania, the same house where Bobby and Jeff grew up. It’s sweet, modest, cluttered with family pictures. But this room has been transformed into a 9/11 research bunker, stuffed with books and carefully organized files—by event, subject, country. The largest piece of art on the wall is a world map freckled with pins marking every country that’s invited Bob Sr. to tell his story.</p><p>“I speak out so much, the word just spreads,” he tells me. “I’ll show you Italy.” Pictures and clippings from a Rome film festival, he means, because he appeared in the documentary <i>Zero: Inchiesta sull’11 Settembre</i>. He got to walk the red carpet. “The Russians came over. They spent two days here, wanted to hear what I had to say.” Meaning Russian state news agencies. They parked themselves on the McIlvaines’ back deck. “France came here, stayed a few days to talk.” Same deal, though he doesn’t remember which media outfit. (“My dad is practically a celebrity in that community,” Jeff told me.)</p><p>Crucial to Bob Sr.’s understanding of September 11—that it was the cynical skulduggery of the U.S. government, not a grisly act of terrorism by jihadists using commercial planes filled with helpless civilians—is the work of Architects &amp; Engineers for 9/11 Truth, which popularized the idea that jet fuel couldn’t burn at a high enough temperature to melt beams into molten steel. This is, it should go without saying, contrary to all observable fact.</p><p>But this theory is what Bob Sr. is eager to illustrate for me. He has visuals prepared, lots of building diagrams. I tell him we’ll get there; I just want to ask a few more questions about those early days—</p><p>He’s disappointed. “Everything I’ve done in my life is based upon those seconds.” This is something he very much wants to discuss.</p><p>And so we discuss it. Only a preplanned detonation, he argues, could bring down those towers, and only a lobby embroidered with explosives could explain the injuries to Bobby’s body. He has the full medical examiner’s report.</p><p>But a subtle thing made Bob Sr. think something was amiss. The report describes many lacerations and fractures, but they appear almost entirely on the front of Bobby’s body. The back of his corpse is basically described as pristine, besides multiple fractures to what remained of his head.</p><p>The story we’ve told ourselves all these years is that Bobby had already left the building when the planes hit. Bobby didn’t work in the World Trade Center; from what we could piece together, he’d gone to Windows on the World simply to help a new colleague set up for a morning presentation at an all-day conference, not to attend it. So Bobby did his part, was our assumption, then said his goodbyes and was making his way back to nearby Merrill Lynch when he was suddenly killed in the street by flying debris.</p><p>Bob Sr. doesn’t buy it. If that were true—if Bobby were moving <i>away</i> from the World Trade Center—wouldn’t he have fallen forward? Wouldn’t there be injuries on his <i>back</i>? “If you’re running away, it’d be more of a crushing type of thing,” he tells me. “Probably every bone in his body would be breaking.”</p><p>I tell him I’m not a pathologist, but it seems just as plausible to me that he heard the roaring sound of a plane flying too low and too fast, or maybe the sound of a hijacked aircraft hitting the North Tower itself, and turned around to see what had happened and never knew what hit him.</p><p>He rejects this explanation. “My theory is he was walking<i> into </i>the building at the time, because he had the conference up there.”</p><p>“I thought his conference started at 8:30?” I ask. The first plane hit at 8:46 a.m. That would have meant Bobby was arriving late.</p><p>“I thought it started at 9,” Bob Sr. says.</p><p>“Isn’t there a way to find out?” I ask.</p><p>“You know, to tell you the truth, I never …”</p><p>He’d never checked.</p><p><span>Breakfast and registration </span>for the conference began at 8 o’clock. Opening remarks were scheduled for 8:30. Bobby’s colleague was scheduled to speak at 8:40. The <a href="https://collection.911memorial.org/Detail/objects/24521">full brochure</a> is available on the 9/11 Memorial &amp; Museum’s website.</p><p>When I eventually visit Jen—she of the purloined diary, the woman to whom Bobby was about to be engaged—she shows me the daily planner that was sitting on his desk at Merrill. It’s cluttered with appointments. But the day of September 11 is blank. Whatever he was doing was not significant enough to merit its own entry.</p><p id="injected-recirculation-link-1" data-view-action="view link - injected link - item 2"><a href="https://www.theatlantic.com/family/archive/2019/09/after-911-i-raised-my-daughters-alone/597817/">Read: Everything my husband wasn’t there for</a></p><p>My brother also tells me that he still has the note Bob Sr. left for him on his kitchen table on Thursday, September 13. It said that an investigator with the New York City Police Department, Joe Gagliardi, had just come by to drop off the wallet they’d pulled from Bobby’s pocket. One line in particular stood out. <i>He was found on the perimeter.</i> Not near the lobby.</p><p>“Was he really?” Bob Sr. says when I phone him and ask him about the note. He’d completely forgotten that he’d written it. “If that’s true, that’s great.” He thinks for a moment. “Though the perimeter—he still could have been 10 feet away. He certainly wasn’t 100 feet from the building.”</p><p>I then tell him about the conference schedule, which actually did leave open the possibility that he was 100 feet from the building. If he’d left before his colleague started speaking—or the opening remarks—he could have been quite close to his office at Merrill Lynch, a five-minute walk away. Bob Sr. takes it all in. He repeats that he finds Bobby’s injuries too extreme, too savage, to be caused by flying debris. “But you know what?” he finally says. “That’s no longer relevant to me. My whole thing is who did it and why. It’s been 20 years and I<i> still </i>can’t get any answers.”</p><p><span>It takes me </span>some time, but eventually I summon the courage to ask Bob Sr. an obvious question: What makes his claims about the destruction of the World Trade Center more credible than the claims of, for instance, Donald Trump supporters who say the 2020 election was stolen?</p><p>“I can believe it was stolen!” he tells me. “But I’m not going to go around preaching that, because <i>I don’t know</i>. Because I’m doing <i>my</i> homework.” Bob Sr. is always reading. His latest is a biography of Allen Dulles. “Probably 99.9 percent of the people that you will find in those radical groups—the Oath Keepers, whatever—they really haven’t done any research.”</p><p>But then he adds that he sympathizes with Trump voters, as much as he despises Trump himself. “This country hasn’t done anything for them in such a long time. So you can’t blame them for voting for him.”</p><p><span>Bob Sr. asks </span>if I would like to see Bobby’s wallet. I didn’t realize he had it, but he does, stuffed in a biohazard bag, itself entombed in a plastic box in the room that once belonged to Bobby. He carefully opens them for me.</p><p>“Helen and Jeff have never seen this,” he tells me.</p><p>They haven’t?</p><p>“No.”</p><p>The wallet is covered in dust, still, and faintly redolent of that World Trade Center tang, a scent once so powerful that New Yorkers could smell it in their eyes. He starts pulling out a 26-year-old’s modest possessions: a Pennsylvania driver’s license, a Visa card, some kind of work or building ID, a library card. The wallet still contains $13 in cash, but the money is disintegrating, almost completely rotted away.</p><p>“The only thing I do is 9/11 stuff,” Bob Sr. says. “My whole basis of everything revolves around the day.”</p><p>This is not, it should be said, anything like what Helen does with her days. A two-decade investigation into 9/11 was not part of her retirement plan. In one of our earliest conversations, she specifically told me that she’d walk across the United States to <i>not</i> discover some of the things that Bob Sr. has learned. So as he and I sit here, inspecting a wallet that she’s never seen, I ask: Doesn’t all this searching, this interrogating, have unhealthy consequences for his marriage?</p><p>He readily admits that it does: “We’d socialize and she’d catch me saying stuff, and she would go nuts. She’d say, ‘Do not talk about 9/11.’ But then someone would come up to me and say, ‘Can I ask you about it?’ And I’d start talking. Then she’d find out about it. She’d get so upset.” They now tend to socialize separately. “I will talk 9/11 with anyone I see, if they want to talk about it,” he says. “And I think that’s why I don’t have many friends. They’re <i>afraid</i> I’m going to talk about it.”</p><p>It may be hard to imagine why anyone would want to spend so much time immersed in the story, sensations, and forensics of his son’s death. But for Bob Sr., that’s precisely the point: to keep the grief close. “I don’t want to get away from it,” he tells me. He <i>wants</i> to stay at the top of the mountain. This is how he spends time in Bobby’s company—by solving this crime, by exposing the truth about the abuses of American empire. “Doing what I’m doing, that’s really helped me, because I think of him every day. Every time I talk, I talk about Bobby.”</p><div><figure><picture></picture><figcaption>Bobby’s wallet is still covered in dust, and faintly redolent of the World Trade Center tang that hung over New York in the fall of 2001. (Danna Singer)</figcaption></figure></div><p>He’s aware that there are other ways to spend time with Bobby that wouldn’t be quite so excruciating. He could read his diaries, for example. To this day, he feels terrible that he handed that last one off to Jen. He felt so guilty about it for so long that he was still mentioning it in interviews in 2011. A British newspaper referred to it as “the journal episode.”</p><p>“I’m just not that big on the journals,” he tells me. “They don’t mean that much to me.”</p><p>So what means the most to you? I ask.</p><p>“That he was murdered,” he says.</p><p><span>On the morning </span>of September 11, Helen, the most stoic of the McIlvaines, was the only one who panicked. Jeff knew that his brother didn’t work in the World Trade Center. Bob Sr., who was teaching that day in the adolescent psych unit of a local hospital, treated the macabre, smoldering towers like a news event and, along with everyone else, began watching the coverage on TV.</p><p>Helen, however, took one look at the television and needed to sit down. She knew it seemed ridiculous, superstitious, but she’d spoken with Bobby the night before and forgotten to end the conversation the way she always did: “Be careful.” She’d later say those words to his casket as it was lowered into his grave.</p><p>By midday, when no one had heard from Bobby, everyone in the family felt like Helen. Yes, the cell towers were down in Lower Manhattan and the phones were working only sporadically, but surely Bobby, who could spend hours on the phone talking with his parents (<i>How do you guys find so much to talk about? </i>his friends always asked), would have found a way to call, and Jen had heard nothing, which <i>really</i> made no sense. Bobby had just asked her father for permission to marry her two days earlier.</p><p>In the late afternoon, Andre, his close friend and old suitemate, finally reached a woman at Merrill Lynch who awkwardly told him that Bobby and a colleague had been scheduled to attend a conference at Windows on the World that morning and no one had heard from them since. Andre called the McIlvaines.</p><p>“That first night was probably worse than after we found out for sure that he’d died,” Jeff says, “because we had no idea what had happened. I couldn’t get that out of my head—that he was <i>in </i>that, you know?”</p><p>They slept in the den, the three of them. Jen stayed in her own living room that night, glued to the TV.</p><p>On Wednesday morning, Jeff and Bob Sr. were too agitated to remain in Oreland. They took a train to New York and made a fruitless tour of the city’s triage centers. Nothing. My brother stood on line at a missing-persons center; Andre ran a command center out of his apartment, working the phones and every lead he had; Jeff checked every website he could find. <i>Refresh, refresh, refresh.</i></p><p>Jen sat and waited.</p><p>Bob Sr. spent Wednesday night in my brother and Bobby’s apartment, sleeping in his son’s bed.</p><p>The next day, Andre got a call from the NYPD, this time with grim news: Everyone needed to go immediately to <a href="https://amhistory.si.edu/september11/collection/record.asp?ID=63">the armory on Lexington Avenue</a>.</p><p>Once again, Andre had to tell the McIlvaines. Helen calmly did as she was told. She treated these instructions as if she were an astronaut, doing whatever step came next if one of the modules of the International Space Station caught on fire.</p><p>The armory was a seething mass of the desperate. Hundreds of families were lined up outside, carrying posters with faces of their loved ones. A minister escorted my brother, Jen, Andre, and the McIlvaine family inside. Helen gave him Bobby’s name. A police officer approached her from across the room. “Are you the mother?”</p><p>Much of what followed was a blur. They were shown to a private room where grief counselors descended on them. Then something unusual happened: Rudy Giuliani walked in.</p><p>The mayor was unaccompanied. Without aides, without cameras, nothing. He looked genuinely relieved to have a family to console at that moment, with so many bereaved New Yorkers still twisting in limbo, posting flyers with pictures of the missing on lampposts, chain-link fences, hospital walls.</p><p>Giuliani embraced everyone. Then he took a seat opposite the McIlvaines. He uttered just five words: “Tell me about your son.”</p><div><figure><picture></picture><figcaption>After Bobby died, Helen McIlvaine begged his girlfriend, Jen, to share his final diary with the family, to no avail. (Danna Singer)</figcaption></figure></div><p><span>If Bob Sr. </span>chose to feed his grief, Helen chose to starve hers. She spoke about it with her limping group, because they understood. But she was determined not to be, as she puts it, “At-Least-I’m-Not-Helen.” Living with the impossible was hard enough. But to be in the position of having to console others about her misfortune, or to manage their discomfort, or, worst of all, to smile politely through their pity—that was more than she could bear. Helen can still rattle off a list of all the well-meaning things people said that stung.</p><p><i>No parent should bury a child.</i></p><p><i>You will never be the same.</i></p><p><i>I was with my children last night and realized you’ll never have something like that again.</i></p><p>Did people not realize that they were building a moat, not a bridge, when they said such things? That they were drawing attention to the pretty castles they lived in, their walls still lined with luck?</p><p>That first year was brutal. Once, while she was sitting in a diner with some friends, one of them started going on and on about the musical talents of her son. “I wanted to scream,” Helen says. “I had to get out. I couldn’t listen to somebody else talk about their child. For years. I couldn’t.”</p><p>The second year wasn’t much better. She tried going to Italy on a tour with a friend. She says she came across as cold, distant, strange. She dreaded the most innocuous question: <i>Have any kids?</i></p><p>Work helped. Her students needed her, and her colleagues were great. “Except I didn’t want their help, because it was too soon,” Helen says. “So afterwards, a few years down the road, I looked like I’d healed. And it wasn’t true. I <i>wanted</i> to talk about it sometimes. But I had to find other means to do it, because I’d kind of shut that door.”</p><p>I can’t decide whether this corresponds with the Helen I’ve come to know. Maybe?</p><p>Helen: She wears little or no makeup. She is exceedingly good-humored. She is always brimming with questions about your life. She’s the kind of person who goes along with any plan and can spend 20 minutes in a drugstore trying on funny pairs of reading glasses with you.</p><p>We actually did this together in Florida a couple of years ago. We both happened to be visiting my mom.</p><p>So the reserve she’s describing is a little foreign to me. “I have a weird personality,” she tells me. “I can cry over a blouse that I ruined in the laundry and then be stoic for something …” She trails off, but I believe the word she’s looking for is<i> big</i>.</p><p>But with Bobby … ! Bobby brought out her more emotional self, because he was such a sensitive kid. “Once, after about half an hour of listening to his woe-is-me girlfriend stories,” she tells me, “I said to him, ‘You do understand I’ve been married to Dad for almost 30 years and I’ve never given him this much thought, right?’ ” But of course she loved every minute of it.</p><p>The last time she saw Bobby was two nights before he died. Not an hour before, he had asked Jen’s father for permission to marry her; now the two families were having dinner at a restaurant in Lambertville, New Jersey, where Jen had an apartment. Helen took one look at her son and saw that his forehead was still shimmering with sweat. She reached under the table to find his hand. He locked his pinkie with hers. They stayed that way until the food came.</p><p><span>Around the tenth <span>anniversary</span></span> of September 11, Helen realized that she was not all right. She’d lost a child, so maybe this was what her new life was destined to be: not all right. But she wasn’t convinced. Somewhere along the way, her toughness, her steadfast refusal to be a victim—it had backfired. “I found myself being petty. And bickering. I found myself being too gossipy sometimes.”</p><p>I’ve never heard Helen say a cross word about anyone. Even when I mention that I’ll soon be seeing Jen, she reacts with anxiety, not bitterness. She doesn’t want to open old wounds. They were both suffering terribly back then; neither was her finest self.</p><p>Okay, but what if she lends me the diary? I ask.</p><p>“Oh my God. Would you marry me?”</p><p>But this is today’s Helen. The Helen of a decade ago decided she wasn’t who she wanted to be. Her therapy had stalled. She had trouble managing her anger. “My life just feels so amazingly off kilter,” she wrote in a reminiscence marking the tenth anniversary.</p><p>She’d kept too much in, and she was fermenting in her own brine.</p><p>Not long after, she started seeing a different therapist. This one was spiritual. That new perspective changed everything. “She really believes that we don’t see all.”</p><p>Even before Bobby died, Helen was a big fan of self-help books. But after September 11, she bought them by the dozen, hoovering up everything she could about loss. She found Elisabeth Kübler-Ross indispensable—not so much for her writing about the five stages of grief, though that was fine, but for her writing about life after death.</p><p>Kübler-Ross once considered a belief in the afterlife a form of denial. But starting in the mid-1970s, she had a change of heart, compiling thousands of testimonies from those who’d had near-death experiences in order to show that our souls outlast us.</p><p>“I looked at life-after-death books, but they were too faith-based,” Helen says. “I <i>wanted</i> to believe what I was taught in my Catholic upbringing. But what I liked about Kübler-Ross is that she had a science background.”</p><p>It was precisely because she was a scientist, of course, that Kübler-Ross’s fellow physicians were so dismayed by this strange turn in her interests. They thought it kooky and unrigorous, a stain on her legacy. I tell this to Helen. She laughs. “Bet they didn’t sell millions of books.”</p><p>Kübler-Ross used a hokey but intuitive metaphor to describe the body and soul: Our bodies are our mortal coils, our “cocoons”; when we die, we shudder them off and our souls—our “butterflies”—are released into the wilds of the universe. Helen cherished this idea. It was a notion that could redeem a violently, capriciously abbreviated life. “One day I actually thought, <i>What if there’s a hierarchy and Bobby’s a part of that, and he just came down as a human for a bit? </i>”</p><p>She and Bob Sr. began watching <i>Supernatural </i>and<i> Buffy the Vampire Slayer</i>, shows they’d never have imagined watching before.</p><p>And here in this world, Helen came to understand that there was nothing to be gained by bottling up her grief. At age 60, she took up running, not only because it felt good but because it allowed her to cry. She started expressing herself more. She noticed one day that the tempest of grievances she unloosed in her therapist’s office were all so trivial, so petty, so <i>pointless</i>. What was she getting so worked up about?</p><p>Now she’s doing the very thing the self-help books tell you to do: letting stuff go. She tells me about a friend whose towering self-involvement used to infuriate her. But recently, she chatted with her on the phone and decided just to enjoy the good bits.</p><p>Wow, I say. What makes you so forgiving?</p><p>“It wasn’t serving me well.”</p><p><span>You know what </span>radical acceptance is? Living with a husband who has dedicated his life to spreading the word that the United States deliberately orchestrated the collapse of the World Trade Center and then conspired to cover it up. Forget all the chipper advice columns about how to get along with your Trump-loving uncle at Thanksgiving. How do you get on in your decades-long marriage after your son has died and your spouse wakes up each morning livid as an open wound and determined to expose the truth?</p><p>Helen would be lying if she said this didn’t cause friction.</p><p>“There were many moments where I was like, <i>Oh, please</i>,” she says. She was perfectly open to some of the things Bob Sr. said. “But a lot of it was emotional, and a lot of it, I couldn’t trace to find out myself, and I’m not a go-on-a-website kind of person. I didn’t want to burst his bubble by constantly saying, ‘Well, did you check, is it a valid website?’ ”</p><p>Perhaps the more challenging issue, the nuts-and-bolts-of-living-in-a-marriage issue, was daily conversation. Bob Sr.’s single-minded focus meant that any conversation could segue without warning into September 11. She’d come downstairs and tell him she was thinking about buying a new sweater; he’d reply by asking if she knew that the government had lied about the actual date of Osama bin Laden’s death.</p><p>“So has it gotten in the way?” she asks. “Yeah, many times. We’d be going somewhere, and I’d say to Bob, ‘You <i>cannot</i> talk about 9/11.’ And he’d say, ‘Well, they ask me about it.’ I fell for that for the first 99 times until my therapist said, ‘That’s not good enough.’ When we’re out at a social event, we’re out. I don’t want to be always <i>victim, victim, victim</i>.”</p><p>How do you handle it now, I ask, if you feel another soliloquy coming on?</p><p>“Now I say, ‘Bob, you have the I-won’t-talk-about-anything-else-but-9/11 look on your face.’ We’ve come to a point where we can actually joke about it.”</p><p>Helen wants me to understand: There are some aspects of Bob Sr.’s obsessions that she doesn’t merely tolerate; she actively supports them. Two years ago, she listened to a presentation by Architects &amp; Engineers for 9/11 Truth and found it persuasive. It’s the other parts of his narrative, which keep evolving, that leave her at loose ends. “If I were him, I’d just stick with the buildings,” she says. I ask if she’s up-to-date on his latest theory, involving Japanese gold. She shakes her head. “I don’t even hear it,” she says. “I’m defending the person, not the view.”</p><p>Long ago, Helen realized that “9/11 truth,” as Bob Sr. likes to call it, had sunk its hooks into her husband, and she’s never thought it her place to pry them loose. “I’m very protective of him,” she says. “If he decided to be a male stripper in an old people’s home, it’s okay with me. He has to be who he has to be, because damn it, this happened, you know? And if that’s going to give him comfort—”</p><p>She interrupts herself, gives an embarrassed smile. “Get that visualization out of your head.”</p><p>Helen would never dream of abandoning this dear man. He was Bobby’s Little League coach. The one who organized races around the house when the kids were little, using a piece of tape for the finish line. Bob Sr. was her only suitor who ever suggested they play sports together—the others thought that was strictly for the fellas.</p><p>And now he’s the only other person in the world who understands what it feels like to have raised Bobby McIlvaine and lost him.</p><p>She walks me over to the wall with a giant framed poster she had custom-made for her husband five years ago. It’s a periodic table of Bob Sr., basically—dozens of images of him, all tidily laid out in a grid. Bob Sr. talking to Rosie O’Donnell. Bob Sr. giving an interview on French television. Bob Sr. speaking at a forum about the 9/11 Commission report, captured on C-SPAN. “I gave him that on his 70th birthday,” she says. She went online, punched his name into Google, and voilà. A hero’s gallery. “I love looking at it.” He’s become the superstar, strangely, that his son never had the chance to be.</p><p>Bob Sr.’s crusade may look to the outside world like madness. Helen sees it as an act of love. “He’s almost going to war for his son,” she tells me. “He’s being a father in the best way he knows how. How can I not allow that?”</p><p><span>Most theories of grief,</span> particularly the ones involving stages, are more literary than literal. People don’t mourn sequentially, and they certainly don’t mourn logically. But there’s an aspect of one of those models I keep circling back to whenever I think of the McIlvaines. It’s the “yearning and searching” stage of grief, first described by the British psychiatrists <a href="https://jamanetwork.com/journals/jama/fullarticle/205661">Colin Murray Parkes and John Bowlby</a> in the 1960s. “When searching,” Parkes writes, “the bereaved person feels and acts as if the lost person were recoverable, although he knows intellectually that this is not so.”</p><p>How Bob Sr. searches is obvious. But it occurs to me, after speaking with Helen, that perhaps her years-long preoccupation with Bobby’s final diary is her equivalent of Bob Sr.’s obsessions. “Yes!” she says when I tentatively raise the possibility. “Yes, yes. It’s ‘If I can’t have<i> this</i>, then I’ll have <i>that</i>.’ ”</p><p>Yet here’s what’s curious. Helen has two earlier diaries of Bobby’s. She also has stacks of legal pads of his writing, many with diarylike entries in them. But she’s barely dipped into them at all.</p><p>One reason is practical: They’re hard to decipher. Bobby’s handwriting is neat but small and slightly peculiar. Another is instinctive: For a long time, Helen feared that reading them would be a violation of a sacred boundary, “like going into his room without knocking.” Yet another is how much pain it causes her. “I tried today again,” she wrote in another reminiscence on the tenth anniversary of Bobby’s death. “I thought, ‘If I don’t tackle these before I’m dead, who will?’ ” She lasted 10 minutes. Bob Sr. has never looked at them at all.</p><p>“But somewhere I did find the words <i>Life loves on</i>,” Helen tells me.</p><p>I’ve been meaning to ask her about this, because I’m now reading Bobby’s diaries and legal pads, and I can’t find the phrase anywhere. Does she still not know where it came from?</p><p>She doesn’t. She thought he’d written it about a close family friend who’d died, but she was wrong. I tell her I’ll keep looking.</p><p>I take one of the two diaries back to my hotel that night. And I realize, as I’m reading, that there’s probably another reason Helen never dug too deep into either one of them. They’re from his freshman and sophomore years of college, when he was still a proto-person, still essentially a kid. He was clearly older when he scribbled in some of those legal pads, but they’re chaotic and undated. Only the diaries feel manageable and chronological, and they read like the musings of a boy in his late teens—florid, soulful, a little mushy. He doesn’t sound at all like the Bobby of September 11, 2001, who was almost 27 years old.</p><p>Yet I still get a kick out of them, and those chaotic legal pads, especially the parts about writing. Even at 19, Bobby was trying to find his voice, sometimes shifting from the first person to the third to see if he liked it better (and then saying so in the margins—<i>third-person experiment!</i>). They’re filled with exhortations and reminders to himself: <i>I need to stay true to my voice, whatever it is. I write horrible stuff in other people’s voices. </i>And my favorite: <i>Hope is even more important than talent</i>.</p><p>There’s also tons of beautiful stuff about his family. This may be what astonishes me most, given that Bobby was in late adolescence, a time when most kids morph into ruthless family vivisectionists. Yet he devotes page after page to how much he loves and admires Helen, Bob Sr., and Jeff. In May 1995, for instance, he wrote about discovering that Bob Sr.’s father had been an alcoholic. Bobby had had no inkling. <i>He made sure that he didn’t give me the bullshit</i>, Bobby wrote of his own father.</p><div><blockquote>He made sure I had something better, and only asked that I do my best. That’s all he asked. That’s all my mom asked. And I want so badly to make them proud, even more proud than they already are. They deserve the pride. They deserve more than I can ever give them, and yet they will never ask for more than me. I love them so much.</blockquote></div><p>You can hardly blame Helen for wanting to hear what he had to say once he’d become a young man.</p><div><figure><picture></picture><figcaption>Jen Middleton, Bobby’s soon-to-be fiancée when he died, has not spoken to the McIlvaines in nearly two decades. (Danna Singer)</figcaption></figure></div><p><span>Jen Cobb, now Middleton,</span> wears her hair long, rather than in her old pixie cut, but her style and demeanor remain the same. She is still animated, still gracious, still beautiful to look at; when I walk up to her door in Washington, D.C., she greets me with a long hug. There are rescue dogs, there are sunlit rooms, there is a kitchen straight from a Nancy Meyers film. (I half-expect Meryl Streep to come gliding up with a tray of unbaked croissants.)</p><p>Jen has made for herself what is, to all outward appearances, a lovely life. But she had to assemble that life brick by brick, and she works hard to keep the joints from coming apart.</p><p>When I spoke briefly with Helen about Jen, she made an astute observation: Jen came from a family with lots of money but little love, while the McIlvaines had lots of love but little money. Jen says that yes, that’s partly true, though her mother was a loving soul; she just didn’t see enough of Jen’s life. Susan E. Cobb died on April 20, 2001, less than five months before Bobby did, of a cancer that spread slowly, then fast.</p><p>Which is to say: On September 11, Jen was already a husk of herself.</p><p>Jen’s father, her remaining parent, was highly successful but only narrowly rational, a bully and a screamer. This had predictable consequences in her romantic life: Jen always demanded complete control. She was done being bossed around.</p><p>Then along came Bobby, asking for more vulnerability and a shared say in both of their lives. Somehow, she trusted him. They first met a couple of years earlier, at the PR firm Burson-Marsteller, and around the office, he was known as the good guy who made everyone feel important. The inveterate romantic, he made <i>her</i> feel important, asking question after question about her family, writing her love notes for no reason. For her 27th birthday, on December 6, 2000, he asked my brother to scram and rearranged the furniture in their apartment to turn it into a restaurant, where he cooked her a three-course meal.</p><p>Jen would later learn that the dinner was a dry run for a proposal. She put a hold on the Ritz-Carlton in Philadelphia for October 20, 2002.</p><p>When her mother died, Jen could barely function. Her mother was the one who’d protected her from her father’s storms of rage; she was the one who’d chatted with her late at night after Jen had spent a boisterous evening out with girlfriends. Yet Bobby remained steadfastly by her side, making the intolerable seem survivable. He would be with her every step of the way. She would still be loved.</p><p>Then Bobby died. The world became a mean, untrustworthy place. “There was not one thing I could control,” she says. “Not one thing at all.”</p><p><span>Jen keeps a </span>steamer trunk of Bobby’s things in the attic above her garage. In anticipation of my arrival, she’s brought his belongings down in a turquoise canvas bag. She starts sifting through it. “There’s the diary,” she says, pointing. “The thing that caused all that trouble.”</p><p>Bobby’s other two diaries were hundreds of pages long. This one, I will shortly discover, had only 17 pages of entries. All that fuss over what was barely a pamphlet.</p><p>Then again, they’re a dense 17 pages.</p><p>Jen has no memory of getting the diary from Bob Sr. But she does remember reading it immediately, voraciously, and returning to it night after night. She remembers, too, Helen asking for it back, though the tensions didn’t start immediately. At first, everything was fine. Helen even gave her the engagement ring Bobby had bought for her. It was awkward and unceremonious—“He’d have wanted you to have this”—but Jen was grateful, and she wore it everywhere for months.</p><p>At some point, though, Helen started getting more vocal about that diary. “In hindsight, I don’t know what my problem was,” Jen says. “I was probably in pain and also grasping for control and wanted something of his that no one else had. It seems kind of ridiculous now. It’s just how I felt at the time—that it was mine and I wanted it to be mine and I didn’t want anyone else to have it. It probably felt like it was all I had left.”</p><div><figure><picture></picture><figcaption>Jen and Bobby in 2001; the ring Bobby planned to propose to Jen with. (Danna Singer; original photo courtesy of Jen Middleton)</figcaption></figure></div><p>What I had to understand about those awful, leaden days, Jen says, is that she wasn’t just depressed. She was wretched—“double grieving,” as she puts it, for her mother and then her future husband. When her mother and Bobby died in rapid succession, she fell into a deep depression, though she did her valiant best to conceal it. She still has anxiety attacks to this day. “When something upsets me,” she says, “it goes downhill fast.”</p><p>Which all makes perfect sense, I say. The only thing I can’t understand is why she refused to transcribe the nonpersonal parts of Bobby’s diary for Helen. That’s not the act of a depressed person or a grieving person. That’s the act of someone who’s angry. She must have been upset with Helen for some reason, no?</p><p>Here Jen pauses. Then she starts measuring her words. “This isn’t a knock on Helen at all,” she says. “I’m so beyond it. But at the time I remember resenting that she said, ‘You’re going to be okay, because you’re young.’ ” Jen recognized that there was a difference between their two losses. “But it felt like she was saying my grief was less important than hers. I know it was coming from a place of extreme pain, but I remember thinking, <i>How does she know I’m going to be okay? What if I’m </i>not<i> okay? What if I have a different kind of not-okay? </i>”</p><p>One thing you don’t say to a person who’s mourning, Jen tells me, is that they’re going to be okay. She might have added: Nor do you say that to a depressed person. Depression does that—convinces you that you are never going to be okay.</p><p>“Now I get it,” she says. Because of course Helen was right. Jen did find love again. But at the time, she was convinced that she wouldn’t. She considered freezing her eggs. Once, in a moment of near-hallucinatory panic, she wondered if she could get impregnated with Bobby’s DNA from strands of hair he’d left in a comb.</p><p>“It just would’ve come out better if she’d said: ‘This is really sucky for you. And I’m sorry. Chances are, you’ll meet somebody.’ I guess there was just a nicer way to say it,” she says. “However she said it set me off. Just because of my own personal shit.”</p><p>I ask if it’s possible that Helen <i>did </i>say those things, though she may have said a few artless things too. Maybe Jen missed them—or heard insults that weren’t necessarily intended as such—because she’d grown up in a house that required an extra set of threat detectors, given her father’s volatility.</p><p>“A hundred percent,” she says. “It was probably me regressing into a little, you know, tantruming child. I was mad at the world. Of course she didn’t intend to hurt me. She’s the nicest person.”</p><p>She and Helen are more similar than either of them realizes. Like Helen, Jen believed, at the time, in hiding her grief. Like Helen, she today takes refuge in the idea that Bobby’s soul is rattling about somewhere. “I’m really showing my woo-woo side here,” she says, “but I think that he’ll be back, and I’ll be back, and we’ll finish our unfinished business.”</p><p>And like Helen, she has learned to let a lot of things go. That’s one of the most ruthless lessons trauma teaches you: You are not in charge. All you can control is your reaction to whatever grenades the demented universe rolls in your path. Beginning with whether you get out of bed. “And that’s where I started my day, literally,” she says. For years.</p><p>Today, Jen is choosing to hand me Bobby’s diary as I’m walking out the door and heading back to New York. She has zero reservations about it. She says she’d like to have the original copy back, but there’s no rush; the McIlvaines are free to read all of it, free to make as many photocopies as they’d like.</p><p>“I would have done it years ago,” she tells me. “I think about them all the time.”</p><p>Before I leave, I ask if she remembers where the phrase <i>Life loves on</i> comes from. She looks at me blankly. “I don’t even remember him <i>saying</i> that. Is it in a book that he liked or something?” Tried that, I say. Searched Google Books. Nope. “Or was it a hymn?” Hymns aren’t my strong suit, but I don’t think so. I tell her that the McIlvaines are certain Bobby wrote it somewhere, but never mind, this is not her problem. I’ll keep looking.</p><p><span>Memories of traumatic experiences</span> are a curious thing. Some are vivid; some are pale; pretty much all of them have been emended in some way, great or small. There seems to be no rhyme or reason to our curated reels. We remember the trivial and forget the exceptional. Our minds truly have minds of their own.</p><p>Jeff, for instance, remembers that Jen stayed at his parents’ house for half a year after Bobby died, while Helen says it was one week, and Jen thinks it was probably two months.</p><p>Or here’s another: Jen remembers that Jeff gallantly slept in Bobby’s childhood bedroom while she stayed with them, so that she wouldn’t have to be traumatized by waking up to all of Bobby’s things, while Jeff remembers <i>her</i> sleeping in Bobby’s bedroom, and bravely waking up each day to all of Bobby’s things.</p><div><figure><picture></picture><figcaption>“I knew that if this ruined <em>my</em> life, <em>his</em> whole life was worthless,” Jeff McIlvaine says. “I wanted to work very hard to make sure that I had a good life.” (Danna Singer)</figcaption></figure></div><p>And strangest of all: Though no one can remember where <i>Life loves on</i> came from, everyone—and I do mean everyone (Jen, Jeff, Bob Sr., and Helen)—once knew.</p><p>It’s from Jen’s eulogy. Which she based on Bobby’s diary. The one she kept for 20 years.</p><p>“This past week I have been searching for some sort of comfort to get me through the shock of losing the love of my life,” she told the mourners at Queen of Peace Church. “I came across one of Bob’s journals and as I opened it, I said to myself, ‘Please let there be something in here that will comfort me.’ ” Then she described finding this passage, which Bobby had written as her mother was dying. She read it aloud.</p><p><i>It is OK for people to die. It hurts, and it is a deep loss, but it is OK. Life loves on. Do not fear for those who are dying. Be kind to them. And care for them.</i></p><p>“Life loves on,” she repeated to the crowd. “After I read this, I vowed that very instant to love on in my life, just as I had made a promise to my mom to never let her be forgotten. It was a way that I could extend a life cut short.”</p><p>The only reason I know this is because my brother found a copy of Jen’s eulogy. Jen had tossed hers out. She is not, as she says, a saver.</p><p>Somehow she’d completely forgotten those words, as well as their provenance. And the McIlvaines had forgotten where they came from, too, even though Helen wears them in an engraved bracelet and Bob Sr. enshrined them on his skin.</p><p>Then I remembered what Helen told me about Jen: <i>She became a nonperson to me</i>. She kept the words. But not Jen. She buried her future daughter-in-law too that year, just as she did her son.</p><p><span>Helen recently told me</span> a story about a long weekend she’d spent with Jen, maybe 10 days before Bobby died. The whole family was vacationing in Cape May. She, Bobby, and Jen were sitting on the beach, staring at the waves, with Bobby in the middle. It was a moment of gentle bliss. Helen turned ever so slightly toward Bobby to run her hand through his hair. But at that exact same moment, that very second, Bobby turned to do the same to Jen.</p><p>It was then that Helen realized Bobby wasn’t hers anymore. “I said to myself, <i>You gotta go take a walk and look at the real estate on the beach</i>,” she told me.</p><p>In Bobby’s early diaries, the McIlvaine family may show up everywhere. But not in this diary. This diary is primarily about two things. And one of them is Jen.</p><div><blockquote><p><span>February 18, 2001:</span> I love her, deeply. We communicate so well. We resolve splits between us so well. And all of this means a lot.</p> <p><span>April 11, 2001:</span> I miss Jen. “Big” part of my life, or descriptions of how much she means to me do not suffice.</p> <p><span>April 22, 2001 (two days after jen’s mother died): </span>I am so sorry, Jen. So sorry for your hurt. I know it is hard. I’ll be here by your side—here to love you, to listen to you, to hold you when you need to cry.</p></blockquote></div><p>It’s no wonder Jen didn’t want to part with this diary. Or that she read it every night.</p><p>Helen recognized this immediately. I sent her a couple of xeroxed copies after I returned to New York.</p><p>“The Jen piece was huge to me,” she says, when we have a chance to talk. “I thought of this in the middle of the night: She loses this guy that she loves—and most importantly, who loves her. Now, where is the <i>proof </i>that he loves her? I mean, okay, the mother gives her the ring. That’s good. But there are these wonderful words: <i>I love her deeply</i>.” She marvels. “I never thought about that. Never. That she needed that, that validation.”</p><p>She also recognizes what the diary is missing. “He didn’t say, <i>I love my parents too</i>. He said,<i> I love her deeply</i>.” Bobby was all grown up.</p><p>Helen now wonders about her own behavior in those awful months. She tried to show Jen affection. But she’d only had sons. She didn’t <i>speak</i> daughter. And that reserve she was describing to me earlier, the reserve I didn’t believe she had—it was very real. “What happens is, I have intentions sometimes and forget to say the words,” she says. “She had to guess what was in my head.”</p><p>At any rate, Helen is now clear on one very important point. “It would have been beyond Jen’s ability, even if she was in a good mood, to say, ‘Okay, here, I’m giving it back.’ I really would have had to give her at least pieces of that, somehow. That wasn’t for me to own. I really mean that.”</p><p>For years, Jen had been painted as a villain for holding on to this diary. Yet there never would have been a dispute if she had already been Bobby’s wife, or perhaps even his official fiancée. But Jen was suspended between worlds, without influence or status. “It must have felt horrible,” Helen says.</p><p>The final entry in Bobby’s diary is dated September 6, 2001. It fills the whole page. When I first read it, I was disoriented. Then I realized what it was. “I feel completely unprepared. Should I rehearse?” it begins.</p><div><blockquote>It should go something like this: Do you have a few minutes to talk? First, I’d like to say that it has been a pleasure—or maybe a great experience—or do I mention Jen first? Or, I have developed a very strong relationship with Jen, and along the way it has been great to spend time in Michigan … OR … yes—I’ve had the chance to grow close to Jen, and after a lot of very serious thought, and after talking to her too, I felt that it is time to make a commitment to her. OR—after a good deal of serious thought … AND … out of respect for you as head of the family …</blockquote></div><p>What I was reading was a script. Filled with fits and starts, but eventually he got there. Bobby was struggling to find the words to say to Jen’s father, whom he’d see on September 9, to ask for her hand.</p><p><span>At some point, </span>not long after Jen gave me Bobby’s diary, I sent a note to my editor, telling him that I had found, at long last, the elusive <i>Life loves on</i>. I took a photo of the passage and sent it to him.</p><p><i>Amazing</i>, he texted.</p><p>But then, three pulsing dots in a bubble. He was still typing.</p><p><i>Except … I think it is (sort of) a misapprehension. Look how he writes his I’s in other words. I think it says “Life **lives** on.” But hard to say for sure</i> <i>… </i></p><p>It wasn’t hard to say. He was right. I went through the whole diary again. On just the page before, Bobby had written, <i>I lived too long without thinking of “the markets” to suddenly care</i>. But it looks like “I <i>loved </i>too long …” His <i>I </i>’s look like backwards <i>J </i>’s, which can be mistaken for <i>O</i>’s, while his real <i>O</i>’s stand alone, like baby moons.</p><p>I texted Jen the same photograph I sent my editor. At first, she didn’t see it. Then she did. Her initial reaction was the same as mine: anxiety, despair in the form of an expletive. Then:</p><p><i>Still makes me smile</i></p><p>I did. The phrase certainly sounded like something Bobby <i>could </i>have said. It was very Yoda, and Bobby was definitely very Yoda, spouting his little aphorisms about the drives of the human heart. To me, it was the difference between the spirit of the law and the letter of the law, or maybe what we do when we intensify the color of an image on our iPhone. We’re not trying to create a fake; we’re trying to align the image with the one that already lives in our memory.</p><p>We are always inventing and reinventing the dead.</p><p>You could make a case, weirdly, that Jen’s withholding of the diary for all these years turned out to be a blessing. If she’d given it to Helen, it’s possible Helen would have tucked it away in her safe for 10 years and barely read it, just as she did the other two diaries. Or maybe she’d have read it, but she wouldn’t have <i>mis</i>read it.</p><p>Instead, Jen misread it, formed a eulogy around it, and handed the McIlvaine family an organizing motto for their grief for 20 years.</p><p>I still debated not telling the McIlvaines. I mean, the bracelet, the tattoo. But in a phone conversation with Helen soon after, I sensed an opening. I mentioned that I wasn’t sure I was going to write about <i>Life loves on</i>. She quickly intuited that something was amiss. “Because it was from somebody else?” she asked.</p><p>Kind of, I said. And I explained.</p><p>Helen was fine with it. She sees the unlikely beauty of this misunderstanding, even how it was a gift. But she holds out the possibility that the phrase still lurks somewhere. She remembers it as <i>Life </i>truly<i> loves on</i>, for one thing. And it’s possible that I could have missed it in the hundreds of pages of Bobby’s first two diaries. There are probably some missing diaries, too—why did he stop keeping them in 1995, only to resume in 2001?</p><p>So really, who’s to say?</p><div><figure><picture></picture><figcaption>In Bobby’s final diary entry, a few days before 9/11, he was working</figcaption></figure></div><p><span>L<i>ife lives on</i><em>, Life loves on</em></span>—to me, it’s irrelevant. There are far more beautiful observations in the recovered diary than that one, and they’re prescient, eerie—much more germane to the McIlvaines’ story once Bobby was gone.</p><p>Because the other thing his diary is about, the second thing, is grief.</p><p>In this way, the diary isn’t just a time capsule. It’s a crystal ball. Through an extraordinary twist of fate, Bobby spent his final few months thinking about what it meant to live with loss. He saw, through Jen, that it could render you angry, irritable, skinless. He saw that grief could utterly consume. He wondered what the utility of all this sadness was, all this suffering. <i>Why do we have to hurt so badly?</i> he wrote. <i>Is that the way the person we lost would have wanted it to be?</i></p><p>At one point, he guiltily wished that Jen would just make a choice to seize control of the things she could.</p><p>Yet somewhere amid all the passages of exasperation and dread—and many of them are quite detailed—Bobby comes to a much larger realization. It’s an epiphany, I’m guessing, that made it possible for him to stick with his plan to ask Jen’s father for permission to marry her, though he seriously questioned during those months whether she was ready. The date was August 20, 2001.</p><p><i>There are people that need me. And that, in itself, is life. There are people I do not know yet that need me. That is life.</i></p><p>To me, <i>that </i>is the most profound quote from the recovered diary. <i>That </i>is Bobby as Yoda. <i>That </i>is Bobby at his very finest, his most humane, his most mature. He understood that our commitments to one another are what we’re here for—<i>and that, in itself, is life</i>. Even when those commitments are hard. Even when they cause us pain.</p><p><span>One hesitates to say this.</span> But if there was any path forward for the McIlvaine family, it was probably going to be through Jeff. Helen was careful never to burden him with expectations about marriage or kids—“You cannot put <i>anything </i>on the other child,” she tells me—and he appreciated that. But it was thanks to Jeff, I think, that Bob Sr. and Helen started to muddle their way out of the dark. There were people they did not know yet who needed them. Among those people were their four grandbabies. The oldest one is named Bobby.</p><p>At 22, Jeff had a profound insight. “I remember thinking on that first day: <i>I can’t let this ruin me</i>. ’Cause then what would Bobby think? Imagine if he knew that my parents and his brother were never able to recover. Imagine how bad that would make him feel.”</p><p>He was reflexively answering the very question Bobby had asked as he watched Jen struggle with her grief: <i>Why do we have to hurt so badly? Is that the way the person we lost would have wanted it to be? </i>Jeff had a very clear answer: No. He had too much of his own life left to go. “I knew that if this ruined<i> my </i>life, <i>his</i> whole life was worthless,” he says. “I wanted to work very hard to make sure that I had a good life.”</p><p>It was so hard at first. “I remember I felt a responsibility to not die, which is a weird thing,” he tells me. At the same time, he felt guilty for being the child who didn’t die, thinking often of the dream sequence in <i>Stand by Me </i>when the father snarls “It should have been you” to his surviving son. He told no one at his first real job that his brother had died on September 11, because too many people were eager to share their own stupid stories about that day, always with happy endings. This delayed his ability to grieve for years.</p><p>But eventually, he built a rich, fulfilling life. He married a woman who could not only subdue his pain but enter an entire grieving ecosystem. He had four kids—four! two boys, two girls—and oh, the relief of not having to focus on himself!</p><p>I ask if he would have had that many kids if Bobby hadn’t—</p><p>“No. I don’t think I would have.” Jeff lost his only sibling. He never wants any child of his to be in that position, should lightning ever restrike. “When you go through something like this,” he says, “you realize that family—it’s the <i>only </i>thing.”</p><p>Those kids are now at the center of the McIlvaines’ lives—even Bob Sr., who has chosen a path of daily suffering. As our conversation was winding down, he said something that stunned me: This 20th-anniversary year—a big one for the people in his world, filled with TV interviews and conferences—may be his last of 9/11 activism.</p><p>I wasn’t sure I believed it. I remain unsure. This has been his life for 20 years. Still: Maybe it’s time for a change. “I’m sick of being angry,” he told me. “That’s the beauty of my life now. I can really separate. I truly can. To be out to lunch with Penelope …”</p><p>Penelope is his youngest granddaughter. He and Helen had lunch with her every Wednesday after preschool before the pandemic. Jeff and his wife and children rely so heavily on Bob and Helen that they recently rented an apartment five minutes from Jeff’s house, though they live less than an hour away.</p><p>Helen can’t get over having little girls in her life. They have so many opinions! She still gets depressed sometimes. She’ll have a beautiful moment, then realize that Bobby isn’t here to share it. “But then it’ll go away,” she says. “I mean, being needed—not everybody gets four grandkids.”</p><p>Yes. Being needed. That is everything.</p><p><span>Bobby would have been</span> 46 this September. Jeff used to have vivid dreams about him, and man, how he loved them. They were brothers again, just talking, resuming their old rhythms and habits. But he seldom has those dreams anymore. “I haven’t seen him in 20 years, you know?”</p><p>He says he almost wishes sometimes that he could trade his current well-being for the suffering he felt 20 years ago, because Bobby was so much easier to conjure back then, the sense-memories of him still within reach. “No matter how painful September 11 was,” he explains, “I had just seen him on September 6.”</p><p>It’s the damnedest thing: The dead abandon you; then, with the passage of time, you abandon the dead.</p><p>It’s really not surprising that Jeff should have this fantasy from time to time, to trade his happiness for just one chance to see Bobby again in a warmer hue. As Bobby wrote in that last diary, suffering, or the prospect of it, is the price we’re willing to pay for the bonds we make.</p><p>Helen has found herself in the grip of a similar reverie. Recently, she was out with her limping group, and as she was looking around the table, staring in gratitude at these women who have held her up these past 20 years, a thought occurred to her. “I wondered, <i>What if God said, ‘Okay, look, we gotta rewind here.’ Would we go through all of this again? </i>”</p><p>Would they be willing to relive their same lives, give birth to those same children, fall in love with them and then lose them a second time? “And I know that every single one of them would have said, emphatically, yes.”</p><p>For Helen, nothing in this world has rivaled the experience of raising her two boys. One of them, Robert George McIlvaine, died before his life truly began. But what would she have done without him, or he without her? For 26 years, she got to know this boy, to care for him, to love him. It was a privilege. It was a gift. It was a bittersweet sacrifice. <i>And that, in itself, is life.</i></p><hr/><p><small><i>This article appears in the September 2021 print edition with the headline “Twenty Years Gone.”</i></small></p></section></article></div>]]></content:encoded>
      <pubDate>Tue, 10 Aug 2021 21:46:40 +0000</pubDate>
      <source>https://www.theatlantic.com/magazine/archive/2021/09/twenty-years-gone-911-bobby-mcilvaine/619490/</source>
    </item>
    <item>
      <title>Open-sourcing a more precise time appliance</title>
      <link>https://engineering.fb.com/2021/08/11/open-source/time-appliance/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___engineering_fb_com_2021_08_11_open-source_time-appliance_/image.jpg" /> 
<div id="readability-page-1" class="page"><div>

		<ul>
<li aria-level="1"><span>Facebook engineers have built and open-sourced an Open Compute Time Appliance, an important component of the modern timing infrastructure.</span></li>
<li aria-level="1"><span>To make this possible, we came up with the Time Card — a PCI Express (PCIe) card that can turn almost any commodity server into a time appliance. </span></li>
<li aria-level="1"><span>With the help of the OCP community, we established the </span><a href="http://ocptap.com"><span>Open Compute Time Appliance Project</span></a><span> and open-sourced every aspect of the </span><a href="http://opentimeserver.com/"><span>Open Time Server</span></a><span>.</span></li>
</ul>
<p><span>In March 2020, we announced that we were in the process of switching over the servers in our data centers (together with our consumer products) to </span><a href="https://engineering.fb.com/2020/03/18/production-engineering/ntp-service/"><span>a new timekeeping service based on the Network Time Protocol (NTP)</span></a><span>. The new service, built in-house and later open-sourced, was more scalable and improved the accuracy of timekeeping in the Facebook infrastructure from 10 milliseconds to 100 microseconds. </span><span>More accurate time keeping enables more advanced infrastructure management across our data centers, as well as faster performance of distributed databases.</span></p>
<p><span>The new NTP-based time architecture uses a </span><a href="https://engineering.fb.com/2020/03/18/production-engineering/ntp-service/"><span>Stratum 1</span></a><span> — an important component that is directly linked to an authoritative source of time, such as a global navigation satellite system (GNSS) or a cesium clock.</span></p>
<p></p>
<p><span>Many companies rely on public NTP pools such as time.facebook.com to act as their Stratum 1. However, this approach has its drawbacks. These pools add dependency on internet connectivity and can impact overall security and reliability of the system. For instance, if connectivity is lost or an external service is down, it can result in outages or drift in timing for the dependent system.</span></p>
<p><span>To remove these dependencies, we’ve built a new dedicated piece of hardware called Time Appliance, which consists of a GNSS receiver and a miniaturized atomic clock (MAC). Users of time appliances can keep accurate time, even in the event of GNSS connectivity loss. While building our Time Appliance, we also invented a Time Card, a PCIe card that can turn any commodity server into a time appliance.</span></p>
<h2><span>Why do we need a new time device?</span></h2>
<p><span>Off-the-shelf time appliances have their own benefits. They work right out of the box and because many of these devices have been on the market for decades, they are battle-tested and generally stable enough to work without supervision for a long time.</span></p>
<p><span>However, these solutions also come with trade-offs:</span></p>
<ul>
<li aria-level="1"><span>In most cases, they are outdated and often vulnerable to software security concerns. Feature requests and security fixes may take months or even years to implement.</span></li>
<li aria-level="1"><span>These devices come with closed source software, which makes configuring and monitoring them limited and challenging. While configuration is done manually via a proprietary CLI or Web UI, monitoring often uses SNMP, a protocol that was not designed for this purpose.</span></li>
<li aria-level="1"><span>They include proprietary hardware that is not user-serviceable. When a single component breaks, there is no easy way to replace it. You have to either ship it to the vendor for repair or buy an entire new appliance.</span></li>
<li aria-level="1"><span>Since off-the-shelf devices are made in low quantities, they come with a higher markup and can become very costly to operate over time. The high cost associated with off-the-shelf devices create limitations for many in the industry. An open source version would open the door to broader applications.</span></li>
</ul>
<p><span>Until now, companies have had to accept these trade-offs and work within the constraints described above. We</span> <span>decided it was time to try something different, so we took a serious look at what it would take to build our new Time Appliance — specifically, one using the x86 architecture.</span></p>
<h2><span>Prototyping the Time Appliance </span></h2>
<p><span>Here’s a block diagram of what we envisioned:</span></p>
<p><span> </span><span><br/>
</span><span>It all starts from a GNSS receiver that provides the time of day (ToD) as well as the one pulse per second (PPS). When the receiver is backed by a high-stability oscillator (e.g., an atomic clock or an oven-controlled crystal oscillator), it can provide time that is nanosecond-accurate. The time is delivered across the network via an off-the-shelf network card which supports PPS in/out and hardware time stamping of packets, such as the NVIDIA Mellanox ConnectX-6 Dx used in our initial appliance.</span></p>
<p><span>The output of the GPS disciplined oscillator (GPSDO) was fed into the EXT time-stamping of the ConnectX-6 Dx network card. In addition, the GNSS receiver provides the ToD via a serial port and a popular GPS reporting protocol called NMEA. Using </span><span>ts2phc</span><span> tool allowed us to synchronize the physical hardware clock of the network interface controller (NIC) down to a couple of tens of nanoseconds, as shown below:</span></p>
<p></p>
<p><span>Our prototype gave us confidence that building such an appliance was possible. However, there was a lot of room for improvement.</span></p>
<p><span>To increase the reliability of the system, we divided it into two major parts: payload and delivery. The payload is the precision time that is essentially an interpolation system driven by a local oscillator to create nanoseconds of time measurement between consecutive PPS signals received by the GNSS receiver. We considered putting the GNSS receiver, the high-stability local oscillator, and the necessary processing logic into a PCIe form factor, and we called it the Time Card.</span></p>
<p></p>
<p><span>Here is the sketch of the Time Card we initially envisioned on a napkin:</span></p>
<p></p>
<p><span>We used an onboard MAC, a multiband GNSS receiver, and a field-programmable gate array (FPGA) to implement the time engine. The time engine’s job is to interpolate in nanoseconds the granularity required between consecutive PPS signals. The GNSS receiver also provides a ToD in addition to a 1 PPS signal. In the event of the loss of GNSS reception, the time engine relies on the ongoing synchronization of the atomic clock based on an average ensemble of the consecutive PPS pulses. </span></p>
<p><span>The time engine consists of a set of processing blocks implemented on the FPGA of the Time Card. These processing blocks include various filtering, synchronization, error checking, time-stamping, and PCIe-related subsystems to allow the Time Card to perform as a system peripheral that provides precision time for the open time server.</span></p>
<p><span>It should be noted that the accuracy of a GNSS receiver is within tens of nanoseconds, while the required ongoing synchronization (calibration) of the MAC is within 10 picoseconds (1,000 times more accurate). </span></p>
<p><span>At first, this sounds impossible. However, the GNSS system provides timing based on continuous communication with standard time. This ability allows the GNSS onboard clock to be constantly synchronized with a source of time provided to its constellation, giving it virtually no long-term drifting error. Therefore, the MAC’s calibration is performed via a comparison of a MAC-driven counter and the GNSS-provided PPS pulse. Taking more time for the comparison allows us to achieve a higher precision of calibration for the MAC. Of course, this is with the consideration that the MAC is a linear time invariant system.</span></p>
<p></p>
<p><span>In this block diagram, you can see a 10 MHz signal from the rubidium clock entering the time engine. This clock signal can be replaced by a 10 MHz SMA input. The clock signal feeds into a digital clock module and a digital PLL (12.5x resulted from 25 up and divided by 2), resulting in a 125 MHz frequency. The 125 MHz (8-nanosecond periods) feeds into the ToD unit.</span></p>
<p></p>
<p><span>The ToD unit associates the 8-nanosecond increments in digital values of 0b000001 since the LSB (least significant bit) is associated to 250 picoseconds (driven from 32 bits of subsecond accuracy on the gPTP).</span></p>
<p><span>On the other hand, the PPS signal coming filtered from the GNSS is used to snapshot the result of the increments. If the 125 MHz is accurate, the accumulated increments should result in exactly 1-second intervals. However, in reality, there is always a mismatch between the accumulated value and a theoretical 1-second interval.</span></p>
<p><span> </span><span><br/>
</span><span>The values can be adjusted using an internal PI (proportional and integral) control loop. The adjustment can be done by either altering the 0b000001 value by steps of 250 picoseconds or fine-tuning the 12.5x PPL. In addition, further (more finely tuned) adjustments can be applied by steering the rubidium oscillator. </span></p>
<p><span>The longer a GNSS isn’t available, the more time accuracy is lost. The rate of the time accuracy deterioration is called holdover. Usually, holdover is described as a timeframe for accuracy and how long it takes to exceed it. For example, the holdover of a MAC is within 1 microsecond for 24 hours. This means that after 24 hours, the time accuracy is nondeterministic but accurate within 1 microsecond.</span></p>
<p><span>As an alternative approach, we are counting on the new generation of chip-scale and miniaturized atomic clocks with their capability to receive PPS inputs. This allows the time engine of the Time Card to hand off the ultraprecision syntonization of the high-stability oscillator to the component rather than use digital resources to reach the target. </span></p>
<p><span>As a general principle, the more accurate the tuning, the better the holdover performance that can be achieved. In terms of delivery, using a NIC with precision timing ensures that network packets receive very accurate time stamps, which is critical for keeping the time precise as it is shared with other servers across the network. Such a NIC can also receive a PPS signal directly from the Time Card.</span></p>
<p><span>After conceptualizing the idea and various implementation iterations, we were able to put together a prototype. </span></p>
<p></p>
<h2><span>The Time Appliance in action</span></h2>
<p><span>The Time Card allows any x86 machine with a NIC capable of hardware time-stamping to be turned into a time appliance. This system is agnostic to whether it runs for NTP, PTP, SyncE, or any other time synchronization protocol, since the accuracy and stability provided by the Time Card is sufficient for almost any system. </span></p>
<p><span></span></p>
<p><span>The next step would be to install Linux. The Time Card driver is included in Linux kernel </span><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=773bda96492153e11d21eb63ac814669b51fc701"><span>5.15</span></a><span> or newer. Or, it can be built from the</span><a href="https://github.com/opencomputeproject/Time-Appliance-Project/tree/master/Time-Card/DRV"> <span>OCP GitHub repository</span></a><span> on kernel 5.12 or newer.</span></p>
<p><span>The driver will expose several devices, including the PHC clock, GNSS, PPS, and atomic clock serial:</span></p>
<pre><code>$ ls -l /sys/class/timecard/ocp0/
lrwxrwxrwx. 1 root    0 Aug  3 19:49 device -&gt; ../../../0000:04:00.0/
-r--r--r--. 1 root 4096 Aug  3 19:49 gnss_sync
lrwxrwxrwx. 1 root    0 Aug  3 19:49 i2c -&gt; ../../xiic-i2c.1024/i2c-2/
lrwxrwxrwx. 1 root    0 Aug  3 19:49 pps -&gt; ../../../../../virtual/pps/pps1/
lrwxrwxrwx. 1 root    0 Aug  3 19:49 ptp -&gt; ../../ptp/ptp2/
lrwxrwxrwx. 1 root    0 Aug  3 19:49 ttyGNSS -&gt; ../../tty/ttyS7/
lrwxrwxrwx. 1 root    0 Aug  3 19:49 ttyMAC -&gt; ../../tty/ttyS8/
</code></pre>
<p><span>The driver also allows us to monitor the Time Card, the GNSS receiver, and the atomic clock status and flash a new FPGA bitstream using the <code>devlink</code> cli.</span></p>
<p><span>The only thing left to do is to configure the NTP and/or PTP server to use the Time Card as a reference clock. To configure chrony, one simply needs to specify <code>refclock</code> attribute:</span></p>
<pre><code>$ grep refclock /etc/chrony.conf
refclock PHC /dev/ptp2 tai poll 0 trust
</code></pre>
<p><span>And enjoy a very precise and stable NTP Stratum 1 server:</span></p>
<pre><code>$ chronyc sources
210 Number of sources = 1
MS Name/IP address         Stratum Poll Reach LastRx Last sample
===============================================================================
#* PHC0                          0   0   377     1     +4ns[   +4ns] +/-   
36ns
</code></pre>
<p><span>For the PTP server (for example, </span><a href="https://github.com/facebookincubator/ptp"><span>ptp4u</span></a><span>) one will first need to synchronize Time Card PHC with the NIC PHC. This can be easily done by using the <code>phc2sys</code> tool which will sync the clock values with the high precision usually staying within single digits of nanoseconds:</span></p>
<pre><code>$ phc2sys -s /dev/ptp2 -c eth0 -O 0 -m</code></pre>
<p><span>For greater precision, it’s recommended to connect the Time Card and the NIC to the same CPU PCIe lane. For greater precision, one can connect the PPS output of the Time Card to the PPS input of the NIC.</span></p>
<p><span>To validate and confirm the precision, we’ve used an external validation device called Calnex Sentinel connected to the same network via several switches and an independent GNSS antenna. It can perform PPS testing as well as NTP and/or PTP protocols: </span></p>
<p></p>
<p><span>The blue line represents NTP measurement results. The precision stays within ±40 microseconds throughout the 48-hour measurement interval.</span></p>
<p><span>The orange line represents PTP measurement results. The offset is practically 0 ranging within nanoseconds range.</span></p>
<p><span>Indeed, when we compare 1 PPS between Time Card output and the internal reference of the Calnex Sentinel, we see that the combined error ranges within ±200 nanoseconds:</span></p>
<p></p>

<p><span>But what’s even more important is that these measurements demonstrate stability of the Time Appliance outputs.</span></p>
<p><span>In the event of the GNSS signal loss, we need to make sure the time drift (aka holdover) of the atomic-backed Time Card stays within 1 microsecond per 24 hours. Here is a graph showing the holdover of the atomic clock (SA.53s) over a 24-hour interval. As you can see, the PPS drift stays within 300 nanoseconds, which is within the atomic clock spec.</span></p>
<p></p>
<p><span>The modular design of the Time Card allows the swap of the atomic clock with an oven-controlled crystal oscillator (OCXO) or a temperature compensated crystal oscillator (TCXO) for a budget solution with the compromise on the holdover capabilities. </span></p>
<h2><span>Open-sourcing the design of the Time Appliance</span></h2>
<p><span>Building a device that is very precise, inexpensive, and free from vendor lock was an achievement on its own. But we wanted to have a greater impact on the industry. We wanted to truly set it free and make it open and affordable for everyone, from a research scientist to a large cloud data center. That’s why we engaged with the Open Compute Project (OCP) to create a brand-new </span><a href="http://www.ocptap.com/"><span>Time Appliance Project</span></a><span> (TAP). Under the OCP umbrella, we open-sourced at the Time Appliance Project </span><a href="https://github.com/opencomputeproject/Time-Appliance-Project"><span>GitHub repository</span></a><span>, including the specs, schematics, mechanics, BOM, and the source code. Now, as long as printing the PCB and soldering tiny components does not sound scary, anyone can build their own Time Card for a fraction of the cost of a regular time appliance. We also worked with several vendors such as </span><a href="https://www.orolia.com/about-the-atomic-reference-time-card-art-card/"><span>Orolia</span></a><span> who will be building and selling time cards, and NVIDIA who are selling the precision timing-capable ConnectX-6 Dx (and the precision timing-capable BlueField-2 DPU).</span></p>
<p><span>We published an Open Time Server spec at </span><a href="http://www.opentimeserver.com"><span>www.opentimeserver.com</span></a><span>, which explains in great detail how to combine the hardware (Time Card, Network Card, and a commodity server) and the software (OS driver, NTP, and/or PTP server) to build the Time Appliance. Building an appliance based on this spec will give full control to the engineers maintaining the device, improving monitoring, configuration, management, and security.</span></p>
<p><span>The Time Appliance is an important step in the journey to improve the timing infrastructure for everyone, but there is more to be done. We will continue to work on other elements, including improving the precision and accuracy of the synchronization of our own servers, and we intend to continue sharing this work with the Open Compute community.  </span></p>

		
	</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 11:37:48 +0000</pubDate>
      <source>https://engineering.fb.com/2021/08/11/open-source/time-appliance/</source>
    </item>
    <item>
      <title>The Ancient Persian way to keep cool</title>
      <link>https://www.bbc.com/future/article/20210810-the-ancient-persian-way-to-keep-cool</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___www_bbc_com_future_article_20210810-the-ancient-persian-way-to-keep-cool/image.jpg" /> 
<div id="readability-page-1" class="page"><div><div><section id="futurearticle20210810-the-ancient-persian-way-to-keep-cool"><div id="headline-futurearticle20210810-the-ancient-persian-way-to-keep-cool"><div><p>The ancient Persian way to keep cool</p></div><div><picture><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rtttz.webp" type="image/webp"/><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rtttz.jpg" type="image/jpeg"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rtttz.webp" type="image/webp"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rtttz.jpg" type="image/jpeg"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rtttz.webp" type="image/webp"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rtttz.jpg" type="image/jpeg"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rtttz.webp" type="image/webp"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rtttz.jpg" type="image/jpeg"/></picture></div></div><div><div><div><article><div><p>From ancient Egypt to the Persian Empire, an ingenious method of catching the breeze kept people cool for millennia. In the search for emissions-free cooling, the &#34;wind catcher&#34; could once again come to our aid.</p><div><div><p>T</p><div><div><p>The city of Yazd in the desert of central Iran has long been a focal point for creative ingenuity. Yazd is home to a system of ancient engineering marvels that include an underground refrigeration structure called <em><a href="https://theculturetrip.com/middle-east/articles/this-ancient-technique-to-make-ice-in-the-desert-is-mind-boggling/">y</a><a href="https://theculturetrip.com/middle-east/articles/this-ancient-technique-to-make-ice-in-the-desert-is-mind-boggling/">akhchāl</a></em>, an underground irrigation system called <em><a href="https://www.bbc.com/travel/article/20180619-irans-ancient-engineering-marvel">qanats</a></em>, and even a network of couriers called <em><a href="https://www.bbc.com/travel/article/20200624-iran-the-surprising-origins-of-the-postal-service">pirradaziš</a></em> that predate postal services in the US by more than 2,000 years.</p>
<p>Among Yazd&#39;s ancient technologies is the wind catcher, or <em>bâdgir</em> in Persian. These remarkable structures are a common sight soaring above the rooftops of Yazd. They are often rectangular towers, but they also appear in circular, square, octagonal and other ornate shapes.</p>
<p>Yazd is said to have the most wind catchers in the world, though <a href="https://www.bbc.com/travel/article/20180926-an-ancient-engineering-feat-that-harnessed-the-wind">they may have originated in ancient Egypt</a>. In Yazd, the wind catcher soon proved indispensable, making this part of the hot and arid Iranian Plateau livable.</p>
<p>Though many of the city&#39;s wind catchers have fallen out of use, the structures are now drawing academics, architects and engineers back to the desert city to see what role they could play in keeping us cool in a <a href="https://www.bbc.co.uk/news/science-environment-57751918">rapidly heating world</a>.</p></div></div></div></div><div><div id="future/article/20210810-the-ancient-persian-way-to-keep-cool-p09rttxb"><div><picture><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rttxb.webp" type="image/webp"/><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rttxb.jpg" type="image/jpeg"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rttxb.webp" type="image/webp"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rttxb.jpg" type="image/jpeg"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rttxb.webp" type="image/webp"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rttxb.jpg" type="image/jpeg"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rttxb.webp" type="image/webp"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rttxb.jpg" type="image/jpeg"/></picture><div><p>The openings of the towers face the prevailing wind, catching it and funneling it down to the interior below (Credit: Alamy)</p></div></div></div></div><div><div><div><div><p>As a wind catcher requires no electricity to power it, it is both a cost-efficient and green form of cooling. With conventional mechanical air conditioning already <a href="https://www.iea.org/reports/the-future-of-cooling">accounting for a fifth of total electricity consumption globally</a>, ancient alternatives like the wind catcher are becoming an <a href="https://www.bbc.com/future/article/20190822-are-there-alternatives-to-air-conditioning">increasingly appealing option</a>.</p>
<p>There are two main forces that drive the air through and down into the structures: the incoming wind and the change in buoyancy of air depending on temperature – with warmer air tending to rise above cooler, denser air. First, as air is caught by the opening of a wind catcher, it is funneled down to the dwelling below, depositing any sand or debris at the foot of the tower. Then the air flows throughout the interior of the building, <a href="https://www.sciencedirect.com/science/article/pii/S1364032114008351">sometimes over subterranean pools of water for further cooling</a>. Eventually, warmed air will rise and leave the building through another tower or opening, aided by the pressure within the building.</p>
<p>The shape of the tower, alongside factors like the layout of the house, the direction the tower is facing, how many openings it has, its configuration of fixed internal blades, canals and height are all finely tuned to improve the tower&#39;s ability to draw wind down into the dwellings below.</p></div></div></div></div><div><div><div><div><p>Using the wind to cool buildings has a history stretching back almost as long as people have lived in hot desert environments. Some of the <a href="https://ascelibrary.org/doi/10.1061/9780784413517.161">earliest wind-catching technology comes from Egypt 3,300 years ago</a>, according to researchers Chris Soelberg and Julie Rich of Weber State University in Utah. Here, buildings had thick walls, few windows facing the Sun, openings to take in air on the side of prevailing winds and an exit vent on the other side – known in Arabic as <em><a href="https://orbi.uliege.be/bitstream/2268/167581/1/Attia_Designing%20the%20Malqaf%20for%20summer%20cooling%20in%20low-rise%20housing,%20an%20experimental%20study.pdf">malq</a><a href="https://orbi.uliege.be/bitstream/2268/167581/1/Attia_Designing%20the%20Malqaf%20for%20summer%20cooling%20in%20low-rise%20housing,%20an%20experimental%20study.pdf">af architecture</a></em>. Though some argue that <a href="https://www.bbc.com/travel/article/20180926-an-ancient-engineering-feat-that-harnessed-the-wind">the birthplace of the wind catcher was Iran itself</a>.</p>
<p>Wherever it was first invented, wind catchers have since become widespread across the Middle East and North Africa. Variations of Iran&#39;s wind catchers can be found in the <em>barjeels</em> of Qatar and Bahrain, the <em>malqaf</em> of Egypt, the <em>mungh</em> of Pakistan, and <a href="https://eprints.whiterose.ac.uk/112557/3/A%252520review%252520on%252520windcatcher%252520for%252520passive%252520cooling%252520and%252520natural%252520ventilation%252520in%252520buildings%20%281%29.pdf">many other</a><a href="https://eprints.whiterose.ac.uk/112557/3/A%252520review%252520on%252520windcatcher%252520for%252520passive%252520cooling%252520and%252520natural%252520ventilation%252520in%252520buildings%20%281%29.pdf"> places</a><a href="https://eprints.whiterose.ac.uk/112557/3/A%252520review%252520on%252520windcatcher%252520for%252520passive%252520cooling%252520and%252520natural%252520ventilation%252520in%252520buildings%20%281%29.pdf">, notes </a><a href="https://eprints.whiterose.ac.uk/112557/3/A%252520review%252520on%252520windcatcher%252520for%252520passive%252520cooling%252520and%252520natural%252520ventilation%252520in%252520buildings%20%281%29.pdf">Fatemeh Jomehzadeh of the University of Technology Malaysia and colleagues</a>.</p></div></div></div></div><div><div id="future/article/20210810-the-ancient-persian-way-to-keep-cool-p09rtv6p"><div><picture><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rtv6p.webp" type="image/webp"/><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rtv6p.jpg" type="image/jpeg"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rtv6p.webp" type="image/webp"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rtv6p.jpg" type="image/jpeg"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rtv6p.webp" type="image/webp"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rtv6p.jpg" type="image/jpeg"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rtv6p.webp" type="image/webp"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rtv6p.jpg" type="image/jpeg"/></picture><div><p>Due to long disuse, many of Iran&#39;s windcatchers are not in a good state of repair. But some researchers would like to see them restored to working order (Credit: Alamy)</p></div></div></div></div><div><div><div><div><p>The Persian civilisation is widely considered to have added structural variations to allow for better cooling – such as combining it with its existing irrigation system to help to cool the air down before releasing it throughout the home. In Yazd&#39;s hot, dry climate, these structures proved remarkably popular, until the city became a hotspot of soaring ornate towers seeking the desert wind. The historical city of Yazd was recognised as a Unesco World Heritage site in <a href="https://whc.unesco.org/en/list/1544/">2017</a>, in part for its proliferation of wind catchers.</p>
<p>As well as performing the functional purpose of cooling homes, the towers also had a strong cultural significance. In Yazd, the wind catchers are as much a part of the skyline as the Zoroastrian Fire Temple and Tower of Silence. Among them is the wind catcher at the Dowlatabad Abad Gardens, said to be the <a href="https://www.researchgate.net/figure/The-eight-sided-wind-catcher-of-Dowlat-Abad-Gardens-edifice-in-Yazd-is-the-tallest-in_fig2_308532117">tallest in the world at 33m</a> (108ft) and one of the few wind catchers still in operation. Housed in an octagonal building, it overlooks a fountain stretching past rows of pine trees.</p></div></div></div></div><div><div><div><div><p>The emissions-free cooling efficacy of such wind catchers make some researchers argue that they are due a revival.</p>
<p>Parham Kheirkhah Sangdeh has extensively studied the scientific application and surrounding culture of wind catchers in contemporary architecture at Ilam University in Tehran, Iran. He says inconveniences like pests entering the chutes and the gathering of dust and desert debris have meant many have turned away from traditional wind catchers. In their place are mechanical cooling systems, such as conventional air-conditioning units. Often, those options are powered by fossil fuels and use <a href="https://www.bbc.com/future/article/20201204-climate-change-how-chemicals-in-your-fridge-warm-the-planet">refrigerants that act as powerful greenhouse gases if released into the atmosphere</a>.</p></div></div></div></div><div><div id="future/article/20210810-the-ancient-persian-way-to-keep-cool-p09rtvlr"><div><picture><source media="(min-width:624px)" srcset="https://ychef.files.bbci.co.uk/1024x1280/p09rtvlr.webp" type="image/webp"/><source media="(min-width:624px)" srcset="https://ychef.files.bbci.co.uk/1024x1280/p09rtvlr.jpg" type="image/jpeg"/><source media="(min-width:485px)" srcset="https://ychef.files.bbci.co.uk/885x1280/p09rtvlr.webp" type="image/webp"/><source media="(min-width:485px)" srcset="https://ychef.files.bbci.co.uk/885x1280/p09rtvlr.jpg" type="image/jpeg"/><source media="(min-width:320px)" srcset="https://ychef.files.bbci.co.uk/720x900/p09rtvlr.webp" type="image/webp"/><source media="(min-width:320px)" srcset="https://ychef.files.bbci.co.uk/720x900/p09rtvlr.jpg" type="image/jpeg"/></picture><div><p>The wind catchers of Iran have inspired modern designs in Europe, the US and elsewhere, as architects turn towards passive forms of cooling (Credit: Alamy)</p></div></div></div></div><div><div><div><div><p>The advent of modern cooling technologies has long been blamed for the deterioration of traditional methods in Iran, <a href="https://doi.org/10.2307/4300566">the historian of Iranian architecture Elizabeth Beazley wrote in 1977</a>. Without constant maintenance, the harsh climate of the Iranian Plateau has worn away many structures from wind catchers to ice houses. Kheirkhah Sangdeh also sees the shift away from wind catchers as in part down to a tendency among the public to engage with technologies from the West.</p>
<p>&#34;There needs to be some changes in cultural perspectives to use these technologies. People need to keep an eye on the past and understand why energy conservation is important,&#34; Kheirkhah Sangdeh says. &#34;It starts with recognising cultural history and the importance of energy conservation.&#34;</p>
<p>Kheirkhah Sangdeh hopes to see Iran&#39;s wind catchers updated to add energy-efficient cooling to existing buildings. But he has met many barriers to his work in the form of ongoing international tensions, the coronavirus pandemic and ongoing<a href="https://www.bbc.com/news/av/world-middle-east-57948717"> water shortage</a>. &#34;Things are so bad in Iran that [people] take it day by day,&#34; says Kheirkhah Sangdeh.</p></div></div></div></div><div><div id="future/article/20210810-the-ancient-persian-way-to-keep-cool-p09rtttz"><div><picture><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rtttz.webp" type="image/webp"/><source media="(min-width:1200px)" srcset="https://ychef.files.bbci.co.uk/1600x900/p09rtttz.jpg" type="image/jpeg"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rtttz.webp" type="image/webp"/><source media="(min-width:880px)" srcset="https://ychef.files.bbci.co.uk/1280x720/p09rtttz.jpg" type="image/jpeg"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rtttz.webp" type="image/webp"/><source media="(min-width:576px)" srcset="https://ychef.files.bbci.co.uk/976x549/p09rtttz.jpg" type="image/jpeg"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rtttz.webp" type="image/webp"/><source media="(min-width:224px)" srcset="https://ychef.files.bbci.co.uk/624x351/p09rtttz.jpg" type="image/jpeg"/></picture><div><p>Yazd is said to have the most wind catchers of any city in the world (Credit: Alamy)</p></div></div></div></div><div><div><div><div><p>Fossil-fuel-free methods of cooling like the wind catcher might well be due a revival, but to a surprising extent they are already present – albeit in a less magnificent form than those in Iran – in many Western countries.</p>
<p>In the UK, <a href="https://www.semanticscholar.org/paper/Evaluation-of-pressure-coefficients-and-estimation-Karakatsanis-Bahadori/6cfc2eb6ccf3b79c2197db02df62c31ee14e0b99">some 7,000 variations of wind catchers were installed in public buildings between 1979 and 1994</a>. They can be seen from buildings such as <a href="https://www.monodraught.com/projects/royal-chelsea-hospital">the Royal Chelsea Hospital in London</a>, to <a href="https://www.sciencedirect.com/science/article/abs/pii/S1364032116310358?via%3Dihub">supermarkets in Manchester</a>.</p>
<p>These modernised wind catchers bear little resemblance to Iran&#39;s towering structures. On one three-storey building on a busy road in north London, small hot pink ventilation towers allow passive ventilation. Atop a shopping centre in Dartford, <a href="https://www.visionventilation.co.uk/architectural-inspired-designs/">conical ventilation towers rotate to catch the breeze with the help of a rear wing that keeps the tower facing the prevailing wind</a>.</p>
<p>The US too has adopted wind-catcher-inspired designs with enthusiasm. One such example is the visitor center at <a href="http://sipb.sggw.pl/CRC2014/data/papers/9780784413517.161.pdf">Zion National Park</a> in southern Utah. The park sits in a high desert plateau, comparable to Yazd in climate and topography, and the use of passive cooling technologies including the wind catcher nearly eliminated the need for mechanical air-conditioning. Scientists have recorded a temperature difference of 16C (29F) between the outside and inside of the visitor centre, despite the many bodies regularly passing through.</p>
<p>There is further scope for the spread of the wind catcher, as <a href="https://www.theccc.org.uk/2017/08/08/hidden-problem-overheating/">the search for sustainable solutions to overheating continues</a>. In Palermo, Sicily, researchers have found that <a href="https://www.tandfonline.com/doi/abs/10.1080/14733315.2016.1214397">the climate and prevailing wind conditions make it a ripe location for a version of the Iranian wind catcher</a>. This October, meanwhile, the wind catcher is set to have a high-profile position at <a href="https://www.bbc.co.uk/news/business-56682427">the World Expo</a> fair in Dubai, as part of <a href="https://www.querkraft.at/en/projects/expo-pavilion">a network of conical buildings in the Austrian pavilion</a>, where the Austrian architecture firm Querkraft has taken inspiration from the Arabic <em>barjeel</em> version of the wind tower.</p>
<p>While researchers such as Kheirkhah Sangdeh argue that the wind catcher has much more to give in cooling homes without fossil fuels, this ingenious technology has already migrated further around the world than you might think. Next time you see a tall vented tower on top of a supermarket, high-rise or <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwjH7rK7kKTyAhWiwOYKHStlCpgQFnoECA4QAw&amp;url=https%3A%2F%2Fs3-eu-west-1.amazonaws.com%2Fmonodraught%2Fdownloads%2Fprojects%2Faddey-and-stanhope-shool-windcatcher-case-study.pdf%3Fv%3D2&amp;usg=AOvVaw2b0GfphSTbK_2wygJxCHG9">school</a>, look carefully – you might just be looking at the legacy of the magnificent wind catchers of Iran.</p>
<p>--</p>
<p><em>The emissions from travel it took to report this story were 0kg CO2. The digital emissions from this story are an estimated 1.2g to 3.6g CO2 per page view. </em><a href="https://www.bbc.com/future/article/20200131-why-and-how-does-future-planet-count-carbon"><em>Find out more about how we calculated this figure here</em></a><em>.</em></p>
<p>--</p>
<p><em>Join one million Future fans by liking us on </em><a href="https://www.facebook.com/BBCFuture/"><strong><em>Facebook</em></strong></a><em>, or follow us on </em><a href="https://twitter.com/BBC_Future"><strong><em>Twitter</em></strong></a><em> or<strong> </strong></em><a href="https://www.instagram.com/bbcfuture_official/"><strong><em>Instagram</em></strong></a><em>.</em></p>
<p><em>If you liked this story, </em><a href="http://pages.emails.bbc.com/subscribe/?ocid=fut.bbc.email.we.email-signup"><strong><em>sign up for the weekly bbc.com features newsletter</em></strong></a><em>, called &#34;The Essential List&#34;. A handpicked selection of stories from BBC Future, Culture, Worklife, and Travel, delivered to your inbox every Friday.</em></p></div></div></div></div></div></article></div></div></div></section></div></div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 06:46:09 +0000</pubDate>
      <source>https://www.bbc.com/future/article/20210810-the-ancient-persian-way-to-keep-cool</source>
    </item>
    <item>
      <title>The British Library puts 1M newspaper pages online for free</title>
      <link>https://www.ianvisits.co.uk/blog/2021/08/11/british-library-puts-1-million-newspaper-pages-online-for-free/</link>
      <description></description>
      <content:encoded><![CDATA[<img src="https://rss.markdessain.com/feeds/hackernews/https___www_ianvisits_co_uk_blog_2021_08_11_british-library-puts-1-million-newspaper-pages-online-for-free_/image.jpg" /> 
<div id="readability-page-1" class="page"><div id="post-46394">


<div>

<p>The British Library project to digitise copies of newspapers from its archive is to release one million pages as a free resource.</p>
<p>The <a href="https://www.awin1.com/cread.php?awinmid=5895&amp;awinaffid=249893&amp;ued=https%3A%2F%2Fwww.britishnewspaperarchive.co.uk%2F" data-wpel-link="external" rel="nofollow noopener">British Newspaper Archive</a> (BNA) has over 44 million newspaper pages, mostly British and Irish titles, ranging from 1699 to 2009, or just under 10 per cent of all newspapers held by the <a href="https://www.ianvisits.co.uk/blog/tag/british-library/" data-wpel-link="internal">British Library</a>. Currently, around half a million pages are being added to the BNA every month.</p>
<p>At the moment, access to the service requires a subscription, as that helps fund the cost of scanning and recording each newspaper added to the online archive. To open up more of the archive for researchers though, one million pages have been released for <strong>free</strong>, with a commitment to release a million more each year for the next four years.</p>
<p>So that’s five million pages of old newspaper articles in total.</p>
<p><a href="https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage.jpg" data-wpel-link="internal"><picture><source srcset="https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-1024x614.jpg.webp 1024w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-600x360.jpg.webp 600w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-250x150.jpg.webp 250w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-768x461.jpg.webp 768w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-1536x922.jpg.webp 1536w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-100x60.jpg.webp 100w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-150x90.jpg.webp 150w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-200x120.jpg.webp 200w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-300x180.jpg.webp 300w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-450x270.jpg.webp 450w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage-900x540.jpg.webp 900w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Free-Titles-Collage.jpg.webp 1800w" sizes="(max-width: 605px) 100vw, 605px" type="image/webp"/></picture></a></p>
<p>They won’t add all papers, as they say that while they consider newspapers made before 1881 to be in the public domain, that does not mean that will make all pre-1881 digitised titles available for free, as the archive is dependent on subscriptions to cover its costs. If like me you do a lot of historical research, then the cost of the full subscription is not that bad – <a href="https://www.awin1.com/cread.php?awinmid=5895&amp;awinaffid=249893&amp;ued=https%3A%2F%2Fwww.britishnewspaperarchive.co.uk%2Faccount%2Fsubscribe" data-wpel-link="external" rel="nofollow noopener">just £80 a year</a> for the full archive.</p>
<p>For the free service, there are 158 newspaper titles on offer, ranging from 1720 to 1880. The latter date is significant. All of the newspapers that make up the ‘free to view’ offer are out-of-copyright. The British Library keeps to a ‘safe date’ when determining when a newspaper can be considered to be entirely out-of-copyright, which is 140 years after the date of publication.</p>
<p>To make use of the service, go <a href="https://www.awin1.com/cread.php?awinmid=5895&amp;awinaffid=249893&amp;ued=https%3A%2F%2Fwww.britishnewspaperarchive.co.uk%2F" data-wpel-link="external" rel="nofollow noopener"><strong>here</strong></a>, and you need to register for an account, and then the search functionality is fairly simple to use, and the advanced search really helps to narrow the results down.</p>
<p>When you do a search, it will return all the pages in the archive, but if you scroll down the sidebar, there’s an option to filter by free pages only.</p>
<p>You can also browse editions and read entire newspapers from the past.</p>
<p><a href="https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1.jpg" data-wpel-link="internal"><picture><source srcset="https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1.jpg.webp 1024w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-600x312.jpg.webp 600w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-768x399.jpg.webp 768w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-100x52.jpg.webp 100w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-150x78.jpg.webp 150w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-200x104.jpg.webp 200w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-300x156.jpg.webp 300w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-450x234.jpg.webp 450w, https://www.ianvisits.co.uk/blog/wp-content/uploads/2021/08/Blackpool-Gazette-Herald-Friday-23-March-1877-2021-08-06-at-16.34.05-1024x532-1-900x468.jpg.webp 900w" sizes="(max-width: 1024px) 100vw, 1024px" type="image/webp"/></picture></a></p>
<p>Below is a complete listing of all newspaper titles on the initial ‘free to view’ list of one million pages, including changes of title. Start and end dates are for what is being made freely available, not necessarily the complete run of the newspaper. For a few titles, there are some missing issues for the dates given.</p>
<ul>
<li>The Age (1825-1843)</li>
<li>Alston Herald, and East Cumberland Advertiser (1875-1879)</li>
<li>The Argus, or, Broad-sheet of the Empire (1839-1843)</li>
<li>The Atherstone Times (1879-1879), The Atherstone, Nuneaton, and Warwickshire Times (1879-1879)</li>
<li>Baldwin’s London Weekly Journal (1803-1836)</li>
<li>The Barbadian (1822-1861)</li>
<li>Barbados Mercury (1783-1789), Barbados Mercury, and Bridge-town Gazette (1807-1848)</li>
<li>The Barrow Herald and Furness Advertiser (1863-1879)</li>
<li>The Beacon (Edinburgh) (1821-1821)</li>
<li>The Beacon (London) (1822-1822)</li>
<li>The Bee-Hive (1862-1870), The Penny Bee-Hive (1870-1870), The Bee-Hive (1870-1876), Industrial Review, Social and Political (1877-1878)</li>
<li>The Birkenhead News and Wirral General Advertiser (1878-1879)</li>
<li>The Blackpool Herald (1874-1879)</li>
<li>Blandford, Wimborne and Poole Telegram (1874-1879), The Blandford and Wimbourne Telegram (1879-1879)</li>
<li>Bridlington and Quay Gazette (1877-1877)</li>
<li>Bridport, Beaminster, and Lyme Regis Telegram and Dorset, Somerset, and Devon Advertiser (1865, 1877-1879)</li>
<li>Brighouse &amp; Rastrick Gazette (1879-1879)</li>
<li>The Brighton Patriot, and Lewes Free Press (1835-1836), Brighton Patriot and South of England Free Press (1836-1839)</li>
<li>The British Emancipator (1837-1840)</li>
<li>The British Liberator (1833-1833)</li>
<li>The British Luminary; or, Weekly News and General Advertiser (1818-1818), The British Luminary and National Intelligencer (1818-1818), The British Luminary and Weekly Intelligence (1818-1820), The British Luminary, or Weekly Intelligencer (1820-1820), The Weekly Intelligencer, and British Luminary (1820-1821), The British Luminary and Weekly Intelligencer (1821-1823)</li>
<li>British Miner and General Newsman (1862-1863), The Miner (1863-1863), The Miner and Workman’s Advocate (1863-1865), The Workman’s Advocate (1865-1866), The Commonwealth (1866-1867)</li>
<li>The British Press; or, Morning Literary Advertiser (1803-1826)</li>
<li>Caledonian Mercury (1720-1799), Caledonian Mercury (1800-1859), The Caledonian Mercury and Daily Express (1859-1860), The Caledonian Mercury (1860-1867)</li>
<li>The Cannock Chase Examiner (1874-1877)</li>
<li>The Central Glamorgan Gazette, and General, Commercial, and Agricultural Advertiser (1866-1879)</li>
<li>Champion (1836-1836), The Champion and Weekly Herald (1836-1840)</li>
<li>The Charter (1839-1840)</li>
<li>Chartist (1839-1839)</li>
<li>Chartist Circular (1839-1841)</li>
<li>Cleave’s Weekly Police Gazette (1835-1836), Cleave’s Weekly Police Gazette and Journal of News, Politics, and Literature (1836-1836)</li>
<li>Cobbett’s Annual Register (1802-1804), Cobbett’s Weekly Political Register (1804-1836)</li>
<li>Colored News (1855-1855)</li>
<li>Cradley Heath &amp; Stourbridge Observer (1864-1864), The Observer, Cradley Heath, Halesowen &amp; District Chronicle (1864-1866), The Stourbridge Observer, Cradley Heath, Halesowen &amp; District Chronicle (1866-1879)</li>
<li>The Darlington &amp; Stockton Telegraph, Richmond Herald, South Durham and North York Review (1870-1870), Darlington &amp; Richmond Herald (1873-1874)</li>
<li>Denton, Haughton, &amp; District Weekly News, The (1873-1874), Denton &amp; Haughton Weekly News, and Audenshaw, Hooley Hill, and Dukinfield Advertiser (1874-1875), Denton Examiner, Audenshaw, Hooley Hill and Dukinfield Advertiser (1875-1878), Denton and Haughton Examiner (1878-1879)</li>
<li>The Dewsbury Chronicle, and West Riding Advertiser (1872-1875)</li>
<li>The Dorset County Express and Agricultural Gazette (1858-1879)</li>
<li>The Examiner (1808-1880)</li>
<li>The Express (1846-1869)</li>
<li>The Forest of Dean Examiner (1875-1877)</li>
<li>The Glasgow Chronicle (1844-1857)</li>
<li>Glasgow Courier (1802, 1844-1866)</li>
<li>Illustrated Sporting News and Theatrical and Musical Review (Illustrated Sporting News, Theatrical Review (1862-1865), Illustrated Sporting and Theatrical News (1865-1870)</li>
<li>The Imperial Weekly Gazette (1808-1810), The Imperial Weekly Gazette and Westminster Journal (1818-1823), Imperial Gazette (1823-1825)</li>
<li>The Jamaica Mercury and Kingston Weekly Advertiser (1779-1780), The Royal Gazette (1780-1836), The Royal Gazette and Jamaica Times (1838-1840), The Royal Gazette of Jamaica (1840-1840)</li>
<li>Jewish Record (1868-1871)</li>
<li>The Kenilworth Advertiser (1872-1879)</li>
<li>The Lady’s Newspaper and Pictorial Times (1847-1863)</li>
<li>The Lady’s Own Paper (1866-1872)</li>
<li>The Lancaster Herald, and Town and County Advertiser (1831-1832)</li>
<li>The Liverpool Standard and General Commercial Advertiser (1832-1854), Liverpool Standard and General Advertiser (1854-1855), Liverpool Standard and General Commercial Advertiser (1855-1856)</li>
<li>Liverpool Weekly Courier (1867-1879)</li>
<li>Lloyd’s Companion to the “Penny Sunday Times and Peoples’ Police Gazette” (1841-1847)</li>
<li>London Dispatch and People’s Political and Social Reformer (1836-1839)</li>
<li>The Manchester Examiner (1848-1848)</li>
<li>Manchester Times (1828-1829), The Manchester Times and Gazette (1829-1848), Manchester Times and Manchester and Salford Advertiser and Chronicle (1848-1848)</li>
<li>The Midland Examiner and Times (1877-1877), The Midland Examiner and Wolverhampton Times (1877-1878)</li>
<li>Mirror of the Times (1800-1823)</li>
<li>The Morning Chronicle (1801-1865)</li>
<li>Morning Herald (1801-1869)</li>
<li>The National Register (1808-1823)</li>
<li>The New Weekly True Sun (1836-1836)</li>
<li>The News (1805-1835), The News and Sunday Herald (1835-1837), The News and Sunday Globe (1837-1839)</li>
<li>The Northern Daily Times (1853-1857), Northern Times (1857-1860), The Daily Times (1860-1861)</li>
<li>The Northern Liberator (1837-1840), The Northern Liberator and Champion (1840-1840)</li>
<li>Northern Star and Leeds General Advertiser (1838-1844), The Northern Star and National Trades’ Journal (1844-1852), The Star and National Trades’ Journal (1852-1852), The Star of Freedom (1852-1852)</li>
<li>The Nuneaton Times (1878-1879)</li>
<li>The Odd Fellow (1839-1842)</li>
<li>The Operative (1838-1839)</li>
<li>Pictorial Times (1843-1848)</li>
<li>Pierce Egan’s Life in London (1824-1827)</li>
<li>The Pontypridd District Herald and Rhondda Valley, Llantrisant, Caerphilly, and Mountain Ash News (1878-1879)</li>
<li>The Poole Telegram (1879-1879)</li>
<li>The Poor Man’s Guardian (1831-1835)</li>
<li>The Potteries Examiner (1871-1879)</li>
<li>The Press (1853-1866)</li>
<li>Runcorn and Widnes Examiner (1870-1876), Runcorn Examiner (1877-1879)</li>
<li>The St. Helens Examiner, and Prescot Weekly News (1879-1879)</li>
<li>The Saint James’s Chronicle (1801-1866)</li>
<li>Shropshire Examiner and all round the Wrekin Advertiser (1874-1877)</li>
<li>The South Staffordshire Examiner (1874-1874)</li>
<li>The Southern Star and London and Brighton Patriot (1840-1840)</li>
<li>Stalybridge Examiner, and Ashton, Dukinfield and Mossley Advertiser (1876-1876)</li>
<li>The Star (1801-1831)</li>
<li>The Statesman (1806-1824)</li>
<li>The Stockton Examiner, and South Durham and North Yorkshire Herald (1879-1879)</li>
<li>Stockton Gazette and Middlesbrough Times (1860-1865), Middlesbro’ &amp; Stockton Gazette and General Advertiser (1868-1868), The Middlesbrough Gazette and General Advertiser (1869-1869), Middlesbrough &amp; Stockton Gazette and General Advertiser (1869-1876), The Weekly Gazette for Middlesbrough, Stockton, Hartlepool and Cleveland District (1876-1879)</li>
<li>Stockton Herald, South Durham and Cleveland Advertiser (1858-1879)</li>
<li>Stretford and Urmston Examiner (1879-1879)</li>
<li>The Sun (1801-1871)</li>
<li>Swansea and Glamorgan Herald, and South Wales Free Press (1847-1879)</li>
<li>The Tamworth Miners’ Examiner and Working Men’s Journal (1873-1873), The Tamworth Examiner and Working Men’s Journal (1873-1876)</li>
<li>The Warrington Examiner (1885-1878), The Warrington &amp; Mid-Cheshire Examiner (1879-1879)</li>
<li>The Weekly Chronicle (1836-1851), The Weekly News and Chronicle (1851-1854), The Weekly Chronicle (1855-1855), The Weekly Chronicle and Register (1855-1864), The Weekly Chronicle and Register of Banking, Insurance, Railway and Mining Companies, Trade and Commerce (1864-1867)</li>
<li>Westminster Journal and Old British Spy (1805-1810)</li>
<li>The Weymouth, Portland and Dorchester Telegram (1862-1878)</li>
<li>Widnes Examiner (1876-1879)</li>
<li>Wolverhampton Times and Bilston, Willenhall, Wednesfield, and Sedgley Journal (1874-1875), The Wolverhampton and Midland Counties Advertiser (1875-1876)</li>
</ul>
</div>










<div>
<p>SUPPORT THIS WEBSITE</p>
<div>
<p>This website has been running now for just over a decade, and while advertising revenue contributes to funding the website, but doesn&#39;t cover the costs. That is why I have set up a facility with <a href="https://donorbox.org/support-ianvisits-reporting-and-events-guide" data-wpel-link="external" rel="nofollow noopener">DonorBox</a> where you can contribute to the costs of the website and time invested in writing and research for the news articles.</p>
<p>It&#39;s very similar to the way The Guardian and many smaller websites are now seeking to generate an income in the face of rising costs and declining advertising.</p>
<p>Whether its a one-off donation or a regular giver, every additional support goes a long way to covering the running costs of this website, and keeping you regularly topped up doses of Londony news and facts.</p>
<p>If you like what your read on here, then please support the website <a href="https://donorbox.org/support-ianvisits-reporting-and-events-guide" data-wpel-link="external" rel="nofollow noopener"><strong>here</strong></a>.</p>
<p>Thank you</p>
</div>
</div>
</div></div>]]></content:encoded>
      <pubDate>Wed, 11 Aug 2021 11:20:20 +0000</pubDate>
      <source>https://www.ianvisits.co.uk/blog/2021/08/11/british-library-puts-1-million-newspaper-pages-online-for-free/</source>
    </item>
  </channel>
</rss>